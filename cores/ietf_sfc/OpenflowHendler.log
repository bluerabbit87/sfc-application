[DEBUG|SFManager.py:33] 2015-12-13 20:42:38,866 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 20:42:38,866 > []
[DEBUG|SFManager.py:33] 2015-12-13 20:42:53,506 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 20:42:53,506 > []
[DEBUG|SFManager.py:33] 2015-12-13 20:43:31,754 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 20:43:31,754 > []
[DEBUG|SFManager.py:33] 2015-12-13 21:10:21,170 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:10:21,170 > []
[DEBUG|SFManager.py:33] 2015-12-13 21:10:29,048 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:10:29,049 > []
[DEBUG|SFManager.py:33] 2015-12-13 21:13:52,159 > args ['create-sf', 's']
[DEBUG|SFManager.py:45] 2015-12-13 21:13:52,160 > []
[DEBUG|SFManager.py:33] 2015-12-13 21:14:58,417 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:14:58,418 > []
[DEBUG|SFManager.py:33] 2015-12-13 21:15:00,807 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:15:00,807 > []
[DEBUG|SFManager.py:33] 2015-12-13 21:15:03,281 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:15:03,281 > []
[DEBUG|SFManager.py:33] 2015-12-13 21:15:05,640 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:15:05,641 > []
[DEBUG|SFManager.py:33] 2015-12-13 21:15:08,103 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:15:08,103 > []
[DEBUG|SFManager.py:33] 2015-12-13 21:24:05,905 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:24:05,905 > []
[DEBUG|SFManager.py:33] 2015-12-13 21:24:13,086 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:24:13,086 > []
[DEBUG|SFManager.py:33] 2015-12-13 21:24:28,887 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:24:28,887 > []
[DEBUG|SFManager.py:141] 2015-12-13 21:24:28,887 > SF name is OK
[DEBUG|SFManager.py:33] 2015-12-13 21:25:11,518 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:25:11,518 > []
[DEBUG|SFManager.py:141] 2015-12-13 21:25:11,518 > The SF name is OK
[DEBUG|SFManager.py:33] 2015-12-13 21:25:18,389 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:25:18,390 > []
[DEBUG|SFManager.py:141] 2015-12-13 21:25:18,390 > The SF name is OK
[DEBUG|SFManager.py:33] 2015-12-13 21:27:32,703 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:27:32,703 > []
[DEBUG|SFManager.py:141] 2015-12-13 21:27:32,703 > The SF name is OK
[ERROR|SFManager.py:149] 2015-12-13 21:27:32,703 > The SF Type is wrong(Firewall)
[DEBUG|SFManager.py:33] 2015-12-13 21:27:40,645 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:27:40,646 > []
[DEBUG|SFManager.py:141] 2015-12-13 21:27:40,646 > The SF name is OK
[ERROR|SFManager.py:149] 2015-12-13 21:27:40,646 > The SF Type is wrong(Firewall)
[DEBUG|SFManager.py:33] 2015-12-13 21:28:50,182 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:28:50,182 > []
[DEBUG|SFManager.py:141] 2015-12-13 21:28:50,183 > The SF name is OK (vFW)
[DEBUG|SFManager.py:147] 2015-12-13 21:28:50,183 > The SF Type is OK(Firewall)
[DEBUG|SFManager.py:33] 2015-12-13 21:28:55,765 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:28:55,765 > []
[DEBUG|SFManager.py:141] 2015-12-13 21:28:55,766 > The SF name is OK (vFW)
[DEBUG|SFManager.py:147] 2015-12-13 21:28:55,766 > The SF Type is OK(Firewall)
[DEBUG|SFManager.py:33] 2015-12-13 21:33:03,508 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:33:03,509 > []
[DEBUG|SFManager.py:141] 2015-12-13 21:33:03,509 > The SF name is OK (vFW)
[DEBUG|SFManager.py:147] 2015-12-13 21:33:03,509 > The SF Type is OK(Firewall)
[DEBUG|SFManager.py:156] 2015-12-13 21:33:03,509 > The interfaces name is OK (eth2)
[DEBUG|SFManager.py:156] 2015-12-13 21:33:03,509 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:162] 2015-12-13 21:33:03,509 > The interfaces MAC is OK (52:54:00:48:4e:8a)
[DEBUG|SFManager.py:33] 2015-12-13 21:43:54,627 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:43:54,628 > []
[DEBUG|SFManager.py:33] 2015-12-13 21:44:11,156 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:44:11,156 > []
[DEBUG|SFManager.py:33] 2015-12-13 21:44:15,595 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:44:15,595 > []
[DEBUG|SFManager.py:33] 2015-12-13 21:44:27,622 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:44:27,623 > []
[DEBUG|SFManager.py:33] 2015-12-13 21:44:34,570 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:44:34,570 > []
[DEBUG|SFManager.py:33] 2015-12-13 21:45:07,881 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:45:07,881 > []
[INFO|SFManager.py:66] 2015-12-13 21:45:07,881 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:116] 2015-12-13 21:45:07,881 > The SF name is OK (vFW)
[DEBUG|SFManager.py:122] 2015-12-13 21:45:07,881 > The SF Type is OK(Firewall)
[DEBUG|SFManager.py:131] 2015-12-13 21:45:07,881 > The interfaces name is OK (eth2)
[DEBUG|SFManager.py:131] 2015-12-13 21:45:07,882 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:137] 2015-12-13 21:45:07,882 > The interfaces MAC is OK (52:54:00:48:4e:8a)
[ERROR|SFManager.py:104] 2015-12-13 21:45:07,883 > already, the service function is exist
[DEBUG|SFManager.py:33] 2015-12-13 21:45:30,938 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:45:30,938 > []
[INFO|SFManager.py:66] 2015-12-13 21:45:30,939 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:116] 2015-12-13 21:45:30,939 > The SF name is OK (vFW)
[DEBUG|SFManager.py:122] 2015-12-13 21:45:30,939 > The SF Type is OK(Firewall)
[DEBUG|SFManager.py:131] 2015-12-13 21:45:30,939 > The interfaces name is OK (eth2)
[DEBUG|SFManager.py:131] 2015-12-13 21:45:30,939 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:137] 2015-12-13 21:45:30,939 > The interfaces MAC is OK (52:54:00:48:4e:8a)
[DEBUG|SFManager.py:108] 2015-12-13 21:45:31,216 > {u'ip': u'0.0.0.0', u'interfaces': {u'eth2': {u'ip': u'192.168.10.1', u'mac': u'52:54:00:f8:4a:02', u'type': u'egress', u'name': u'eth2'}, u'eth1': {u'ip': u'10.0.10.1', u'mac': u'52:54:00:48:4e:8a', u'type': u'ingress', u'name': u'eth1'}}, '_id': ObjectId('566e577b1d41c8cb95bb5532'), u'type': u'Firewall', u'name': u'vFW'}
[INFO|SFManager.py:109] 2015-12-13 21:45:31,216 > The service function insertion is completed
[DEBUG|SFManager.py:33] 2015-12-13 21:47:09,618 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:47:09,618 > []
[INFO|SFManager.py:66] 2015-12-13 21:47:09,618 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:116] 2015-12-13 21:47:09,619 > The SF name is OK (vFW)
[DEBUG|SFManager.py:122] 2015-12-13 21:47:09,619 > The SF Type is OK(Firewall)
[DEBUG|SFManager.py:131] 2015-12-13 21:47:09,619 > The interfaces name is OK (eth2)
[DEBUG|SFManager.py:131] 2015-12-13 21:47:09,619 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:137] 2015-12-13 21:47:09,619 > The interfaces MAC is OK (52:54:00:48:4e:8a)
[ERROR|SFManager.py:104] 2015-12-13 21:47:09,620 > already, the service function is exist
[DEBUG|SFManager.py:33] 2015-12-13 21:47:14,109 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:47:14,109 > []
[INFO|SFManager.py:66] 2015-12-13 21:47:14,109 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:116] 2015-12-13 21:47:14,109 > The SF name is OK (vFW)
[DEBUG|SFManager.py:122] 2015-12-13 21:47:14,110 > The SF Type is OK(Firewall)
[DEBUG|SFManager.py:131] 2015-12-13 21:47:14,110 > The interfaces name is OK (eth2)
[DEBUG|SFManager.py:131] 2015-12-13 21:47:14,110 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:137] 2015-12-13 21:47:14,110 > The interfaces MAC is OK (52:54:00:48:4e:8a)
[ERROR|SFManager.py:104] 2015-12-13 21:47:14,111 > already, the service function is exist
[DEBUG|SFManager.py:33] 2015-12-13 21:48:48,097 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:48:48,097 > []
[INFO|SFManager.py:66] 2015-12-13 21:48:48,098 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:116] 2015-12-13 21:48:48,098 > The SF name is OK (vFW)
[DEBUG|SFManager.py:122] 2015-12-13 21:48:48,098 > The SF Type is OK(Firewall)
[DEBUG|SFManager.py:131] 2015-12-13 21:48:48,098 > The interfaces name is OK (eth2)
[DEBUG|SFManager.py:131] 2015-12-13 21:48:48,098 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:137] 2015-12-13 21:48:48,098 > The interfaces MAC is OK (52:54:00:48:4e:8a)
[ERROR|SFManager.py:104] 2015-12-13 21:48:48,099 > already, the service function is exist
[DEBUG|SFManager.py:33] 2015-12-13 21:49:59,618 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:49:59,619 > []
[INFO|SFManager.py:66] 2015-12-13 21:49:59,619 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:116] 2015-12-13 21:49:59,619 > The SF name is OK (vFW)
[DEBUG|SFManager.py:122] 2015-12-13 21:49:59,619 > The SF Type is OK(Firewall)
[DEBUG|SFManager.py:131] 2015-12-13 21:49:59,619 > The interfaces name is OK (eth2)
[DEBUG|SFManager.py:131] 2015-12-13 21:49:59,619 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:137] 2015-12-13 21:49:59,619 > The interfaces MAC is OK (52:54:00:48:4e:8a)
[ERROR|SFManager.py:104] 2015-12-13 21:49:59,895 > already, the service function is exist
[DEBUG|SFManager.py:33] 2015-12-13 21:50:09,024 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:50:09,025 > []
[INFO|SFManager.py:66] 2015-12-13 21:50:09,025 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:116] 2015-12-13 21:50:09,025 > The SF name is OK (vFW)
[DEBUG|SFManager.py:122] 2015-12-13 21:50:09,025 > The SF Type is OK(Firewall)
[DEBUG|SFManager.py:131] 2015-12-13 21:50:09,025 > The interfaces name is OK (eth2)
[DEBUG|SFManager.py:131] 2015-12-13 21:50:09,025 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:137] 2015-12-13 21:50:09,025 > The interfaces MAC is OK (52:54:00:48:4e:8a)
[DEBUG|SFManager.py:108] 2015-12-13 21:50:09,027 > {u'ip': u'0.0.0.0', u'interfaces': {u'eth2': {u'ip': u'192.168.10.1', u'mac': u'52:54:00:f8:4a:02', u'type': u'egress', u'name': u'eth2'}, u'eth1': {u'ip': u'10.0.10.1', u'mac': u'52:54:00:48:4e:8a', u'type': u'ingress', u'name': u'eth1'}}, '_id': ObjectId('566e58911d41c8cc6f65b8c4'), u'type': u'Firewall', u'name': u'vFW'}
[INFO|SFManager.py:109] 2015-12-13 21:50:09,027 > The service function insertion is completed
[DEBUG|SFManager.py:33] 2015-12-13 21:50:45,747 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:50:45,747 > []
[INFO|SFManager.py:66] 2015-12-13 21:50:45,747 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:116] 2015-12-13 21:50:45,747 > The SF name is OK (vFW)
[DEBUG|SFManager.py:122] 2015-12-13 21:50:45,747 > The SF Type is OK(Firewall)
[DEBUG|SFManager.py:131] 2015-12-13 21:50:45,747 > The interfaces name is OK (eth2)
[DEBUG|SFManager.py:137] 2015-12-13 21:50:45,748 > The interfaces MAC is OK (52:54:00:f8:4a:02)
[DEBUG|SFManager.py:131] 2015-12-13 21:50:45,748 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:137] 2015-12-13 21:50:45,748 > The interfaces MAC is OK (52:54:00:48:4e:8a)
[DEBUG|SFManager.py:108] 2015-12-13 21:50:45,749 > {u'ip': u'0.0.0.0', u'interfaces': {u'eth2': {u'ip': u'192.168.10.1', u'mac': u'52:54:00:f8:4a:02', u'type': u'egress', u'name': u'eth2'}, u'eth1': {u'ip': u'10.0.10.1', u'mac': u'52:54:00:48:4e:8a', u'type': u'ingress', u'name': u'eth1'}}, '_id': ObjectId('566e58b51d41c8cc97bd1972'), u'type': u'Firewall', u'name': u'vFW'}
[INFO|SFManager.py:109] 2015-12-13 21:50:45,750 > The service function insertion is completed
[DEBUG|SFManager.py:33] 2015-12-13 21:50:52,183 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:50:52,184 > []
[INFO|SFManager.py:66] 2015-12-13 21:50:52,184 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:116] 2015-12-13 21:50:52,184 > The SF name is OK (vDPI)
[DEBUG|SFManager.py:122] 2015-12-13 21:50:52,185 > The SF Type is OK(DPI)
[DEBUG|SFManager.py:131] 2015-12-13 21:50:52,185 > The interfaces name is OK (eth2)
[DEBUG|SFManager.py:137] 2015-12-13 21:50:52,185 > The interfaces MAC is OK (52:54:00:60:f7:82)
[DEBUG|SFManager.py:131] 2015-12-13 21:50:52,185 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:137] 2015-12-13 21:50:52,185 > The interfaces MAC is OK (52:54:00:6d:96:e9)
[DEBUG|SFManager.py:108] 2015-12-13 21:50:52,186 > {u'ip': u'0.0.0.0', u'interfaces': {u'eth2': {u'ip': u'192.168.10.2', u'mac': u'52:54:00:60:f7:82', u'type': u'egress', u'name': u'eth2'}, u'eth1': {u'ip': u'10.0.10.2', u'mac': u'52:54:00:6d:96:e9', u'type': u'ingress', u'name': u'eth1'}}, '_id': ObjectId('566e58bc1d41c8cca004912e'), u'type': u'DPI', u'name': u'vDPI'}
[INFO|SFManager.py:109] 2015-12-13 21:50:52,186 > The service function insertion is completed
[DEBUG|SFManager.py:33] 2015-12-13 21:50:54,537 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:50:54,537 > []
[INFO|SFManager.py:66] 2015-12-13 21:50:54,537 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:116] 2015-12-13 21:50:54,537 > The SF name is OK (Endian)
[DEBUG|SFManager.py:122] 2015-12-13 21:50:54,537 > The SF Type is OK(UTM)
[DEBUG|SFManager.py:131] 2015-12-13 21:50:54,538 > The interfaces name is OK (eth2)
[DEBUG|SFManager.py:137] 2015-12-13 21:50:54,538 > The interfaces MAC is OK (52:54:00:63:6f:85)
[DEBUG|SFManager.py:131] 2015-12-13 21:50:54,538 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:137] 2015-12-13 21:50:54,538 > The interfaces MAC is OK (52:54:00:37:a6:2d)
[DEBUG|SFManager.py:108] 2015-12-13 21:50:54,539 > {u'ip': u'0.0.0.0', u'interfaces': {u'eth2': {u'ip': u'192.168.0.30', u'mac': u'52:54:00:63:6f:85', u'type': u'egress', u'name': u'eth2'}, u'eth1': {u'ip': u'', u'mac': u'52:54:00:37:a6:2d', u'type': u'ingress', u'name': u'eth1'}}, '_id': ObjectId('566e58be1d41c8cca90d3d69'), u'type': u'UTM', u'name': u'Endian'}
[INFO|SFManager.py:109] 2015-12-13 21:50:54,539 > The service function insertion is completed
[DEBUG|SFManager.py:33] 2015-12-13 21:50:56,513 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:50:56,513 > []
[INFO|SFManager.py:66] 2015-12-13 21:50:56,513 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:116] 2015-12-13 21:50:56,514 > The SF name is OK (Endian A)
[DEBUG|SFManager.py:122] 2015-12-13 21:50:56,514 > The SF Type is OK(UTM)
[DEBUG|SFManager.py:131] 2015-12-13 21:50:56,514 > The interfaces name is OK (eth2)
[DEBUG|SFManager.py:137] 2015-12-13 21:50:56,514 > The interfaces MAC is OK (52:54:00:B0:29:68)
[DEBUG|SFManager.py:131] 2015-12-13 21:50:56,514 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:137] 2015-12-13 21:50:56,514 > The interfaces MAC is OK (52:54:00:E9:4F:B9)
[DEBUG|SFManager.py:108] 2015-12-13 21:50:56,516 > {u'ip': u'0.0.0.0', u'interfaces': {u'eth2': {u'ip': u'', u'mac': u'52:54:00:B0:29:68', u'type': u'egress', u'name': u'eth2'}, u'eth1': {u'ip': u'', u'mac': u'52:54:00:E9:4F:B9', u'type': u'ingress', u'name': u'eth1'}}, '_id': ObjectId('566e58c01d41c8ccb01ce572'), u'type': u'UTM', u'name': u'Endian A'}
[INFO|SFManager.py:109] 2015-12-13 21:50:56,516 > The service function insertion is completed
[DEBUG|SFManager.py:33] 2015-12-13 21:50:58,408 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:50:58,409 > []
[INFO|SFManager.py:66] 2015-12-13 21:50:58,409 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:116] 2015-12-13 21:50:58,409 > The SF name is OK (Endian B)
[DEBUG|SFManager.py:122] 2015-12-13 21:50:58,409 > The SF Type is OK(UTM)
[DEBUG|SFManager.py:131] 2015-12-13 21:50:58,409 > The interfaces name is OK (eth2)
[DEBUG|SFManager.py:137] 2015-12-13 21:50:58,409 > The interfaces MAC is OK (52:54:00:13:1E:D7)
[DEBUG|SFManager.py:131] 2015-12-13 21:50:58,409 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:137] 2015-12-13 21:50:58,410 > The interfaces MAC is OK (52:54:00:7C:A8:50)
[DEBUG|SFManager.py:108] 2015-12-13 21:50:58,411 > {u'ip': u'0.0.0.0', u'interfaces': {u'eth2': {u'ip': u'', u'mac': u'52:54:00:13:1E:D7', u'type': u'egress', u'name': u'eth2'}, u'eth1': {u'ip': u'', u'mac': u'52:54:00:7C:A8:50', u'type': u'ingress', u'name': u'eth1'}}, '_id': ObjectId('566e58c21d41c8ccbade6d20'), u'type': u'UTM', u'name': u'Endian B'}
[INFO|SFManager.py:109] 2015-12-13 21:50:58,411 > The service function insertion is completed
[INFO|SFManager.py:188] 2015-12-13 21:53:46,263 > delete the service function entrie
[INFO|SFManager.py:194] 2015-12-13 21:53:46,265 > 5 service entries are deleted
[DEBUG|SFManager.py:33] 2015-12-13 21:53:51,292 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:53:51,292 > []
[INFO|SFManager.py:66] 2015-12-13 21:53:51,292 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:116] 2015-12-13 21:53:51,292 > The SF name is OK (vFW)
[DEBUG|SFManager.py:122] 2015-12-13 21:53:51,292 > The SF Type is OK(Firewall)
[DEBUG|SFManager.py:131] 2015-12-13 21:53:51,293 > The interfaces name is OK (eth2)
[DEBUG|SFManager.py:137] 2015-12-13 21:53:51,293 > The interfaces MAC is OK (52:54:00:f8:4a:02)
[DEBUG|SFManager.py:131] 2015-12-13 21:53:51,293 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:137] 2015-12-13 21:53:51,293 > The interfaces MAC is OK (52:54:00:48:4e:8a)
[DEBUG|SFManager.py:108] 2015-12-13 21:53:51,294 > {u'ip': u'0.0.0.0', u'interfaces': {u'eth2': {u'ip': u'192.168.10.1', u'mac': u'52:54:00:f8:4a:02', u'type': u'egress', u'name': u'eth2'}, u'eth1': {u'ip': u'10.0.10.1', u'mac': u'52:54:00:48:4e:8a', u'type': u'ingress', u'name': u'eth1'}}, '_id': ObjectId('566e596f1d41c8cd9590fdba'), u'type': u'Firewall', u'name': u'vFW'}
[INFO|SFManager.py:109] 2015-12-13 21:53:51,294 > The service function insertion is completed
[DEBUG|SFManager.py:33] 2015-12-13 21:53:53,389 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:53:53,389 > []
[INFO|SFManager.py:66] 2015-12-13 21:53:53,389 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:116] 2015-12-13 21:53:53,389 > The SF name is OK (vDPI)
[DEBUG|SFManager.py:122] 2015-12-13 21:53:53,390 > The SF Type is OK(DPI)
[DEBUG|SFManager.py:131] 2015-12-13 21:53:53,390 > The interfaces name is OK (eth2)
[DEBUG|SFManager.py:137] 2015-12-13 21:53:53,390 > The interfaces MAC is OK (52:54:00:60:f7:82)
[DEBUG|SFManager.py:131] 2015-12-13 21:53:53,390 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:137] 2015-12-13 21:53:53,390 > The interfaces MAC is OK (52:54:00:6d:96:e9)
[DEBUG|SFManager.py:108] 2015-12-13 21:53:53,391 > {u'ip': u'0.0.0.0', u'interfaces': {u'eth2': {u'ip': u'192.168.10.2', u'mac': u'52:54:00:60:f7:82', u'type': u'egress', u'name': u'eth2'}, u'eth1': {u'ip': u'10.0.10.2', u'mac': u'52:54:00:6d:96:e9', u'type': u'ingress', u'name': u'eth1'}}, '_id': ObjectId('566e59711d41c8cd9c35b07e'), u'type': u'DPI', u'name': u'vDPI'}
[INFO|SFManager.py:109] 2015-12-13 21:53:53,391 > The service function insertion is completed
[DEBUG|SFManager.py:33] 2015-12-13 21:53:55,423 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:53:55,424 > []
[INFO|SFManager.py:66] 2015-12-13 21:53:55,424 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:116] 2015-12-13 21:53:55,424 > The SF name is OK (Endian)
[DEBUG|SFManager.py:122] 2015-12-13 21:53:55,424 > The SF Type is OK(UTM)
[DEBUG|SFManager.py:131] 2015-12-13 21:53:55,424 > The interfaces name is OK (eth2)
[DEBUG|SFManager.py:137] 2015-12-13 21:53:55,424 > The interfaces MAC is OK (52:54:00:63:6f:85)
[DEBUG|SFManager.py:131] 2015-12-13 21:53:55,424 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:137] 2015-12-13 21:53:55,425 > The interfaces MAC is OK (52:54:00:37:a6:2d)
[DEBUG|SFManager.py:108] 2015-12-13 21:53:55,426 > {u'ip': u'0.0.0.0', u'interfaces': {u'eth2': {u'ip': u'192.168.0.30', u'mac': u'52:54:00:63:6f:85', u'type': u'egress', u'name': u'eth2'}, u'eth1': {u'ip': u'', u'mac': u'52:54:00:37:a6:2d', u'type': u'ingress', u'name': u'eth1'}}, '_id': ObjectId('566e59731d41c8cda5420b9f'), u'type': u'UTM', u'name': u'Endian'}
[INFO|SFManager.py:109] 2015-12-13 21:53:55,426 > The service function insertion is completed
[DEBUG|SFManager.py:33] 2015-12-13 21:53:57,473 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:53:57,473 > []
[INFO|SFManager.py:66] 2015-12-13 21:53:57,473 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:116] 2015-12-13 21:53:57,473 > The SF name is OK (Endian A)
[DEBUG|SFManager.py:122] 2015-12-13 21:53:57,473 > The SF Type is OK(UTM)
[DEBUG|SFManager.py:131] 2015-12-13 21:53:57,473 > The interfaces name is OK (eth2)
[DEBUG|SFManager.py:137] 2015-12-13 21:53:57,473 > The interfaces MAC is OK (52:54:00:B0:29:68)
[DEBUG|SFManager.py:131] 2015-12-13 21:53:57,473 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:137] 2015-12-13 21:53:57,474 > The interfaces MAC is OK (52:54:00:E9:4F:B9)
[DEBUG|SFManager.py:108] 2015-12-13 21:53:57,475 > {u'ip': u'0.0.0.0', u'interfaces': {u'eth2': {u'ip': u'', u'mac': u'52:54:00:B0:29:68', u'type': u'egress', u'name': u'eth2'}, u'eth1': {u'ip': u'', u'mac': u'52:54:00:E9:4F:B9', u'type': u'ingress', u'name': u'eth1'}}, '_id': ObjectId('566e59751d41c8cdac6b8140'), u'type': u'UTM', u'name': u'Endian A'}
[INFO|SFManager.py:109] 2015-12-13 21:53:57,475 > The service function insertion is completed
[DEBUG|SFManager.py:33] 2015-12-13 21:53:59,552 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 21:53:59,552 > []
[INFO|SFManager.py:66] 2015-12-13 21:53:59,552 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:116] 2015-12-13 21:53:59,553 > The SF name is OK (Endian B)
[DEBUG|SFManager.py:122] 2015-12-13 21:53:59,553 > The SF Type is OK(UTM)
[DEBUG|SFManager.py:131] 2015-12-13 21:53:59,553 > The interfaces name is OK (eth2)
[DEBUG|SFManager.py:137] 2015-12-13 21:53:59,553 > The interfaces MAC is OK (52:54:00:13:1E:D7)
[DEBUG|SFManager.py:131] 2015-12-13 21:53:59,553 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:137] 2015-12-13 21:53:59,553 > The interfaces MAC is OK (52:54:00:7C:A8:50)
[DEBUG|SFManager.py:108] 2015-12-13 21:53:59,555 > {u'ip': u'0.0.0.0', u'interfaces': {u'eth2': {u'ip': u'', u'mac': u'52:54:00:13:1E:D7', u'type': u'egress', u'name': u'eth2'}, u'eth1': {u'ip': u'', u'mac': u'52:54:00:7C:A8:50', u'type': u'ingress', u'name': u'eth1'}}, '_id': ObjectId('566e59771d41c8cdb56ff176'), u'type': u'UTM', u'name': u'Endian B'}
[INFO|SFManager.py:109] 2015-12-13 21:53:59,555 > The service function insertion is completed
[DEBUG|SFManager.py:33] 2015-12-13 22:42:10,707 > args ['create-sf', 'eth0', '192.168.20.0/24', '00:0c:29:87:3c:6f', 'ingress', 'eth1', '10.0.0.0/24', '4a:88:0b:1c:19:e0', 'egress']
[DEBUG|SFManager.py:41] 2015-12-13 22:42:10,707 > ['eth0']
[DEBUG|SFManager.py:41] 2015-12-13 22:42:10,707 > ['eth0', '192.168.20.0/24']
[DEBUG|SFManager.py:41] 2015-12-13 22:42:10,707 > ['eth0', '192.168.20.0/24', '00:0c:29:87:3c:6f']
[DEBUG|SFManager.py:41] 2015-12-13 22:42:10,707 > ['eth0', '192.168.20.0/24', '00:0c:29:87:3c:6f', 'ingress']
[DEBUG|SFManager.py:42] 2015-12-13 22:42:10,707 > ['eth0', '192.168.20.0/24', '00:0c:29:87:3c:6f', 'ingress']
[DEBUG|SFManager.py:41] 2015-12-13 22:42:10,707 > ['eth1']
[DEBUG|SFManager.py:41] 2015-12-13 22:42:10,707 > ['eth1', '10.0.0.0/24']
[DEBUG|SFManager.py:41] 2015-12-13 22:42:10,708 > ['eth1', '10.0.0.0/24', '4a:88:0b:1c:19:e0']
[DEBUG|SFManager.py:41] 2015-12-13 22:42:10,708 > ['eth1', '10.0.0.0/24', '4a:88:0b:1c:19:e0', 'egress']
[DEBUG|SFManager.py:42] 2015-12-13 22:42:10,708 > ['eth1', '10.0.0.0/24', '4a:88:0b:1c:19:e0', 'egress']
[DEBUG|SFManager.py:45] 2015-12-13 22:42:10,708 > [['eth0', '192.168.20.0/24', '00:0c:29:87:3c:6f', 'ingress'], ['eth1', '10.0.0.0/24', '4a:88:0b:1c:19:e0', 'egress']]
[INFO|SFManager.py:49] 2015-12-13 22:42:10,708 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:99] 2015-12-13 22:42:10,708 > The SF name is OK (test)
[DEBUG|SFManager.py:105] 2015-12-13 22:42:10,708 > The SF Type is OK(FW)
[DEBUG|SFManager.py:114] 2015-12-13 22:42:10,708 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:120] 2015-12-13 22:42:10,708 > The interfaces MAC is OK (4a:88:0b:1c:19:e0)
[DEBUG|SFManager.py:114] 2015-12-13 22:42:10,708 > The interfaces name is OK (eth0)
[DEBUG|SFManager.py:120] 2015-12-13 22:42:10,709 > The interfaces MAC is OK (00:0c:29:87:3c:6f)
[DEBUG|SFManager.py:91] 2015-12-13 22:42:10,710 > {'interfaces': {'eth1': {'ip': '10.0.0.0/24', 'mac': '4a:88:0b:1c:19:e0', 'type': 'egress', 'name': 'eth1'}, 'eth0': {'ip': '192.168.20.0/24', 'mac': '00:0c:29:87:3c:6f', 'type': 'ingress', 'name': 'eth0'}}, '_id': ObjectId('566e64c21d41c8d51bbdef6b'), 'type': 'FW', 'name': 'test'}
[INFO|SFManager.py:92] 2015-12-13 22:42:10,710 > The service function insertion is completed
[DEBUG|SFManager.py:33] 2015-12-13 22:42:47,538 > args ['create-sf', 'eth0', '192.168.20.0/24', '00:0c:29:87:3c:6f', 'ingress', 'eth1', '10.0.0.0/24', '4a:88:0b:1c:19:e0', 'egress']
[DEBUG|SFManager.py:41] 2015-12-13 22:42:47,539 > ['eth0']
[DEBUG|SFManager.py:41] 2015-12-13 22:42:47,539 > ['eth0', '192.168.20.0/24']
[DEBUG|SFManager.py:41] 2015-12-13 22:42:47,539 > ['eth0', '192.168.20.0/24', '00:0c:29:87:3c:6f']
[DEBUG|SFManager.py:41] 2015-12-13 22:42:47,539 > ['eth0', '192.168.20.0/24', '00:0c:29:87:3c:6f', 'ingress']
[DEBUG|SFManager.py:42] 2015-12-13 22:42:47,539 > ['eth0', '192.168.20.0/24', '00:0c:29:87:3c:6f', 'ingress']
[DEBUG|SFManager.py:41] 2015-12-13 22:42:47,539 > ['eth1']
[DEBUG|SFManager.py:41] 2015-12-13 22:42:47,539 > ['eth1', '10.0.0.0/24']
[DEBUG|SFManager.py:41] 2015-12-13 22:42:47,540 > ['eth1', '10.0.0.0/24', '4a:88:0b:1c:19:e0']
[DEBUG|SFManager.py:41] 2015-12-13 22:42:47,540 > ['eth1', '10.0.0.0/24', '4a:88:0b:1c:19:e0', 'egress']
[DEBUG|SFManager.py:42] 2015-12-13 22:42:47,540 > ['eth1', '10.0.0.0/24', '4a:88:0b:1c:19:e0', 'egress']
[DEBUG|SFManager.py:45] 2015-12-13 22:42:47,540 > [['eth0', '192.168.20.0/24', '00:0c:29:87:3c:6f', 'ingress'], ['eth1', '10.0.0.0/24', '4a:88:0b:1c:19:e0', 'egress']]
[INFO|SFManager.py:49] 2015-12-13 22:42:47,540 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:99] 2015-12-13 22:42:47,540 > The SF name is OK (test)
[DEBUG|SFManager.py:105] 2015-12-13 22:42:47,540 > The SF Type is OK(FW)
[DEBUG|SFManager.py:114] 2015-12-13 22:42:47,540 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:120] 2015-12-13 22:42:47,541 > The interfaces MAC is OK (4a:88:0b:1c:19:e0)
[DEBUG|SFManager.py:114] 2015-12-13 22:42:47,541 > The interfaces name is OK (eth0)
[DEBUG|SFManager.py:120] 2015-12-13 22:42:47,541 > The interfaces MAC is OK (00:0c:29:87:3c:6f)
[ERROR|SFManager.py:87] 2015-12-13 22:42:47,542 > already, the service function is exist
[INFO|SFManager.py:171] 2015-12-13 22:43:02,205 > delete the service function entrie
[INFO|SFManager.py:177] 2015-12-13 22:43:02,207 > 6 service entries are deleted
[DEBUG|SFManager.py:33] 2015-12-13 22:43:04,661 > args ['create-sf', 'eth0', '192.168.20.0/24', '00:0c:29:87:3c:6f', 'ingress', 'eth1', '10.0.0.0/24', '4a:88:0b:1c:19:e0', 'egress']
[DEBUG|SFManager.py:41] 2015-12-13 22:43:04,661 > ['eth0']
[DEBUG|SFManager.py:41] 2015-12-13 22:43:04,661 > ['eth0', '192.168.20.0/24']
[DEBUG|SFManager.py:41] 2015-12-13 22:43:04,662 > ['eth0', '192.168.20.0/24', '00:0c:29:87:3c:6f']
[DEBUG|SFManager.py:41] 2015-12-13 22:43:04,662 > ['eth0', '192.168.20.0/24', '00:0c:29:87:3c:6f', 'ingress']
[DEBUG|SFManager.py:42] 2015-12-13 22:43:04,662 > ['eth0', '192.168.20.0/24', '00:0c:29:87:3c:6f', 'ingress']
[DEBUG|SFManager.py:41] 2015-12-13 22:43:04,662 > ['eth1']
[DEBUG|SFManager.py:41] 2015-12-13 22:43:04,662 > ['eth1', '10.0.0.0/24']
[DEBUG|SFManager.py:41] 2015-12-13 22:43:04,662 > ['eth1', '10.0.0.0/24', '4a:88:0b:1c:19:e0']
[DEBUG|SFManager.py:41] 2015-12-13 22:43:04,662 > ['eth1', '10.0.0.0/24', '4a:88:0b:1c:19:e0', 'egress']
[DEBUG|SFManager.py:42] 2015-12-13 22:43:04,662 > ['eth1', '10.0.0.0/24', '4a:88:0b:1c:19:e0', 'egress']
[DEBUG|SFManager.py:45] 2015-12-13 22:43:04,662 > [['eth0', '192.168.20.0/24', '00:0c:29:87:3c:6f', 'ingress'], ['eth1', '10.0.0.0/24', '4a:88:0b:1c:19:e0', 'egress']]
[INFO|SFManager.py:49] 2015-12-13 22:43:04,663 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:99] 2015-12-13 22:43:04,663 > The SF name is OK (test)
[DEBUG|SFManager.py:105] 2015-12-13 22:43:04,663 > The SF Type is OK(FW)
[DEBUG|SFManager.py:114] 2015-12-13 22:43:04,663 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:120] 2015-12-13 22:43:04,663 > The interfaces MAC is OK (4a:88:0b:1c:19:e0)
[DEBUG|SFManager.py:114] 2015-12-13 22:43:04,663 > The interfaces name is OK (eth0)
[DEBUG|SFManager.py:120] 2015-12-13 22:43:04,663 > The interfaces MAC is OK (00:0c:29:87:3c:6f)
[DEBUG|SFManager.py:91] 2015-12-13 22:43:04,664 > {'interfaces': {'eth1': {'ip': '10.0.0.0/24', 'mac': '4a:88:0b:1c:19:e0', 'type': 'egress', 'name': 'eth1'}, 'eth0': {'ip': '192.168.20.0/24', 'mac': '00:0c:29:87:3c:6f', 'type': 'ingress', 'name': 'eth0'}}, '_id': ObjectId('566e64f81d41c8d557c43056'), 'type': 'FW', 'name': 'test'}
[INFO|SFManager.py:92] 2015-12-13 22:43:04,665 > The service function insertion is completed
[DEBUG|SFManager.py:33] 2015-12-13 22:43:55,024 > args ['create-sf', 'eth0', '192.168.20.0/24', '00:0c:29:87:3c:6f', 'ingress', 'eth1', '10.0.0.0/24', '4a:88:0b:1c:19:e0', 'egress']
[DEBUG|SFManager.py:41] 2015-12-13 22:43:55,024 > ['eth0']
[DEBUG|SFManager.py:41] 2015-12-13 22:43:55,024 > ['eth0', '192.168.20.0/24']
[DEBUG|SFManager.py:41] 2015-12-13 22:43:55,024 > ['eth0', '192.168.20.0/24', '00:0c:29:87:3c:6f']
[DEBUG|SFManager.py:41] 2015-12-13 22:43:55,024 > ['eth0', '192.168.20.0/24', '00:0c:29:87:3c:6f', 'ingress']
[DEBUG|SFManager.py:42] 2015-12-13 22:43:55,024 > ['eth0', '192.168.20.0/24', '00:0c:29:87:3c:6f', 'ingress']
[DEBUG|SFManager.py:41] 2015-12-13 22:43:55,024 > ['eth1']
[DEBUG|SFManager.py:41] 2015-12-13 22:43:55,024 > ['eth1', '10.0.0.0/24']
[DEBUG|SFManager.py:41] 2015-12-13 22:43:55,025 > ['eth1', '10.0.0.0/24', '4a:88:0b:1c:19:e0']
[DEBUG|SFManager.py:41] 2015-12-13 22:43:55,025 > ['eth1', '10.0.0.0/24', '4a:88:0b:1c:19:e0', 'egress']
[DEBUG|SFManager.py:42] 2015-12-13 22:43:55,025 > ['eth1', '10.0.0.0/24', '4a:88:0b:1c:19:e0', 'egress']
[DEBUG|SFManager.py:45] 2015-12-13 22:43:55,025 > [['eth0', '192.168.20.0/24', '00:0c:29:87:3c:6f', 'ingress'], ['eth1', '10.0.0.0/24', '4a:88:0b:1c:19:e0', 'egress']]
[INFO|SFManager.py:49] 2015-12-13 22:43:55,025 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:99] 2015-12-13 22:43:55,025 > The SF name is OK (test)
[DEBUG|SFManager.py:105] 2015-12-13 22:43:55,025 > The SF Type is OK(FW)
[DEBUG|SFManager.py:114] 2015-12-13 22:43:55,025 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:120] 2015-12-13 22:43:55,025 > The interfaces MAC is OK (4a:88:0b:1c:19:e0)
[DEBUG|SFManager.py:114] 2015-12-13 22:43:55,025 > The interfaces name is OK (eth0)
[DEBUG|SFManager.py:120] 2015-12-13 22:43:55,025 > The interfaces MAC is OK (00:0c:29:87:3c:6f)
[ERROR|SFManager.py:87] 2015-12-13 22:43:55,027 > already, the service function is exist
[INFO|SFManager.py:171] 2015-12-13 22:46:10,018 > delete the service function entrie
[INFO|SFManager.py:177] 2015-12-13 22:46:10,019 > 1 service entries are deleted
[DEBUG|SFManager.py:33] 2015-12-13 22:46:12,537 > args ['create-sf', 'eth0', '192.168.20.0/24', '00:0c:29:87:3c:6f', 'ingress', 'eth1', '10.0.0.0/24', '4a:88:0b:1c:19:e0', 'egress']
[DEBUG|SFManager.py:41] 2015-12-13 22:46:12,537 > ['eth0']
[DEBUG|SFManager.py:41] 2015-12-13 22:46:12,537 > ['eth0', '192.168.20.0/24']
[DEBUG|SFManager.py:41] 2015-12-13 22:46:12,538 > ['eth0', '192.168.20.0/24', '00:0c:29:87:3c:6f']
[DEBUG|SFManager.py:41] 2015-12-13 22:46:12,538 > ['eth0', '192.168.20.0/24', '00:0c:29:87:3c:6f', 'ingress']
[DEBUG|SFManager.py:42] 2015-12-13 22:46:12,538 > ['eth0', '192.168.20.0/24', '00:0c:29:87:3c:6f', 'ingress']
[DEBUG|SFManager.py:41] 2015-12-13 22:46:12,538 > ['eth1']
[DEBUG|SFManager.py:41] 2015-12-13 22:46:12,538 > ['eth1', '10.0.0.0/24']
[DEBUG|SFManager.py:41] 2015-12-13 22:46:12,538 > ['eth1', '10.0.0.0/24', '4a:88:0b:1c:19:e0']
[DEBUG|SFManager.py:41] 2015-12-13 22:46:12,538 > ['eth1', '10.0.0.0/24', '4a:88:0b:1c:19:e0', 'egress']
[DEBUG|SFManager.py:42] 2015-12-13 22:46:12,538 > ['eth1', '10.0.0.0/24', '4a:88:0b:1c:19:e0', 'egress']
[DEBUG|SFManager.py:45] 2015-12-13 22:46:12,538 > [['eth0', '192.168.20.0/24', '00:0c:29:87:3c:6f', 'ingress'], ['eth1', '10.0.0.0/24', '4a:88:0b:1c:19:e0', 'egress']]
[INFO|SFManager.py:49] 2015-12-13 22:46:12,538 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:99] 2015-12-13 22:46:12,539 > The SF name is OK (test)
[DEBUG|SFManager.py:105] 2015-12-13 22:46:12,539 > The SF Type is OK(FW)
[DEBUG|SFManager.py:114] 2015-12-13 22:46:12,539 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:120] 2015-12-13 22:46:12,539 > The interfaces MAC is OK (4a:88:0b:1c:19:e0)
[DEBUG|SFManager.py:114] 2015-12-13 22:46:12,539 > The interfaces name is OK (eth0)
[DEBUG|SFManager.py:120] 2015-12-13 22:46:12,539 > The interfaces MAC is OK (00:0c:29:87:3c:6f)
[DEBUG|SFManager.py:91] 2015-12-13 22:46:12,540 > {'interfaces': {'eth1': {'ip': '10.0.0.0/24', 'mac': '4a:88:0b:1c:19:e0', 'type': 'egress', 'name': 'eth1'}, 'eth0': {'ip': '192.168.20.0/24', 'mac': '00:0c:29:87:3c:6f', 'type': 'ingress', 'name': 'eth0'}}, '_id': ObjectId('566e65b41d41c8d5fcdae0a6'), 'type': 'FW', 'name': 'test'}
[INFO|SFManager.py:92] 2015-12-13 22:46:12,541 > The service function insertion is completed
[INFO|SFManager.py:176] 2015-12-13 22:48:28,602 > delete the service function entrie
[INFO|SFManager.py:182] 2015-12-13 22:48:28,604 > 1 service entries are deleted
[DEBUG|SFManager.py:33] 2015-12-13 22:48:30,857 > args ['create-sf', 'eth0', '192.168.20.0/24', '00:0c:29:87:3c:6f', 'ingress', 'eth1', '10.0.0.0/24', '4a:88:0b:1c:19:e0', 'egress']
[DEBUG|SFManager.py:41] 2015-12-13 22:48:30,857 > ['eth0']
[DEBUG|SFManager.py:41] 2015-12-13 22:48:30,858 > ['eth0', '192.168.20.0/24']
[DEBUG|SFManager.py:41] 2015-12-13 22:48:30,858 > ['eth0', '192.168.20.0/24', '00:0c:29:87:3c:6f']
[DEBUG|SFManager.py:41] 2015-12-13 22:48:30,858 > ['eth0', '192.168.20.0/24', '00:0c:29:87:3c:6f', 'ingress']
[DEBUG|SFManager.py:42] 2015-12-13 22:48:30,858 > ['eth0', '192.168.20.0/24', '00:0c:29:87:3c:6f', 'ingress']
[DEBUG|SFManager.py:41] 2015-12-13 22:48:30,858 > ['eth1']
[DEBUG|SFManager.py:41] 2015-12-13 22:48:30,858 > ['eth1', '10.0.0.0/24']
[DEBUG|SFManager.py:41] 2015-12-13 22:48:30,858 > ['eth1', '10.0.0.0/24', '4a:88:0b:1c:19:e0']
[DEBUG|SFManager.py:41] 2015-12-13 22:48:30,858 > ['eth1', '10.0.0.0/24', '4a:88:0b:1c:19:e0', 'egress']
[DEBUG|SFManager.py:42] 2015-12-13 22:48:30,858 > ['eth1', '10.0.0.0/24', '4a:88:0b:1c:19:e0', 'egress']
[DEBUG|SFManager.py:45] 2015-12-13 22:48:30,858 > [['eth0', '192.168.20.0/24', '00:0c:29:87:3c:6f', 'ingress'], ['eth1', '10.0.0.0/24', '4a:88:0b:1c:19:e0', 'egress']]
[INFO|SFManager.py:49] 2015-12-13 22:48:30,859 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:103] 2015-12-13 22:48:30,859 > The SF name is OK (test)
[DEBUG|SFManager.py:109] 2015-12-13 22:48:30,859 > The SF Type is OK(FW)
[DEBUG|SFManager.py:118] 2015-12-13 22:48:30,859 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:124] 2015-12-13 22:48:30,859 > The interfaces MAC is OK (4a:88:0b:1c:19:e0)
[DEBUG|SFManager.py:118] 2015-12-13 22:48:30,859 > The interfaces name is OK (eth0)
[DEBUG|SFManager.py:124] 2015-12-13 22:48:30,859 > The interfaces MAC is OK (00:0c:29:87:3c:6f)
[DEBUG|SFManager.py:95] 2015-12-13 22:48:30,861 > {'ip': '192.168.100.20', 'interfaces': {'eth1': {'ip': '10.0.0.0/24', 'mac': '4a:88:0b:1c:19:e0', 'type': 'egress', 'name': 'eth1'}, 'eth0': {'ip': '192.168.20.0/24', 'mac': '00:0c:29:87:3c:6f', 'type': 'ingress', 'name': 'eth0'}}, '_id': ObjectId('566e663e1d41c8d6a80e9cf3'), 'type': 'FW', 'name': 'test'}
[INFO|SFManager.py:96] 2015-12-13 22:48:30,861 > The service function insertion is completed
[INFO|SFManager.py:175] 2015-12-13 22:49:11,231 > delete the service function entrie
[INFO|SFManager.py:181] 2015-12-13 22:49:11,232 > 1 service entries are deleted
[DEBUG|SFManager.py:33] 2015-12-13 22:49:26,110 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 22:49:26,111 > []
[INFO|SFManager.py:49] 2015-12-13 22:49:26,111 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:103] 2015-12-13 22:49:26,111 > The SF name is OK (vFW)
[DEBUG|SFManager.py:109] 2015-12-13 22:49:26,111 > The SF Type is OK(Firewall)
[DEBUG|SFManager.py:118] 2015-12-13 22:49:26,111 > The interfaces name is OK (eth2)
[DEBUG|SFManager.py:124] 2015-12-13 22:49:26,111 > The interfaces MAC is OK (52:54:00:f8:4a:02)
[DEBUG|SFManager.py:118] 2015-12-13 22:49:26,112 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:124] 2015-12-13 22:49:26,112 > The interfaces MAC is OK (52:54:00:48:4e:8a)
[DEBUG|SFManager.py:95] 2015-12-13 22:49:26,113 > {u'ip': u'0.0.0.0', u'interfaces': {u'eth2': {u'ip': u'192.168.10.1', u'mac': u'52:54:00:f8:4a:02', u'type': u'egress', u'name': u'eth2'}, u'eth1': {u'ip': u'10.0.10.1', u'mac': u'52:54:00:48:4e:8a', u'type': u'ingress', u'name': u'eth1'}}, '_id': ObjectId('566e66761d41c8d6eb2945b3'), u'type': u'Firewall', u'name': u'vFW'}
[INFO|SFManager.py:96] 2015-12-13 22:49:26,113 > The service function insertion is completed
[DEBUG|SFManager.py:33] 2015-12-13 22:49:28,462 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 22:49:28,462 > []
[INFO|SFManager.py:49] 2015-12-13 22:49:28,462 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:103] 2015-12-13 22:49:28,463 > The SF name is OK (vDPI)
[DEBUG|SFManager.py:109] 2015-12-13 22:49:28,463 > The SF Type is OK(DPI)
[DEBUG|SFManager.py:118] 2015-12-13 22:49:28,463 > The interfaces name is OK (eth2)
[DEBUG|SFManager.py:124] 2015-12-13 22:49:28,463 > The interfaces MAC is OK (52:54:00:60:f7:82)
[DEBUG|SFManager.py:118] 2015-12-13 22:49:28,463 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:124] 2015-12-13 22:49:28,463 > The interfaces MAC is OK (52:54:00:6d:96:e9)
[DEBUG|SFManager.py:95] 2015-12-13 22:49:28,465 > {u'ip': u'0.0.0.0', u'interfaces': {u'eth2': {u'ip': u'192.168.10.2', u'mac': u'52:54:00:60:f7:82', u'type': u'egress', u'name': u'eth2'}, u'eth1': {u'ip': u'10.0.10.2', u'mac': u'52:54:00:6d:96:e9', u'type': u'ingress', u'name': u'eth1'}}, '_id': ObjectId('566e66781d41c8d6f4e21f83'), u'type': u'DPI', u'name': u'vDPI'}
[INFO|SFManager.py:96] 2015-12-13 22:49:28,465 > The service function insertion is completed
[DEBUG|SFManager.py:33] 2015-12-13 22:49:30,523 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 22:49:30,523 > []
[INFO|SFManager.py:49] 2015-12-13 22:49:30,523 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:103] 2015-12-13 22:49:30,524 > The SF name is OK (Endian)
[DEBUG|SFManager.py:109] 2015-12-13 22:49:30,524 > The SF Type is OK(UTM)
[DEBUG|SFManager.py:118] 2015-12-13 22:49:30,524 > The interfaces name is OK (eth2)
[DEBUG|SFManager.py:124] 2015-12-13 22:49:30,524 > The interfaces MAC is OK (52:54:00:63:6f:85)
[DEBUG|SFManager.py:118] 2015-12-13 22:49:30,524 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:124] 2015-12-13 22:49:30,524 > The interfaces MAC is OK (52:54:00:37:a6:2d)
[DEBUG|SFManager.py:95] 2015-12-13 22:49:30,526 > {u'ip': u'0.0.0.0', u'interfaces': {u'eth2': {u'ip': u'192.168.0.30', u'mac': u'52:54:00:63:6f:85', u'type': u'egress', u'name': u'eth2'}, u'eth1': {u'ip': u'', u'mac': u'52:54:00:37:a6:2d', u'type': u'ingress', u'name': u'eth1'}}, '_id': ObjectId('566e667a1d41c8d6fc77a622'), u'type': u'UTM', u'name': u'Endian'}
[INFO|SFManager.py:96] 2015-12-13 22:49:30,526 > The service function insertion is completed
[DEBUG|SFManager.py:33] 2015-12-13 22:49:33,109 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 22:49:33,110 > []
[INFO|SFManager.py:49] 2015-12-13 22:49:33,110 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:103] 2015-12-13 22:49:33,110 > The SF name is OK (Endian A)
[DEBUG|SFManager.py:109] 2015-12-13 22:49:33,110 > The SF Type is OK(UTM)
[DEBUG|SFManager.py:118] 2015-12-13 22:49:33,110 > The interfaces name is OK (eth2)
[DEBUG|SFManager.py:124] 2015-12-13 22:49:33,110 > The interfaces MAC is OK (52:54:00:B0:29:68)
[DEBUG|SFManager.py:118] 2015-12-13 22:49:33,110 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:124] 2015-12-13 22:49:33,110 > The interfaces MAC is OK (52:54:00:E9:4F:B9)
[DEBUG|SFManager.py:95] 2015-12-13 22:49:33,112 > {u'ip': u'0.0.0.0', u'interfaces': {u'eth2': {u'ip': u'', u'mac': u'52:54:00:B0:29:68', u'type': u'egress', u'name': u'eth2'}, u'eth1': {u'ip': u'', u'mac': u'52:54:00:E9:4F:B9', u'type': u'ingress', u'name': u'eth1'}}, '_id': ObjectId('566e667d1d41c8d706d82058'), u'type': u'UTM', u'name': u'Endian A'}
[INFO|SFManager.py:96] 2015-12-13 22:49:33,112 > The service function insertion is completed
[DEBUG|SFManager.py:33] 2015-12-13 22:49:35,764 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-13 22:49:35,764 > []
[INFO|SFManager.py:49] 2015-12-13 22:49:35,764 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:103] 2015-12-13 22:49:35,764 > The SF name is OK (Endian B)
[DEBUG|SFManager.py:109] 2015-12-13 22:49:35,764 > The SF Type is OK(UTM)
[DEBUG|SFManager.py:118] 2015-12-13 22:49:35,764 > The interfaces name is OK (eth2)
[DEBUG|SFManager.py:124] 2015-12-13 22:49:35,765 > The interfaces MAC is OK (52:54:00:13:1E:D7)
[DEBUG|SFManager.py:118] 2015-12-13 22:49:35,765 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:124] 2015-12-13 22:49:35,765 > The interfaces MAC is OK (52:54:00:7C:A8:50)
[DEBUG|SFManager.py:95] 2015-12-13 22:49:35,766 > {u'ip': u'0.0.0.0', u'interfaces': {u'eth2': {u'ip': u'', u'mac': u'52:54:00:13:1E:D7', u'type': u'egress', u'name': u'eth2'}, u'eth1': {u'ip': u'', u'mac': u'52:54:00:7C:A8:50', u'type': u'ingress', u'name': u'eth1'}}, '_id': ObjectId('566e667f1d41c8d70d547d7f'), u'type': u'UTM', u'name': u'Endian B'}
[INFO|SFManager.py:96] 2015-12-13 22:49:35,766 > The service function insertion is completed
[DEBUG|SFManager.py:33] 2015-12-13 22:49:49,833 > args ['create-sff', 'endian A', '10', '2']
[DEBUG|SFManager.py:45] 2015-12-13 22:49:49,834 > []
[INFO|SFFManager.py:69] 2015-12-13 22:49:49,834 > Create a service function forwarder
[DEBUG|SFManager.py:33] 2015-12-13 22:50:18,320 > args ['create-sff', 'endian A', '10', '2']
[DEBUG|SFManager.py:45] 2015-12-13 22:50:18,321 > []
[INFO|SFFManager.py:69] 2015-12-13 22:50:18,321 > Create a service function forwarder
[DEBUG|SFManager.py:33] 2015-12-13 22:51:29,354 > args ['create-sff', 'endian A', '10', '2']
[DEBUG|SFManager.py:45] 2015-12-13 22:51:29,354 > []
[INFO|SFFManager.py:69] 2015-12-13 22:51:29,354 > Create a service function forwarder
[DEBUG|SFManager.py:33] 2015-12-13 22:52:05,885 > args ['create-sff', 'endian A', '10', '2']
[DEBUG|SFManager.py:45] 2015-12-13 22:52:05,885 > []
[INFO|SFFManager.py:69] 2015-12-13 22:52:05,885 > Create a service function forwarder
[DEBUG|SFManager.py:33] 2015-12-13 23:08:22,534 > args ['create-sff', 'endian A', '10', '2']
[DEBUG|SFManager.py:45] 2015-12-13 23:08:22,535 > []
[INFO|SFFManager.py:70] 2015-12-13 23:08:22,535 > Create a service function forwarder
[DEBUG|SFManager.py:33] 2015-12-13 23:08:55,417 > args ['create-sff', 'endian A', '10', '2']
[DEBUG|SFManager.py:41] 2015-12-13 23:08:55,418 > ['endian A']
[DEBUG|SFManager.py:41] 2015-12-13 23:08:55,418 > ['endian A', '10']
[DEBUG|SFManager.py:41] 2015-12-13 23:08:55,418 > ['endian A', '10', '2']
[DEBUG|SFManager.py:42] 2015-12-13 23:08:55,418 > ['endian A', '10', '2']
[DEBUG|SFManager.py:45] 2015-12-13 23:08:55,418 > [['endian A', '10', '2']]
[INFO|SFFManager.py:70] 2015-12-13 23:08:55,418 > Create a service function forwarder
[DEBUG|SFManager.py:33] 2015-12-13 23:09:05,591 > args ['create-sff', 'endian A', '10', '2']
[DEBUG|SFManager.py:41] 2015-12-13 23:09:05,592 > ['endian A']
[DEBUG|SFManager.py:41] 2015-12-13 23:09:05,592 > ['endian A', '10']
[DEBUG|SFManager.py:41] 2015-12-13 23:09:05,592 > ['endian A', '10', '2']
[DEBUG|SFManager.py:42] 2015-12-13 23:09:05,592 > ['endian A', '10', '2']
[DEBUG|SFManager.py:45] 2015-12-13 23:09:05,592 > [['endian A', '10', '2']]
[INFO|SFFManager.py:70] 2015-12-13 23:09:05,592 > Create a service function forwarder
[DEBUG|SFManager.py:33] 2015-12-13 23:11:41,812 > args ['create-sff', 'endian A', '10', '2']
[DEBUG|SFManager.py:41] 2015-12-13 23:11:41,813 > ['endian A']
[DEBUG|SFManager.py:41] 2015-12-13 23:11:41,813 > ['endian A', '10']
[DEBUG|SFManager.py:41] 2015-12-13 23:11:41,813 > ['endian A', '10', '2']
[DEBUG|SFManager.py:42] 2015-12-13 23:11:41,813 > ['endian A', '10', '2']
[DEBUG|SFManager.py:45] 2015-12-13 23:11:41,813 > [['endian A', '10', '2']]
[INFO|SFFManager.py:54] 2015-12-13 23:11:41,813 > Create a service function forwarder
[ERROR|SFFManager.py:92] 2015-12-13 23:11:41,814 > already, the service function is exist
[DEBUG|SFManager.py:33] 2015-12-13 23:13:24,806 > args ['create-sff', 'scenario1/2.create_sff_1.json']
[DEBUG|SFManager.py:45] 2015-12-13 23:13:24,807 > []
[INFO|SFFManager.py:54] 2015-12-13 23:13:24,807 > Create a service function forwarder
[ERROR|SFFManager.py:61] 2015-12-13 23:13:24,807 > please input the name of the service function forwarder with -n or --name option
[ERROR|SFFManager.py:64] 2015-12-13 23:13:24,807 > please input the dpid of the service function forwarder(e.g., 00:00:e4:11:5b:12:89:7e with -d or --dpid option
[ERROR|SFFManager.py:67] 2015-12-13 23:13:24,807 > please input the type of the service function forwarder(e.g., general, DASAN with -t or --type option
[DEBUG|SFFManager.py:97] 2015-12-13 23:13:24,809 > {'_id': ObjectId('566e6c141d41c8daf8a066bc'), 'connected_sf': {}, 'type': None, 'name': None, 'dpid': None}
[INFO|SFFManager.py:98] 2015-12-13 23:13:24,809 > The service function creation is completed
[DEBUG|SFManager.py:33] 2015-12-13 23:13:30,712 > args ['create-sff', 'scenario1/2.create_sff_2.json']
[DEBUG|SFManager.py:45] 2015-12-13 23:13:30,712 > []
[INFO|SFFManager.py:54] 2015-12-13 23:13:30,712 > Create a service function forwarder
[ERROR|SFFManager.py:61] 2015-12-13 23:13:30,712 > please input the name of the service function forwarder with -n or --name option
[ERROR|SFFManager.py:64] 2015-12-13 23:13:30,712 > please input the dpid of the service function forwarder(e.g., 00:00:e4:11:5b:12:89:7e with -d or --dpid option
[ERROR|SFFManager.py:67] 2015-12-13 23:13:30,712 > please input the type of the service function forwarder(e.g., general, DASAN with -t or --type option
[ERROR|SFFManager.py:92] 2015-12-13 23:13:30,714 > already, the service function is exist
[DEBUG|SFManager.py:33] 2015-12-13 23:14:16,470 > args ['create-sff']
[DEBUG|SFManager.py:45] 2015-12-13 23:14:16,471 > []
[INFO|SFFManager.py:54] 2015-12-13 23:14:16,471 > Create a service function forwarder
[DEBUG|SFFManager.py:97] 2015-12-13 23:14:16,473 > {'_id': ObjectId('566e6c481d41c8db1f22f154'), u'connected_sf': {u'vFW': {u'egress_port': u'2', u'name': u'vFW', u'ingress_port': u'1'}, u'vDPI': {u'egress_port': u'5', u'name': u'vDPI', u'ingress_port': u'4'}, u'Endian': {u'egress_port': u'14', u'name': u'Endian', u'ingress_port': u'13'}}, u'type': u'general', u'name': u'OpenvSwitch A', u'dpid': u'00:00:00:0c:29:57:3d:a4'}
[INFO|SFFManager.py:98] 2015-12-13 23:14:16,473 > The service function creation is completed
[DEBUG|SFManager.py:33] 2015-12-13 23:20:12,085 > args ['create-sff', 'scenario1/2.create_sff_1.json']
[DEBUG|SFManager.py:45] 2015-12-13 23:20:12,086 > []
[INFO|SFFManager.py:54] 2015-12-13 23:20:12,086 > Create a service function forwarder
[ERROR|SFFManager.py:61] 2015-12-13 23:20:12,086 > please input the name of the service function forwarder with -n or --name option
[ERROR|SFFManager.py:64] 2015-12-13 23:20:12,086 > please input the dpid of the service function forwarder(e.g., 00:00:e4:11:5b:12:89:7e with -d or --dpid option
[ERROR|SFFManager.py:67] 2015-12-13 23:20:12,086 > please input the type of the service function forwarder(e.g., general, DASAN with -t or --type option
[INFO|SFFManager.py:102] 2015-12-13 23:20:12,086 > validate service_function_forwarder_enty
[DEBUG|SFFManager.py:105] 2015-12-13 23:20:12,086 > SFF name is OK
[ERROR|SFFManager.py:113] 2015-12-13 23:20:12,087 > SFF name is wrong (None)
[DEBUG|SFManager.py:33] 2015-12-13 23:20:34,889 > args ['create-sff', 'scenario1/2.create_sff_1.json']
[DEBUG|SFManager.py:45] 2015-12-13 23:20:34,889 > []
[INFO|SFFManager.py:54] 2015-12-13 23:20:34,890 > Create a service function forwarder
[ERROR|SFFManager.py:61] 2015-12-13 23:20:34,890 > please input the name of the service function forwarder with -n or --name option
[ERROR|SFFManager.py:64] 2015-12-13 23:20:34,890 > please input the dpid of the service function forwarder(e.g., 00:00:e4:11:5b:12:89:7e with -d or --dpid option
[ERROR|SFFManager.py:67] 2015-12-13 23:20:34,890 > please input the type of the service function forwarder(e.g., general, DASAN with -t or --type option
[INFO|SFFManager.py:102] 2015-12-13 23:20:34,890 > validate service_function_forwarder_enty
[DEBUG|SFFManager.py:105] 2015-12-13 23:20:34,890 > SFF name is OK
[ERROR|SFFManager.py:113] 2015-12-13 23:20:34,890 > SFF type is wrong (None)
[DEBUG|SFManager.py:33] 2015-12-13 23:20:51,486 > args ['create-sff', 'scenario1/2.create_sff_1.json']
[DEBUG|SFManager.py:45] 2015-12-13 23:20:51,487 > []
[INFO|SFFManager.py:54] 2015-12-13 23:20:51,487 > Create a service function forwarder
[ERROR|SFFManager.py:61] 2015-12-13 23:20:51,487 > please input the name of the service function forwarder with -n or --name option
[ERROR|SFFManager.py:64] 2015-12-13 23:20:51,487 > please input the dpid of the service function forwarder(e.g., 00:00:e4:11:5b:12:89:7e with -d or --dpid option
[ERROR|SFFManager.py:67] 2015-12-13 23:20:51,487 > please input the type of the service function forwarder(e.g., general, DASAN with -t or --type option
[INFO|SFFManager.py:102] 2015-12-13 23:20:51,487 > validate service_function_forwarder_enty
[DEBUG|SFFManager.py:105] 2015-12-13 23:20:51,487 > SFF name is OK
[ERROR|SFFManager.py:113] 2015-12-13 23:20:51,487 > SFF type is wrong (None)
[DEBUG|SFManager.py:33] 2015-12-13 23:21:16,248 > args ['create-sff']
[DEBUG|SFManager.py:45] 2015-12-13 23:21:16,248 > []
[INFO|SFFManager.py:54] 2015-12-13 23:21:16,248 > Create a service function forwarder
[INFO|SFFManager.py:102] 2015-12-13 23:21:16,248 > validate service_function_forwarder_enty
[DEBUG|SFFManager.py:105] 2015-12-13 23:21:16,248 > SFF name is OK
[DEBUG|SFFManager.py:111] 2015-12-13 23:21:16,248 > SFF type is OK
[DEBUG|SFFManager.py:117] 2015-12-13 23:21:16,249 > SFF dpid is OK(00:00:00:0c:29:57:3d:a4)
[DEBUG|SFFManager.py:125] 2015-12-13 23:21:16,249 > connected_sf's name is OK (vFW)
[DEBUG|SFFManager.py:131] 2015-12-13 23:21:16,249 > connected_sf's ingress_port is OK (1)
[DEBUG|SFFManager.py:137] 2015-12-13 23:21:16,249 > connected_sf's egress_port is OK (2)
[DEBUG|SFFManager.py:125] 2015-12-13 23:21:16,249 > connected_sf's name is OK (vDPI)
[DEBUG|SFFManager.py:131] 2015-12-13 23:21:16,249 > connected_sf's ingress_port is OK (4)
[DEBUG|SFFManager.py:137] 2015-12-13 23:21:16,249 > connected_sf's egress_port is OK (5)
[DEBUG|SFFManager.py:125] 2015-12-13 23:21:16,249 > connected_sf's name is OK (Endian)
[DEBUG|SFFManager.py:131] 2015-12-13 23:21:16,249 > connected_sf's ingress_port is OK (13)
[DEBUG|SFFManager.py:137] 2015-12-13 23:21:16,249 > connected_sf's egress_port is OK (14)
[ERROR|SFFManager.py:92] 2015-12-13 23:21:16,250 > already, the service function is exist
[DEBUG|SFManager.py:33] 2015-12-13 23:21:44,728 > args ['create-sff']
[DEBUG|SFManager.py:45] 2015-12-13 23:21:44,728 > []
[INFO|SFFManager.py:54] 2015-12-13 23:21:44,728 > Create a service function forwarder
[INFO|SFFManager.py:102] 2015-12-13 23:21:44,728 > validate service_function_forwarder_enty
[DEBUG|SFFManager.py:105] 2015-12-13 23:21:44,728 > SFF name is OK
[DEBUG|SFFManager.py:111] 2015-12-13 23:21:44,728 > SFF type is OK
[DEBUG|SFFManager.py:117] 2015-12-13 23:21:44,728 > SFF dpid is OK(00:00:00:0c:29:57:3d:a4)
[DEBUG|SFFManager.py:125] 2015-12-13 23:21:44,728 > connected_sf's name is OK (vFW)
[DEBUG|SFFManager.py:131] 2015-12-13 23:21:44,728 > connected_sf's ingress_port is OK (1)
[DEBUG|SFFManager.py:137] 2015-12-13 23:21:44,729 > connected_sf's egress_port is OK (2)
[DEBUG|SFFManager.py:125] 2015-12-13 23:21:44,729 > connected_sf's name is OK (vDPI)
[DEBUG|SFFManager.py:131] 2015-12-13 23:21:44,729 > connected_sf's ingress_port is OK (4)
[DEBUG|SFFManager.py:137] 2015-12-13 23:21:44,729 > connected_sf's egress_port is OK (5)
[DEBUG|SFFManager.py:125] 2015-12-13 23:21:44,729 > connected_sf's name is OK (Endian)
[DEBUG|SFFManager.py:131] 2015-12-13 23:21:44,729 > connected_sf's ingress_port is OK (13)
[DEBUG|SFFManager.py:137] 2015-12-13 23:21:44,729 > connected_sf's egress_port is OK (14)
[DEBUG|SFFManager.py:97] 2015-12-13 23:21:44,731 > {'_id': ObjectId('566e6e081d41c8dd636c0d31'), u'connected_sf': {u'vFW': {u'egress_port': u'2', u'name': u'vFW', u'ingress_port': u'1'}, u'vDPI': {u'egress_port': u'5', u'name': u'vDPI', u'ingress_port': u'4'}, u'Endian': {u'egress_port': u'14', u'name': u'Endian', u'ingress_port': u'13'}}, u'type': u'general', u'name': u'OpenvSwitch A', u'dpid': u'00:00:00:0c:29:57:3d:a4'}
[INFO|SFFManager.py:98] 2015-12-13 23:21:44,731 > The service function creation is completed
[DEBUG|SFManager.py:33] 2015-12-13 23:21:48,397 > args ['create-sff']
[DEBUG|SFManager.py:45] 2015-12-13 23:21:48,397 > []
[INFO|SFFManager.py:54] 2015-12-13 23:21:48,397 > Create a service function forwarder
[INFO|SFFManager.py:102] 2015-12-13 23:21:48,397 > validate service_function_forwarder_enty
[DEBUG|SFFManager.py:105] 2015-12-13 23:21:48,397 > SFF name is OK
[DEBUG|SFFManager.py:111] 2015-12-13 23:21:48,397 > SFF type is OK
[DEBUG|SFFManager.py:117] 2015-12-13 23:21:48,398 > SFF dpid is OK(00:00:e4:11:5b:12:89:7e)
[DEBUG|SFFManager.py:125] 2015-12-13 23:21:48,398 > connected_sf's name is OK (Endian A)
[DEBUG|SFFManager.py:131] 2015-12-13 23:21:48,398 > connected_sf's ingress_port is OK (9)
[DEBUG|SFFManager.py:137] 2015-12-13 23:21:48,398 > connected_sf's egress_port is OK (10)
[DEBUG|SFFManager.py:125] 2015-12-13 23:21:48,398 > connected_sf's name is OK (Endian B)
[DEBUG|SFFManager.py:131] 2015-12-13 23:21:48,398 > connected_sf's ingress_port is OK (7)
[DEBUG|SFFManager.py:137] 2015-12-13 23:21:48,398 > connected_sf's egress_port is OK (8)
[DEBUG|SFFManager.py:97] 2015-12-13 23:21:48,399 > {'_id': ObjectId('566e6e0c1d41c8dd6c2f4438'), u'connected_sf': {u'Endian A': {u'egress_port': u'10', u'name': u'Endian A', u'ingress_port': u'9'}, u'Endian B': {u'egress_port': u'8', u'name': u'Endian B', u'ingress_port': u'7'}}, u'type': u'general', u'name': u'OpenvSwitch B', u'dpid': u'00:00:e4:11:5b:12:89:7e'}
[INFO|SFFManager.py:98] 2015-12-13 23:21:48,400 > The service function creation is completed
[DEBUG|SFManager.py:33] 2015-12-13 23:21:51,357 > args ['create-sff']
[DEBUG|SFManager.py:45] 2015-12-13 23:21:51,358 > []
[INFO|SFFManager.py:54] 2015-12-13 23:21:51,358 > Create a service function forwarder
[INFO|SFFManager.py:102] 2015-12-13 23:21:51,358 > validate service_function_forwarder_enty
[DEBUG|SFFManager.py:105] 2015-12-13 23:21:51,358 > SFF name is OK
[DEBUG|SFFManager.py:111] 2015-12-13 23:21:51,358 > SFF type is OK
[DEBUG|SFFManager.py:117] 2015-12-13 23:21:51,358 > SFF dpid is OK(00:00:00:00:00:00:00:01)
[DEBUG|SFFManager.py:97] 2015-12-13 23:21:51,359 > {'_id': ObjectId('566e6e0f1d41c8dd73aa9202'), u'connected_sf': {}, u'type': u'DASAN', u'name': u'DASAN A', u'dpid': u'00:00:00:00:00:00:00:01'}
[INFO|SFFManager.py:98] 2015-12-13 23:21:51,360 > The service function creation is completed
[INFO|EPManager.py:55] 2015-12-15 02:27:42,590 > Create a service function forwarder
[INFO|EPManager.py:95] 2015-12-15 02:27:42,649 > validate service_function_forwarder_enty
[DEBUG|EPManager.py:98] 2015-12-15 02:27:42,649 > EP name is OK
[DEBUG|EPManager.py:104] 2015-12-15 02:27:42,649 > EP dpid is OK
[DEBUG|EPManager.py:110] 2015-12-15 02:27:42,649 > EP dpid is OK
[DEBUG|EPManager.py:90] 2015-12-15 02:27:42,713 > {'attached_switch': {'attached_port': '1', 'dpid': '101'}, 'vlan': 0, 'name': 'testing', '_id': ObjectId('566feb1e1d41c87f6f71c3a4')}
[INFO|EPManager.py:91] 2015-12-15 02:27:42,713 > the end point is completed
[INFO|EPManager.py:55] 2015-12-15 02:29:08,376 > Create a service function forwarder
[INFO|EPManager.py:95] 2015-12-15 02:29:08,376 > validate service_function_forwarder_enty
[DEBUG|EPManager.py:98] 2015-12-15 02:29:08,376 > EP name is OK
[DEBUG|EPManager.py:104] 2015-12-15 02:29:08,376 > EP dpid is OK
[DEBUG|EPManager.py:110] 2015-12-15 02:29:08,377 > EP dpid is OK
[DEBUG|EPManager.py:90] 2015-12-15 02:29:08,380 > {'attached_switch': {'attached_port': '1', 'dpid': '101'}, 'vlan': 0, 'name': 'testing', '_id': ObjectId('566feb741d41c87fef0377e2')}
[INFO|EPManager.py:91] 2015-12-15 02:29:08,381 > the end point is completed
[INFO|EPManager.py:162] 2015-12-15 02:30:30,030 > delete the end point entrie
[INFO|EPManager.py:169] 2015-12-15 02:30:30,032 > 1 end point entries are deleted
[INFO|SFFManager.py:186] 2015-12-15 02:31:53,961 > delete the service function entrie
[INFO|SFFManager.py:193] 2015-12-15 02:31:53,962 > 4 service entries are deleted
[DEBUG|SFFManager.py:35] 2015-12-15 02:32:03,854 > args ['create-sff', 'scenario1/2.create_sff_1.json']
[DEBUG|SFFManager.py:48] 2015-12-15 02:32:03,855 > []
[INFO|SFFManager.py:54] 2015-12-15 02:32:03,855 > Create a service function forwarder
[ERROR|SFFManager.py:61] 2015-12-15 02:32:03,855 > please input the name of the service function forwarder with -n or --name option
[ERROR|SFFManager.py:64] 2015-12-15 02:32:03,855 > please input the dpid of the service function forwarder(e.g., 00:00:e4:11:5b:12:89:7e with -d or --dpid option
[ERROR|SFFManager.py:67] 2015-12-15 02:32:03,855 > please input the type of the service function forwarder(e.g., general, DASAN with -t or --type option
[INFO|SFFManager.py:101] 2015-12-15 02:32:03,855 > validate service_function_forwarder_enty
[DEBUG|SFFManager.py:104] 2015-12-15 02:32:03,855 > SFF name is OK
[ERROR|SFFManager.py:112] 2015-12-15 02:32:03,856 > SFF type is wrong (None)
[DEBUG|SFFManager.py:35] 2015-12-15 02:32:19,866 > args ['create-sff', 'scenario1/2.create_sff_2.json']
[DEBUG|SFFManager.py:48] 2015-12-15 02:32:19,867 > []
[INFO|SFFManager.py:54] 2015-12-15 02:32:19,867 > Create a service function forwarder
[ERROR|SFFManager.py:61] 2015-12-15 02:32:19,867 > please input the name of the service function forwarder with -n or --name option
[ERROR|SFFManager.py:64] 2015-12-15 02:32:19,867 > please input the dpid of the service function forwarder(e.g., 00:00:e4:11:5b:12:89:7e with -d or --dpid option
[ERROR|SFFManager.py:67] 2015-12-15 02:32:19,867 > please input the type of the service function forwarder(e.g., general, DASAN with -t or --type option
[INFO|SFFManager.py:101] 2015-12-15 02:32:19,867 > validate service_function_forwarder_enty
[DEBUG|SFFManager.py:104] 2015-12-15 02:32:19,868 > SFF name is OK
[ERROR|SFFManager.py:112] 2015-12-15 02:32:19,868 > SFF type is wrong (None)
[DEBUG|SFFManager.py:35] 2015-12-15 02:32:41,200 > args ['create-sff', 'scenario1/2.create_sff_2.json~']
[DEBUG|SFFManager.py:48] 2015-12-15 02:32:41,200 > []
[INFO|SFFManager.py:54] 2015-12-15 02:32:41,200 > Create a service function forwarder
[ERROR|SFFManager.py:61] 2015-12-15 02:32:41,200 > please input the name of the service function forwarder with -n or --name option
[ERROR|SFFManager.py:64] 2015-12-15 02:32:41,200 > please input the dpid of the service function forwarder(e.g., 00:00:e4:11:5b:12:89:7e with -d or --dpid option
[ERROR|SFFManager.py:67] 2015-12-15 02:32:41,200 > please input the type of the service function forwarder(e.g., general, DASAN with -t or --type option
[INFO|SFFManager.py:101] 2015-12-15 02:32:41,201 > validate service_function_forwarder_enty
[DEBUG|SFFManager.py:104] 2015-12-15 02:32:41,201 > SFF name is OK
[ERROR|SFFManager.py:112] 2015-12-15 02:32:41,201 > SFF type is wrong (None)
[INFO|SFManager.py:175] 2015-12-15 02:33:08,514 > delete the service function entrie
[INFO|SFManager.py:181] 2015-12-15 02:33:08,549 > 5 service entries are deleted
[DEBUG|SFManager.py:33] 2015-12-15 02:33:24,532 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-15 02:33:24,532 > []
[INFO|SFManager.py:49] 2015-12-15 02:33:24,532 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:103] 2015-12-15 02:33:24,532 > The SF name is OK (vFW)
[DEBUG|SFManager.py:109] 2015-12-15 02:33:24,532 > The SF Type is OK(Firewall)
[DEBUG|SFManager.py:118] 2015-12-15 02:33:24,533 > The interfaces name is OK (eth2)
[DEBUG|SFManager.py:124] 2015-12-15 02:33:24,533 > The interfaces MAC is OK (52:54:00:f8:4a:02)
[DEBUG|SFManager.py:118] 2015-12-15 02:33:24,533 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:124] 2015-12-15 02:33:24,533 > The interfaces MAC is OK (52:54:00:48:4e:8a)
[DEBUG|SFManager.py:95] 2015-12-15 02:33:24,534 > {u'ip': u'0.0.0.0', u'interfaces': {u'eth2': {u'ip': u'192.168.10.1', u'mac': u'52:54:00:f8:4a:02', u'type': u'egress', u'name': u'eth2'}, u'eth1': {u'ip': u'10.0.10.1', u'mac': u'52:54:00:48:4e:8a', u'type': u'ingress', u'name': u'eth1'}}, '_id': ObjectId('566fec741d41c8810582040e'), u'type': u'Firewall', u'name': u'vFW'}
[INFO|SFManager.py:96] 2015-12-15 02:33:24,535 > The service function insertion is completed
[DEBUG|SFManager.py:33] 2015-12-15 02:33:26,892 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-15 02:33:26,892 > []
[INFO|SFManager.py:49] 2015-12-15 02:33:26,893 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:103] 2015-12-15 02:33:26,893 > The SF name is OK (vDPI)
[DEBUG|SFManager.py:109] 2015-12-15 02:33:26,893 > The SF Type is OK(DPI)
[DEBUG|SFManager.py:118] 2015-12-15 02:33:26,893 > The interfaces name is OK (eth2)
[DEBUG|SFManager.py:124] 2015-12-15 02:33:26,893 > The interfaces MAC is OK (52:54:00:60:f7:82)
[DEBUG|SFManager.py:118] 2015-12-15 02:33:26,893 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:124] 2015-12-15 02:33:26,894 > The interfaces MAC is OK (52:54:00:6d:96:e9)
[DEBUG|SFManager.py:95] 2015-12-15 02:33:26,897 > {u'ip': u'0.0.0.0', u'interfaces': {u'eth2': {u'ip': u'192.168.10.2', u'mac': u'52:54:00:60:f7:82', u'type': u'egress', u'name': u'eth2'}, u'eth1': {u'ip': u'10.0.10.2', u'mac': u'52:54:00:6d:96:e9', u'type': u'ingress', u'name': u'eth1'}}, '_id': ObjectId('566fec761d41c8810e47cf05'), u'type': u'DPI', u'name': u'vDPI'}
[INFO|SFManager.py:96] 2015-12-15 02:33:26,897 > The service function insertion is completed
[DEBUG|SFManager.py:33] 2015-12-15 02:33:29,396 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-15 02:33:29,396 > []
[INFO|SFManager.py:49] 2015-12-15 02:33:29,396 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:103] 2015-12-15 02:33:29,397 > The SF name is OK (Endian)
[DEBUG|SFManager.py:109] 2015-12-15 02:33:29,397 > The SF Type is OK(UTM)
[DEBUG|SFManager.py:118] 2015-12-15 02:33:29,397 > The interfaces name is OK (eth2)
[DEBUG|SFManager.py:124] 2015-12-15 02:33:29,397 > The interfaces MAC is OK (52:54:00:63:6f:85)
[DEBUG|SFManager.py:118] 2015-12-15 02:33:29,397 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:124] 2015-12-15 02:33:29,398 > The interfaces MAC is OK (52:54:00:37:a6:2d)
[DEBUG|SFManager.py:95] 2015-12-15 02:33:29,399 > {u'ip': u'0.0.0.0', u'interfaces': {u'eth2': {u'ip': u'192.168.0.30', u'mac': u'52:54:00:63:6f:85', u'type': u'egress', u'name': u'eth2'}, u'eth1': {u'ip': u'', u'mac': u'52:54:00:37:a6:2d', u'type': u'ingress', u'name': u'eth1'}}, '_id': ObjectId('566fec791d41c881155dca8a'), u'type': u'UTM', u'name': u'Endian'}
[INFO|SFManager.py:96] 2015-12-15 02:33:29,399 > The service function insertion is completed
[DEBUG|SFManager.py:33] 2015-12-15 02:33:31,735 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-15 02:33:31,735 > []
[INFO|SFManager.py:49] 2015-12-15 02:33:31,735 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:103] 2015-12-15 02:33:31,735 > The SF name is OK (Endian A)
[DEBUG|SFManager.py:109] 2015-12-15 02:33:31,736 > The SF Type is OK(UTM)
[DEBUG|SFManager.py:118] 2015-12-15 02:33:31,736 > The interfaces name is OK (eth2)
[DEBUG|SFManager.py:124] 2015-12-15 02:33:31,736 > The interfaces MAC is OK (52:54:00:B0:29:68)
[DEBUG|SFManager.py:118] 2015-12-15 02:33:31,736 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:124] 2015-12-15 02:33:31,736 > The interfaces MAC is OK (52:54:00:E9:4F:B9)
[DEBUG|SFManager.py:95] 2015-12-15 02:33:31,738 > {u'ip': u'0.0.0.0', u'interfaces': {u'eth2': {u'ip': u'', u'mac': u'52:54:00:B0:29:68', u'type': u'egress', u'name': u'eth2'}, u'eth1': {u'ip': u'', u'mac': u'52:54:00:E9:4F:B9', u'type': u'ingress', u'name': u'eth1'}}, '_id': ObjectId('566fec7b1d41c8811e9a1401'), u'type': u'UTM', u'name': u'Endian A'}
[INFO|SFManager.py:96] 2015-12-15 02:33:31,738 > The service function insertion is completed
[DEBUG|SFManager.py:33] 2015-12-15 02:33:34,408 > args ['create-sf']
[DEBUG|SFManager.py:45] 2015-12-15 02:33:34,408 > []
[INFO|SFManager.py:49] 2015-12-15 02:33:34,408 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:103] 2015-12-15 02:33:34,409 > The SF name is OK (Endian B)
[DEBUG|SFManager.py:109] 2015-12-15 02:33:34,409 > The SF Type is OK(UTM)
[DEBUG|SFManager.py:118] 2015-12-15 02:33:34,409 > The interfaces name is OK (eth2)
[DEBUG|SFManager.py:124] 2015-12-15 02:33:34,409 > The interfaces MAC is OK (52:54:00:13:1E:D7)
[DEBUG|SFManager.py:118] 2015-12-15 02:33:34,409 > The interfaces name is OK (eth1)
[DEBUG|SFManager.py:124] 2015-12-15 02:33:34,409 > The interfaces MAC is OK (52:54:00:7C:A8:50)
[DEBUG|SFManager.py:95] 2015-12-15 02:33:34,411 > {u'ip': u'0.0.0.0', u'interfaces': {u'eth2': {u'ip': u'', u'mac': u'52:54:00:13:1E:D7', u'type': u'egress', u'name': u'eth2'}, u'eth1': {u'ip': u'', u'mac': u'52:54:00:7C:A8:50', u'type': u'ingress', u'name': u'eth1'}}, '_id': ObjectId('566fec7e1d41c881268124c3'), u'type': u'UTM', u'name': u'Endian B'}
[INFO|SFManager.py:96] 2015-12-15 02:33:34,411 > The service function insertion is completed
[DEBUG|SFFManager.py:35] 2015-12-15 02:33:50,145 > args ['create-sff']
[DEBUG|SFFManager.py:48] 2015-12-15 02:33:50,145 > []
[INFO|SFFManager.py:54] 2015-12-15 02:33:50,145 > Create a service function forwarder
[INFO|SFFManager.py:101] 2015-12-15 02:33:50,145 > validate service_function_forwarder_enty
[DEBUG|SFFManager.py:104] 2015-12-15 02:33:50,145 > SFF name is OK
[DEBUG|SFFManager.py:110] 2015-12-15 02:33:50,145 > SFF type is OK
[DEBUG|SFFManager.py:116] 2015-12-15 02:33:50,145 > SFF dpid is OK(00:00:00:0c:29:57:3d:a4)
[DEBUG|SFFManager.py:124] 2015-12-15 02:33:50,145 > connected_sf's name is OK (vFW)
[DEBUG|SFFManager.py:130] 2015-12-15 02:33:50,145 > connected_sf's ingress_port is OK (1)
[DEBUG|SFFManager.py:136] 2015-12-15 02:33:50,146 > connected_sf's egress_port is OK (2)
[DEBUG|SFFManager.py:124] 2015-12-15 02:33:50,146 > connected_sf's name is OK (vDPI)
[DEBUG|SFFManager.py:130] 2015-12-15 02:33:50,146 > connected_sf's ingress_port is OK (4)
[DEBUG|SFFManager.py:136] 2015-12-15 02:33:50,146 > connected_sf's egress_port is OK (5)
[DEBUG|SFFManager.py:124] 2015-12-15 02:33:50,146 > connected_sf's name is OK (Endian)
[DEBUG|SFFManager.py:130] 2015-12-15 02:33:50,146 > connected_sf's ingress_port is OK (13)
[DEBUG|SFFManager.py:136] 2015-12-15 02:33:50,146 > connected_sf's egress_port is OK (14)
[DEBUG|SFFManager.py:96] 2015-12-15 02:33:50,148 > {'_id': ObjectId('566fec8e1d41c8813c93113e'), u'connected_sf': {u'vFW': {u'egress_port': u'2', u'name': u'vFW', u'ingress_port': u'1'}, u'vDPI': {u'egress_port': u'5', u'name': u'vDPI', u'ingress_port': u'4'}, u'Endian': {u'egress_port': u'14', u'name': u'Endian', u'ingress_port': u'13'}}, u'type': u'general', u'name': u'OpenvSwitch A', u'dpid': u'00:00:00:0c:29:57:3d:a4'}
[INFO|SFFManager.py:97] 2015-12-15 02:33:50,148 > The service function creation is completed
[DEBUG|SFFManager.py:35] 2015-12-15 02:33:52,741 > args ['create-sff']
[DEBUG|SFFManager.py:48] 2015-12-15 02:33:52,741 > []
[INFO|SFFManager.py:54] 2015-12-15 02:33:52,741 > Create a service function forwarder
[INFO|SFFManager.py:101] 2015-12-15 02:33:52,742 > validate service_function_forwarder_enty
[DEBUG|SFFManager.py:104] 2015-12-15 02:33:52,742 > SFF name is OK
[DEBUG|SFFManager.py:110] 2015-12-15 02:33:52,742 > SFF type is OK
[DEBUG|SFFManager.py:116] 2015-12-15 02:33:52,742 > SFF dpid is OK(00:00:e4:11:5b:12:89:7e)
[DEBUG|SFFManager.py:124] 2015-12-15 02:33:52,742 > connected_sf's name is OK (Endian A)
[DEBUG|SFFManager.py:130] 2015-12-15 02:33:52,742 > connected_sf's ingress_port is OK (9)
[DEBUG|SFFManager.py:136] 2015-12-15 02:33:52,742 > connected_sf's egress_port is OK (10)
[DEBUG|SFFManager.py:124] 2015-12-15 02:33:52,743 > connected_sf's name is OK (Endian B)
[DEBUG|SFFManager.py:130] 2015-12-15 02:33:52,743 > connected_sf's ingress_port is OK (7)
[DEBUG|SFFManager.py:136] 2015-12-15 02:33:52,743 > connected_sf's egress_port is OK (8)
[DEBUG|SFFManager.py:96] 2015-12-15 02:33:52,744 > {'_id': ObjectId('566fec901d41c881431e4d2b'), u'connected_sf': {u'Endian A': {u'egress_port': u'10', u'name': u'Endian A', u'ingress_port': u'9'}, u'Endian B': {u'egress_port': u'8', u'name': u'Endian B', u'ingress_port': u'7'}}, u'type': u'general', u'name': u'OpenvSwitch B', u'dpid': u'00:00:e4:11:5b:12:89:7e'}
[INFO|SFFManager.py:97] 2015-12-15 02:33:52,745 > The service function creation is completed
[DEBUG|SFFManager.py:35] 2015-12-15 02:33:55,249 > args ['create-sff']
[DEBUG|SFFManager.py:48] 2015-12-15 02:33:55,250 > []
[INFO|SFFManager.py:54] 2015-12-15 02:33:55,250 > Create a service function forwarder
[INFO|SFFManager.py:101] 2015-12-15 02:33:55,250 > validate service_function_forwarder_enty
[DEBUG|SFFManager.py:104] 2015-12-15 02:33:55,250 > SFF name is OK
[DEBUG|SFFManager.py:110] 2015-12-15 02:33:55,250 > SFF type is OK
[DEBUG|SFFManager.py:116] 2015-12-15 02:33:55,250 > SFF dpid is OK(00:00:00:00:00:00:00:01)
[DEBUG|SFFManager.py:96] 2015-12-15 02:33:55,252 > {'_id': ObjectId('566fec931d41c8814cbb718f'), u'connected_sf': {}, u'type': u'DASAN', u'name': u'DASAN A', u'dpid': u'00:00:00:00:00:00:00:01'}
[INFO|SFFManager.py:97] 2015-12-15 02:33:55,252 > The service function creation is completed
[INFO|EPManager.py:55] 2015-12-15 16:12:53,901 > Create a service function forwarder
[INFO|EPManager.py:98] 2015-12-15 16:12:53,901 > validate service_function_forwarder_enty
[DEBUG|EPManager.py:101] 2015-12-15 16:12:53,901 > EP name is OK
[DEBUG|EPManager.py:107] 2015-12-15 16:12:53,901 > EP dpid is OK
[DEBUG|EPManager.py:113] 2015-12-15 16:12:53,902 > EP dpid is OK
[DEBUG|EPManager.py:93] 2015-12-15 16:12:53,903 > {'attached_switch': {'attached_port': '1', 'dpid': '101'}, 'vlan': 0, 'name': 'testing', '_id': ObjectId('5670ac851d41c885c46a7dc8')}
[INFO|EPManager.py:94] 2015-12-15 16:12:53,904 > the end point is completed
[INFO|EPManager.py:55] 2015-12-15 16:14:51,103 > Create a service function forwarder
[INFO|EPManager.py:98] 2015-12-15 16:14:51,104 > validate service_function_forwarder_enty
[DEBUG|EPManager.py:101] 2015-12-15 16:14:51,104 > EP name is OK
[DEBUG|EPManager.py:107] 2015-12-15 16:14:51,104 > EP dpid is OK
[DEBUG|EPManager.py:113] 2015-12-15 16:14:51,104 > EP dpid is OK
[DEBUG|EPManager.py:93] 2015-12-15 16:14:51,106 > {u'attached_switch': {u'attached_port': u'9', u'dpid': u'00:00:00:0c:29:57:3d:a4'}, u'vlan': 0, u'name': u'ingress_endpoint', '_id': ObjectId('5670acfb1d41c88616494623')}
[INFO|EPManager.py:94] 2015-12-15 16:14:51,106 > the end point is completed
[INFO|EPManager.py:165] 2015-12-15 16:18:38,283 > delete the end point entrie
[INFO|EPManager.py:172] 2015-12-15 16:18:38,284 > 2 end point entries are deleted
[INFO|EPManager.py:55] 2015-12-15 16:18:49,164 > Create a service function forwarder
[INFO|EPManager.py:98] 2015-12-15 16:18:49,164 > validate service_function_forwarder_enty
[DEBUG|EPManager.py:101] 2015-12-15 16:18:49,164 > EP name is OK
[DEBUG|EPManager.py:107] 2015-12-15 16:18:49,165 > EP dpid is OK
[DEBUG|EPManager.py:113] 2015-12-15 16:18:49,165 > EP dpid is OK
[DEBUG|EPManager.py:93] 2015-12-15 16:18:49,166 > {u'attached_switch': {u'attached_port': u'9', u'dpid': u'00:00:00:0c:29:57:3d:a4'}, u'vlan': 0, u'name': u'ingress_endpoint', '_id': ObjectId('5670ade91d41c88719e7354d')}
[INFO|EPManager.py:94] 2015-12-15 16:18:49,167 > the end point is completed
[INFO|EPManager.py:55] 2015-12-15 16:18:52,455 > Create a service function forwarder
[INFO|EPManager.py:98] 2015-12-15 16:18:52,455 > validate service_function_forwarder_enty
[DEBUG|EPManager.py:101] 2015-12-15 16:18:52,455 > EP name is OK
[DEBUG|EPManager.py:107] 2015-12-15 16:18:52,456 > EP dpid is OK
[DEBUG|EPManager.py:113] 2015-12-15 16:18:52,456 > EP dpid is OK
[DEBUG|EPManager.py:93] 2015-12-15 16:18:52,457 > {u'attached_switch': {u'attached_port': u'3', u'dpid': u'00:00:00:0c:29:57:3d:a4'}, u'vlan': 0, u'name': u'egress_endpoint', '_id': ObjectId('5670adec1d41c88722e44ace')}
[INFO|EPManager.py:94] 2015-12-15 16:18:52,458 > the end point is completed
[INFO|EPManager.py:55] 2015-12-15 16:18:54,859 > Create a service function forwarder
[INFO|EPManager.py:98] 2015-12-15 16:18:54,859 > validate service_function_forwarder_enty
[DEBUG|EPManager.py:101] 2015-12-15 16:18:54,860 > EP name is OK
[DEBUG|EPManager.py:107] 2015-12-15 16:18:54,860 > EP dpid is OK
[DEBUG|EPManager.py:113] 2015-12-15 16:18:54,860 > EP dpid is OK
[DEBUG|EPManager.py:93] 2015-12-15 16:18:54,862 > {u'attached_switch': {u'attached_port': u'1', u'dpid': u'00:00:e4:11:5b:12:89:7e'}, u'vlan': 0, u'name': u'ingress_endpoint B', '_id': ObjectId('5670adee1d41c8872ba7783a')}
[INFO|EPManager.py:94] 2015-12-15 16:18:54,862 > the end point is completed
[INFO|EPManager.py:55] 2015-12-15 16:18:57,216 > Create a service function forwarder
[INFO|EPManager.py:98] 2015-12-15 16:18:57,216 > validate service_function_forwarder_enty
[DEBUG|EPManager.py:101] 2015-12-15 16:18:57,216 > EP name is OK
[DEBUG|EPManager.py:107] 2015-12-15 16:18:57,216 > EP dpid is OK
[DEBUG|EPManager.py:113] 2015-12-15 16:18:57,216 > EP dpid is OK
[DEBUG|EPManager.py:93] 2015-12-15 16:18:57,218 > {u'attached_switch': {u'attached_port': u'2', u'dpid': u'00:00:e4:11:5b:12:89:7e'}, u'vlan': 0, u'name': u'DASAN endpoint', '_id': ObjectId('5670adf11d41c88732bdbb13')}
[INFO|EPManager.py:94] 2015-12-15 16:18:57,219 > the end point is completed
[INFO|EPManager.py:55] 2015-12-15 16:18:59,459 > Create a service function forwarder
[INFO|EPManager.py:98] 2015-12-15 16:18:59,459 > validate service_function_forwarder_enty
[DEBUG|EPManager.py:101] 2015-12-15 16:18:59,459 > EP name is OK
[DEBUG|EPManager.py:107] 2015-12-15 16:18:59,459 > EP dpid is OK
[DEBUG|EPManager.py:113] 2015-12-15 16:18:59,459 > EP dpid is OK
[ERROR|EPManager.py:86] 2015-12-15 16:18:59,460 > already, the end point is exist
[INFO|EPManager.py:55] 2015-12-15 16:20:31,044 > Create a service function forwarder
[INFO|EPManager.py:98] 2015-12-15 16:20:31,044 > validate service_function_forwarder_enty
[DEBUG|EPManager.py:101] 2015-12-15 16:20:31,044 > EP name is OK
[DEBUG|EPManager.py:107] 2015-12-15 16:20:31,044 > EP dpid is OK
[DEBUG|EPManager.py:113] 2015-12-15 16:20:31,045 > EP dpid is OK
[DEBUG|EPManager.py:93] 2015-12-15 16:20:31,046 > {u'attached_switch': {u'attached_port': u'2', u'dpid': u'00:00:e4:11:5b:12:89:7e'}, u'vlan': 0, u'name': u'egress_endpoint B', '_id': ObjectId('5670ae4f1d41c88785d6ed96')}
[INFO|EPManager.py:94] 2015-12-15 16:20:31,046 > the end point is completed
[INFO|EPManager.py:140] 2015-12-15 16:28:09,975 > Update end point
[DEBUG|EPManager.py:153] 2015-12-15 16:28:09,976 > sff exist 1
[INFO|EPManager.py:165] 2015-12-15 16:28:09,976 > delete the end point entrie
[INFO|EPManager.py:172] 2015-12-15 16:28:09,976 > 1 end point entries are deleted
[INFO|EPManager.py:55] 2015-12-15 16:28:09,976 > Create a service function forwarder
[INFO|EPManager.py:98] 2015-12-15 16:28:09,977 > validate service_function_forwarder_enty
[DEBUG|EPManager.py:101] 2015-12-15 16:28:09,977 > EP name is OK
[DEBUG|EPManager.py:107] 2015-12-15 16:28:09,977 > EP dpid is OK
[DEBUG|EPManager.py:113] 2015-12-15 16:28:09,977 > EP dpid is OK
[DEBUG|EPManager.py:93] 2015-12-15 16:28:09,978 > {'attached_switch': {'attached_port': '9', 'dpid': '00:00:00:0c:29:57:3d:a4'}, 'vlan': 0, 'name': 'ingress_endpoint', '_id': ObjectId('5670b0191d41c888c3ab9cb9')}
[INFO|EPManager.py:94] 2015-12-15 16:28:09,978 > the end point is completed
[INFO|EPManager.py:158] 2015-12-15 16:28:09,978 > Update end point success
[INFO|EPManager.py:140] 2015-12-15 16:28:22,092 > Update end point
[DEBUG|EPManager.py:153] 2015-12-15 16:28:22,093 > sff exist 1
[INFO|EPManager.py:165] 2015-12-15 16:28:22,093 > delete the end point entrie
[INFO|EPManager.py:172] 2015-12-15 16:28:22,094 > 1 end point entries are deleted
[INFO|EPManager.py:55] 2015-12-15 16:28:22,094 > Create a service function forwarder
[INFO|EPManager.py:98] 2015-12-15 16:28:22,094 > validate service_function_forwarder_enty
[DEBUG|EPManager.py:101] 2015-12-15 16:28:22,094 > EP name is OK
[DEBUG|EPManager.py:107] 2015-12-15 16:28:22,095 > EP dpid is OK
[DEBUG|EPManager.py:113] 2015-12-15 16:28:22,095 > EP dpid is OK
[DEBUG|EPManager.py:93] 2015-12-15 16:28:22,096 > {'attached_switch': {'attached_port': '9', 'dpid': '00:00:00:0c:29:57:3d:a4'}, 'vlan': 0, 'name': 'ingress_endpoint', '_id': ObjectId('5670b0261d41c888d903e5df')}
[INFO|EPManager.py:94] 2015-12-15 16:28:22,096 > the end point is completed
[INFO|EPManager.py:158] 2015-12-15 16:28:22,096 > Update end point success
[INFO|EPManager.py:140] 2015-12-15 16:29:06,753 > Update end point
[DEBUG|EPManager.py:153] 2015-12-15 16:29:06,757 > sff exist 1
[INFO|EPManager.py:165] 2015-12-15 16:29:06,757 > delete the end point entrie
[INFO|EPManager.py:172] 2015-12-15 16:29:06,757 > 1 end point entries are deleted
[INFO|EPManager.py:55] 2015-12-15 16:29:06,758 > Create a service function forwarder
[INFO|EPManager.py:98] 2015-12-15 16:29:06,758 > validate service_function_forwarder_enty
[DEBUG|EPManager.py:101] 2015-12-15 16:29:06,758 > EP name is OK
[DEBUG|EPManager.py:107] 2015-12-15 16:29:06,758 > EP dpid is OK
[DEBUG|EPManager.py:113] 2015-12-15 16:29:06,758 > EP dpid is OK
[DEBUG|EPManager.py:93] 2015-12-15 16:29:06,759 > {'attached_switch': {'attached_port': '9', 'dpid': '00:00:00:0c:29:57:3d:a4'}, 'vlan': '1', 'name': 'ingress_endpoint', '_id': ObjectId('5670b0521d41c8891a9e7b99')}
[INFO|EPManager.py:94] 2015-12-15 16:29:06,759 > the end point is completed
[INFO|EPManager.py:158] 2015-12-15 16:29:06,759 > Update end point success
[INFO|EPManager.py:140] 2015-12-15 16:29:13,779 > Update end point
[DEBUG|EPManager.py:153] 2015-12-15 16:29:13,781 > sff exist 1
[INFO|EPManager.py:165] 2015-12-15 16:29:13,781 > delete the end point entrie
[INFO|EPManager.py:172] 2015-12-15 16:29:13,781 > 1 end point entries are deleted
[INFO|EPManager.py:55] 2015-12-15 16:29:13,782 > Create a service function forwarder
[INFO|EPManager.py:98] 2015-12-15 16:29:13,782 > validate service_function_forwarder_enty
[DEBUG|EPManager.py:101] 2015-12-15 16:29:13,782 > EP name is OK
[DEBUG|EPManager.py:107] 2015-12-15 16:29:13,782 > EP dpid is OK
[DEBUG|EPManager.py:113] 2015-12-15 16:29:13,782 > EP dpid is OK
[DEBUG|EPManager.py:93] 2015-12-15 16:29:13,783 > {'attached_switch': {'attached_port': '9', 'dpid': '00:00:00:0c:29:57:3d:a4'}, 'vlan': '0', 'name': 'ingress_endpoint', '_id': ObjectId('5670b0591d41c8892e25bf99')}
[INFO|EPManager.py:94] 2015-12-15 16:29:13,783 > the end point is completed
[INFO|EPManager.py:158] 2015-12-15 16:29:13,784 > Update end point success
[INFO|EPManager.py:140] 2015-12-15 16:29:31,007 > Update end point
[DEBUG|EPManager.py:153] 2015-12-15 16:29:31,009 > sff exist 1
[INFO|EPManager.py:165] 2015-12-15 16:29:31,009 > delete the end point entrie
[INFO|EPManager.py:172] 2015-12-15 16:29:31,009 > 1 end point entries are deleted
[INFO|EPManager.py:55] 2015-12-15 16:29:31,009 > Create a service function forwarder
[INFO|EPManager.py:98] 2015-12-15 16:29:31,010 > validate service_function_forwarder_enty
[DEBUG|EPManager.py:101] 2015-12-15 16:29:31,010 > EP name is OK
[DEBUG|EPManager.py:107] 2015-12-15 16:29:31,010 > EP dpid is OK
[DEBUG|EPManager.py:113] 2015-12-15 16:29:31,010 > EP dpid is OK
[DEBUG|EPManager.py:93] 2015-12-15 16:29:31,011 > {'attached_switch': {'attached_port': '9', 'dpid': '00:00:00:0c:29:57:3d:a4'}, 'vlan': '1', 'name': 'ingress_endpoint', '_id': ObjectId('5670b06b1d41c8894552a83d')}
[INFO|EPManager.py:94] 2015-12-15 16:29:31,011 > the end point is completed
[INFO|EPManager.py:158] 2015-12-15 16:29:31,012 > Update end point success
[INFO|EPManager.py:140] 2015-12-15 16:29:47,394 > Update end point
[DEBUG|EPManager.py:153] 2015-12-15 16:29:47,395 > sff exist 1
[INFO|EPManager.py:165] 2015-12-15 16:29:47,395 > delete the end point entrie
[INFO|EPManager.py:172] 2015-12-15 16:29:47,396 > 1 end point entries are deleted
[INFO|EPManager.py:55] 2015-12-15 16:29:47,396 > Create a service function forwarder
[INFO|EPManager.py:98] 2015-12-15 16:29:47,396 > validate service_function_forwarder_enty
[DEBUG|EPManager.py:101] 2015-12-15 16:29:47,396 > EP name is OK
[DEBUG|EPManager.py:107] 2015-12-15 16:29:47,396 > EP dpid is OK
[DEBUG|EPManager.py:113] 2015-12-15 16:29:47,397 > EP dpid is OK
[DEBUG|EPManager.py:93] 2015-12-15 16:29:47,398 > {u'attached_switch': {u'attached_port': u'9', u'dpid': u'00:00:00:0c:29:57:3d:a4'}, u'vlan': 0, u'name': u'ingress_endpoint', '_id': ObjectId('5670b07b1d41c88955742144')}
[INFO|EPManager.py:94] 2015-12-15 16:29:47,398 > the end point is completed
[INFO|EPManager.py:158] 2015-12-15 16:29:47,398 > Update end point success
[INFO|VNFFGManager.py:37] 2015-12-15 16:51:44,777 > create VNFFG [ex: firewall, NAT, DPI]
[DEBUG|VNFFGManager.py:48] 2015-12-15 16:51:44,777 > name is empty
[DEBUG|VNFFGManager.py:92] 2015-12-15 16:51:44,778 > name is OK
[DEBUG|VNFFGManager.py:85] 2015-12-15 16:51:45,083 > {'sf_list': ['vDPI'], '_id': ObjectId('5670b5a11d41c88dfb2d2a9c'), 'name': 'VNFFG_1'}
[INFO|VNFFGManager.py:86] 2015-12-15 16:51:45,083 > The service function insertion is completed
[INFO|VNFFGManager.py:147] 2015-12-15 16:52:06,338 > delete the end point entrie
[INFO|VNFFGManager.py:153] 2015-12-15 16:52:06,339 > 2 entries are deleted
[INFO|VNFFGManager.py:37] 2015-12-15 16:56:13,948 > create VNFFG [ex: firewall, NAT, DPI]
[DEBUG|VNFFGManager.py:92] 2015-12-15 16:56:13,949 > name is OK
[DEBUG|VNFFGManager.py:85] 2015-12-15 16:56:13,950 > {u'sf_list': [u'vDPI'], '_id': ObjectId('5670b6ad1d41c88eda0d6644'), u'name': u'VNFFG_1'}
[INFO|VNFFGManager.py:86] 2015-12-15 16:56:13,951 > The service function insertion is completed
[INFO|VNFFGManager.py:37] 2015-12-15 16:56:17,361 > create VNFFG [ex: firewall, NAT, DPI]
[DEBUG|VNFFGManager.py:92] 2015-12-15 16:56:17,361 > name is OK
[DEBUG|VNFFGManager.py:85] 2015-12-15 16:56:17,363 > {u'sf_list': [u'vDPI', u'vFW'], '_id': ObjectId('5670b6b11d41c88ee312d620'), u'name': u'VNFFG_2'}
[INFO|VNFFGManager.py:86] 2015-12-15 16:56:17,363 > The service function insertion is completed
[INFO|VNFFGManager.py:37] 2015-12-15 16:56:19,969 > create VNFFG [ex: firewall, NAT, DPI]
[DEBUG|VNFFGManager.py:92] 2015-12-15 16:56:19,969 > name is OK
[DEBUG|VNFFGManager.py:85] 2015-12-15 16:56:19,971 > {u'sf_list': [u'vFW', u'vDPI'], '_id': ObjectId('5670b6b31d41c88eeb158ca3'), u'name': u'VNFFG_3'}
[INFO|VNFFGManager.py:86] 2015-12-15 16:56:19,971 > The service function insertion is completed
[INFO|VNFFGManager.py:37] 2015-12-15 16:56:22,681 > create VNFFG [ex: firewall, NAT, DPI]
[DEBUG|VNFFGManager.py:92] 2015-12-15 16:56:22,681 > name is OK
[DEBUG|VNFFGManager.py:85] 2015-12-15 16:56:22,683 > {u'sf_list': [u'Endian'], '_id': ObjectId('5670b6b61d41c88ef49be90e'), u'name': u'VNFFG_4'}
[INFO|VNFFGManager.py:86] 2015-12-15 16:56:22,683 > The service function insertion is completed
[INFO|VNFFGManager.py:37] 2015-12-15 16:56:25,097 > create VNFFG [ex: firewall, NAT, DPI]
[DEBUG|VNFFGManager.py:92] 2015-12-15 16:56:25,098 > name is OK
[DEBUG|VNFFGManager.py:85] 2015-12-15 16:56:25,099 > {u'sf_list': [u'Endian A'], '_id': ObjectId('5670b6b91d41c88efbb5d218'), u'name': u'VNFFG_5'}
[INFO|VNFFGManager.py:86] 2015-12-15 16:56:25,100 > The service function insertion is completed
[INFO|VNFFGManager.py:37] 2015-12-15 16:56:27,465 > create VNFFG [ex: firewall, NAT, DPI]
[DEBUG|VNFFGManager.py:92] 2015-12-15 16:56:27,465 > name is OK
[DEBUG|VNFFGManager.py:85] 2015-12-15 16:56:27,467 > {u'sf_list': [u'Endian B'], '_id': ObjectId('5670b6bb1d41c88f04f57d85'), u'name': u'VNFFG_6'}
[INFO|VNFFGManager.py:86] 2015-12-15 16:56:27,468 > The service function insertion is completed
[INFO|VNFFGManager.py:37] 2015-12-15 16:56:29,785 > create VNFFG [ex: firewall, NAT, DPI]
[DEBUG|VNFFGManager.py:92] 2015-12-15 16:56:29,786 > name is OK
[DEBUG|VNFFGManager.py:85] 2015-12-15 16:56:29,787 > {u'sf_list': [u'Endian A', u'Endian B'], '_id': ObjectId('5670b6bd1d41c88f0bac5abc'), u'name': u'VNFFG_7'}
[INFO|VNFFGManager.py:86] 2015-12-15 16:56:29,788 > The service function insertion is completed
[DEBUG|tenantManager.py:22] 2015-12-15 17:18:22,623 > args ['create-tenant']
[DEBUG|tenantManager.py:29] 2015-12-15 17:18:22,623 > options {}
[INFO|tenantManager.py:33] 2015-12-15 17:18:22,623 > create tenant [ex: firewall, NAT, DPI]
[DEBUG|tenantManager.py:68] 2015-12-15 17:18:22,625 > {'priority': '2000', 'attributes': {}, '_id': ObjectId('5670bbde1d41c893657f3b72'), 'name': 'default1'}
[INFO|tenantManager.py:69] 2015-12-15 17:18:22,625 > Tanant is completed
[DEBUG|tenantManager.py:22] 2015-12-15 17:20:51,991 > args ['create-tenant']
[DEBUG|tenantManager.py:29] 2015-12-15 17:20:51,992 > options {}
[INFO|tenantManager.py:33] 2015-12-15 17:20:51,992 > create tenant [ex: firewall, NAT, DPI]
[DEBUG|tenantManager.py:72] 2015-12-15 17:20:51,992 > {'priority': '2000', 'attributes': {}, 'name': 'default3'}
[DEBUG|tenantManager.py:75] 2015-12-15 17:20:51,992 > name is OK
[DEBUG|tenantManager.py:81] 2015-12-15 17:20:51,992 > priority is OK
[DEBUG|tenantManager.py:68] 2015-12-15 17:20:51,994 > {'priority': '2000', 'attributes': {}, '_id': ObjectId('5670bc731d41c894572ff279'), 'name': 'default3'}
[INFO|tenantManager.py:69] 2015-12-15 17:20:51,994 > Tanant is completed
[DEBUG|tenantManager.py:22] 2015-12-15 17:36:37,353 > args ['create-tenant']
[DEBUG|tenantManager.py:29] 2015-12-15 17:36:37,354 > options {}
[INFO|tenantManager.py:33] 2015-12-15 17:36:37,354 > create tenant [ex: firewall, NAT, DPI]
[DEBUG|tenantManager.py:72] 2015-12-15 17:36:37,354 > {u'priority': u'1000', u'attributes': {}, u'name': u'default'}
[DEBUG|tenantManager.py:75] 2015-12-15 17:36:37,354 > name is OK
[DEBUG|tenantManager.py:81] 2015-12-15 17:36:37,354 > priority is OK
[DEBUG|tenantManager.py:68] 2015-12-15 17:36:37,357 > {u'priority': u'1000', u'attributes': {}, '_id': ObjectId('5670c0251d41c897363c6595'), u'name': u'default'}
[INFO|tenantManager.py:69] 2015-12-15 17:36:37,357 > Tanant is completed
[DEBUG|tenantManager.py:22] 2015-12-15 17:36:40,528 > args ['create-tenant']
[DEBUG|tenantManager.py:29] 2015-12-15 17:36:40,528 > options {}
[INFO|tenantManager.py:33] 2015-12-15 17:36:40,528 > create tenant [ex: firewall, NAT, DPI]
[DEBUG|tenantManager.py:72] 2015-12-15 17:36:40,529 > {u'priority': u'1000', u'attributes': {u'eth_type': u'0x0806'}, u'name': u'arp_traffic'}
[DEBUG|tenantManager.py:75] 2015-12-15 17:36:40,529 > name is OK
[DEBUG|tenantManager.py:81] 2015-12-15 17:36:40,529 > priority is OK
[DEBUG|tenantManager.py:88] 2015-12-15 17:36:40,529 > attributes 0x0806
[DEBUG|tenantManager.py:68] 2015-12-15 17:36:40,531 > {u'priority': u'1000', u'attributes': {u'eth_type': u'0x0806'}, '_id': ObjectId('5670c0281d41c897409e6870'), u'name': u'arp_traffic'}
[INFO|tenantManager.py:69] 2015-12-15 17:36:40,531 > Tanant is completed
[DEBUG|tenantManager.py:22] 2015-12-15 17:36:43,520 > args ['create-tenant']
[DEBUG|tenantManager.py:29] 2015-12-15 17:36:43,521 > options {}
[INFO|tenantManager.py:33] 2015-12-15 17:36:43,521 > create tenant [ex: firewall, NAT, DPI]
[DEBUG|tenantManager.py:72] 2015-12-15 17:36:43,521 > {u'priority': u'1000', u'attributes': {u'ip_proto': u'17', u'eth_type': u'0x0800'}, u'name': u'udp_traffic'}
[DEBUG|tenantManager.py:75] 2015-12-15 17:36:43,521 > name is OK
[DEBUG|tenantManager.py:81] 2015-12-15 17:36:43,521 > priority is OK
[DEBUG|tenantManager.py:88] 2015-12-15 17:36:43,521 > attributes 17
[DEBUG|tenantManager.py:88] 2015-12-15 17:36:43,521 > attributes 0x0800
[DEBUG|tenantManager.py:68] 2015-12-15 17:36:43,523 > {u'priority': u'1000', u'attributes': {u'ip_proto': u'17', u'eth_type': u'0x0800'}, '_id': ObjectId('5670c02b1d41c8974727a75c'), u'name': u'udp_traffic'}
[INFO|tenantManager.py:69] 2015-12-15 17:36:43,523 > Tanant is completed
[DEBUG|tenantManager.py:22] 2015-12-15 17:36:46,960 > args ['create-tenant']
[DEBUG|tenantManager.py:29] 2015-12-15 17:36:46,961 > options {}
[INFO|tenantManager.py:33] 2015-12-15 17:36:46,961 > create tenant [ex: firewall, NAT, DPI]
[DEBUG|tenantManager.py:72] 2015-12-15 17:36:46,961 > {u'priority': u'1000', u'attributes': {u'ip_proto': u'6', u'eth_type': u'0x0800'}, u'name': u'tcp_traffic'}
[DEBUG|tenantManager.py:75] 2015-12-15 17:36:46,961 > name is OK
[DEBUG|tenantManager.py:81] 2015-12-15 17:36:46,962 > priority is OK
[DEBUG|tenantManager.py:88] 2015-12-15 17:36:46,962 > attributes 6
[DEBUG|tenantManager.py:88] 2015-12-15 17:36:46,962 > attributes 0x0800
[DEBUG|tenantManager.py:68] 2015-12-15 17:36:46,963 > {u'priority': u'1000', u'attributes': {u'ip_proto': u'6', u'eth_type': u'0x0800'}, '_id': ObjectId('5670c02e1d41c89750bbfce5'), u'name': u'tcp_traffic'}
[INFO|tenantManager.py:69] 2015-12-15 17:36:46,964 > Tanant is completed
[DEBUG|tenantManager.py:22] 2015-12-15 17:36:50,364 > args ['create-tenant']
[DEBUG|tenantManager.py:29] 2015-12-15 17:36:50,364 > options {}
[INFO|tenantManager.py:33] 2015-12-15 17:36:50,364 > create tenant [ex: firewall, NAT, DPI]
[DEBUG|tenantManager.py:72] 2015-12-15 17:36:50,365 > {u'priority': u'1000', u'attributes': {u'ip_proto': u'6', u'eth_type': u'0x0800'}, u'name': u'vlan_traffic'}
[DEBUG|tenantManager.py:75] 2015-12-15 17:36:50,365 > name is OK
[DEBUG|tenantManager.py:81] 2015-12-15 17:36:50,365 > priority is OK
[DEBUG|tenantManager.py:88] 2015-12-15 17:36:50,365 > attributes 6
[DEBUG|tenantManager.py:88] 2015-12-15 17:36:50,365 > attributes 0x0800
[DEBUG|tenantManager.py:68] 2015-12-15 17:36:50,369 > {u'priority': u'1000', u'attributes': {u'ip_proto': u'6', u'eth_type': u'0x0800'}, '_id': ObjectId('5670c0321d41c89759fee1f5'), u'name': u'vlan_traffic'}
[INFO|tenantManager.py:69] 2015-12-15 17:36:50,369 > Tanant is completed
[DEBUG|tenantManager.py:22] 2015-12-15 17:36:53,162 > args ['create-tenant']
[DEBUG|tenantManager.py:29] 2015-12-15 17:36:53,162 > options {}
[INFO|tenantManager.py:33] 2015-12-15 17:36:53,162 > create tenant [ex: firewall, NAT, DPI]
[DEBUG|tenantManager.py:72] 2015-12-15 17:36:53,162 > {u'priority': u'1000', u'attributes': {u'ip_proto': u'6', u'eth_type': u'0x0800', u'ipv4_src': u'10.0.0.10'}, u'name': u'src_ip_traffic'}
[DEBUG|tenantManager.py:75] 2015-12-15 17:36:53,162 > name is OK
[DEBUG|tenantManager.py:81] 2015-12-15 17:36:53,163 > priority is OK
[DEBUG|tenantManager.py:88] 2015-12-15 17:36:53,163 > attributes 6
[DEBUG|tenantManager.py:88] 2015-12-15 17:36:53,163 > attributes 0x0800
[DEBUG|tenantManager.py:88] 2015-12-15 17:36:53,163 > attributes 10.0.0.10
[DEBUG|tenantManager.py:68] 2015-12-15 17:36:53,165 > {u'priority': u'1000', u'attributes': {u'ip_proto': u'6', u'eth_type': u'0x0800', u'ipv4_src': u'10.0.0.10'}, '_id': ObjectId('5670c0351d41c89761de41b3'), u'name': u'src_ip_traffic'}
[INFO|tenantManager.py:69] 2015-12-15 17:36:53,165 > Tanant is completed
[INFO|NSManager.py:40] 2015-12-15 23:40:01,225 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-15 23:40:01,225 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-15 23:40:01,226 > name is ok
[DEBUG|NSManager.py:106] 2015-12-15 23:40:01,226 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-15 23:40:01,226 > egress_endpoint is OK
[DEBUG|NSManager.py:118] 2015-12-15 23:40:01,226 > vnffg is OK
[DEBUG|NSManager.py:91] 2015-12-15 23:40:01,228 > {u'vnffg': u'VNFFG_1', u'egress_endpoint': u'egress_endpoint', u'name': u'ns_dict_1', u'ingress_endpoint': u'ingress_endpoint', '_id': ObjectId('567115511d41c8cd86b0feb9'), u'tenant': u'default'}
[INFO|NSManager.py:92] 2015-12-15 23:40:01,228 > The network service insertion is completed
[INFO|NSManager.py:40] 2015-12-15 23:40:03,657 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-15 23:40:03,657 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-15 23:40:03,657 > name is ok
[DEBUG|NSManager.py:106] 2015-12-15 23:40:03,657 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-15 23:40:03,657 > egress_endpoint is OK
[DEBUG|NSManager.py:118] 2015-12-15 23:40:03,657 > vnffg is OK
[DEBUG|NSManager.py:91] 2015-12-15 23:40:03,659 > {u'vnffg': u'VNFFG_2', u'egress_endpoint': u'egress_endpoint', u'name': u'ns_dict_2', u'ingress_endpoint': u'ingress_endpoint', '_id': ObjectId('567115531d41c8cd8f3522fb'), u'tenant': u'default'}
[INFO|NSManager.py:92] 2015-12-15 23:40:03,660 > The network service insertion is completed
[INFO|NSManager.py:40] 2015-12-15 23:40:06,242 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-15 23:40:06,242 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-15 23:40:06,243 > name is ok
[DEBUG|NSManager.py:106] 2015-12-15 23:40:06,243 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-15 23:40:06,243 > egress_endpoint is OK
[DEBUG|NSManager.py:118] 2015-12-15 23:40:06,243 > vnffg is OK
[DEBUG|NSManager.py:91] 2015-12-15 23:40:06,245 > {u'vnffg': u'VNFFG_3', u'egress_endpoint': u'egress_endpoint', u'name': u'ns_dict_3', u'ingress_endpoint': u'ingress_endpoint', '_id': ObjectId('567115561d41c8cd965c83ad'), u'tenant': u'default'}
[INFO|NSManager.py:92] 2015-12-15 23:40:06,245 > The network service insertion is completed
[INFO|NSManager.py:40] 2015-12-15 23:40:08,752 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-15 23:40:08,753 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-15 23:40:08,753 > name is ok
[DEBUG|NSManager.py:106] 2015-12-15 23:40:08,753 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-15 23:40:08,754 > egress_endpoint is OK
[DEBUG|NSManager.py:118] 2015-12-15 23:40:08,754 > vnffg is OK
[DEBUG|NSManager.py:91] 2015-12-15 23:40:08,756 > {u'vnffg': u'VNFFG_3', u'egress_endpoint': u'egress_endpoint', u'name': u'ns_dict_4', u'ingress_endpoint': u'ingress_endpoint', '_id': ObjectId('567115581d41c8cd9f1d6cbd'), u'tenant': u'udp_traffic'}
[INFO|NSManager.py:92] 2015-12-15 23:40:08,756 > The network service insertion is completed
[INFO|NSManager.py:40] 2015-12-15 23:40:11,098 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-15 23:40:11,098 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-15 23:40:11,098 > name is ok
[DEBUG|NSManager.py:106] 2015-12-15 23:40:11,098 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-15 23:40:11,099 > egress_endpoint is OK
[DEBUG|NSManager.py:118] 2015-12-15 23:40:11,099 > vnffg is OK
[DEBUG|NSManager.py:91] 2015-12-15 23:40:11,100 > {u'vnffg': u'VNFFG_3', u'egress_endpoint': u'egress_endpoint', u'name': u'ns_dict_5', u'ingress_endpoint': u'ingress_endpoint', '_id': ObjectId('5671155b1d41c8cda69782a4'), u'tenant': u'vlan_traffic'}
[INFO|NSManager.py:92] 2015-12-15 23:40:11,101 > The network service insertion is completed
[INFO|NSManager.py:40] 2015-12-15 23:40:13,513 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-15 23:40:13,513 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-15 23:40:13,513 > name is ok
[DEBUG|NSManager.py:106] 2015-12-15 23:40:13,513 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-15 23:40:13,513 > egress_endpoint is OK
[DEBUG|NSManager.py:118] 2015-12-15 23:40:13,514 > vnffg is OK
[DEBUG|NSManager.py:91] 2015-12-15 23:40:13,515 > {u'vnffg': u'VNFFG_3', u'egress_endpoint': u'egress_endpoint', u'name': u'ns_dict_6', u'ingress_endpoint': u'ingress_endpoint', '_id': ObjectId('5671155d1d41c8cdb02dc6b5'), u'tenant': u'src_ip_traffic'}
[INFO|NSManager.py:92] 2015-12-15 23:40:13,515 > The network service insertion is completed
[INFO|NSManager.py:40] 2015-12-15 23:40:19,664 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-15 23:40:19,665 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-15 23:40:19,665 > name is ok
[DEBUG|NSManager.py:106] 2015-12-15 23:40:19,665 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-15 23:40:19,665 > egress_endpoint is OK
[DEBUG|NSManager.py:118] 2015-12-15 23:40:19,665 > vnffg is OK
[ERROR|NSManager.py:84] 2015-12-15 23:40:19,666 > already, the service function is exist
[INFO|NSManager.py:40] 2015-12-15 23:40:22,497 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-15 23:40:22,498 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-15 23:40:22,498 > name is ok
[DEBUG|NSManager.py:106] 2015-12-15 23:40:22,498 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-15 23:40:22,498 > egress_endpoint is OK
[DEBUG|NSManager.py:118] 2015-12-15 23:40:22,498 > vnffg is OK
[DEBUG|NSManager.py:91] 2015-12-15 23:40:22,500 > {u'vnffg': u'VNFFG_4', u'egress_endpoint': u'egress_endpoint', u'name': u'ns_dict_7', u'ingress_endpoint': u'ingress_endpoint', '_id': ObjectId('567115661d41c8cdc8f48b8c'), u'tenant': u'default'}
[INFO|NSManager.py:92] 2015-12-15 23:40:22,500 > The network service insertion is completed
[INFO|NSManager.py:40] 2015-12-15 23:40:25,545 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-15 23:40:25,545 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-15 23:40:25,545 > name is ok
[DEBUG|NSManager.py:106] 2015-12-15 23:40:25,545 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-15 23:40:25,545 > egress_endpoint is OK
[ERROR|NSManager.py:120] 2015-12-15 23:40:25,545 > vnffg is empty
[INFO|NSManager.py:40] 2015-12-15 23:40:48,531 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-15 23:40:48,531 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-15 23:40:48,531 > name is ok
[DEBUG|NSManager.py:106] 2015-12-15 23:40:48,531 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-15 23:40:48,531 > egress_endpoint is OK
[DEBUG|NSManager.py:118] 2015-12-15 23:40:48,532 > vnffg is OK
[ERROR|NSManager.py:84] 2015-12-15 23:40:48,532 > already, the service function is exist
[INFO|NSManager.py:40] 2015-12-15 23:40:54,489 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-15 23:40:54,490 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-15 23:40:54,490 > name is ok
[DEBUG|NSManager.py:106] 2015-12-15 23:40:54,490 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-15 23:40:54,490 > egress_endpoint is OK
[ERROR|NSManager.py:120] 2015-12-15 23:40:54,490 > vnffg is empty
[INFO|NSManager.py:40] 2015-12-15 23:40:58,414 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-15 23:40:58,414 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-15 23:40:58,414 > name is ok
[DEBUG|NSManager.py:106] 2015-12-15 23:40:58,414 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-15 23:40:58,414 > egress_endpoint is OK
[ERROR|NSManager.py:120] 2015-12-15 23:40:58,414 > vnffg is empty
[INFO|NSManager.py:40] 2015-12-15 23:42:59,410 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-15 23:42:59,411 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-15 23:42:59,411 > name is ok
[DEBUG|NSManager.py:106] 2015-12-15 23:42:59,411 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-15 23:42:59,411 > egress_endpoint is OK
[WARNING|NSManager.py:120] 2015-12-15 23:42:59,411 > vnffg is empty
[DEBUG|NSManager.py:91] 2015-12-15 23:42:59,413 > {u'vnffg': u'', u'egress_endpoint': u'egress_endpoint B', u'name': u'ns_dict_8', u'ingress_endpoint': u'ingress_endpoint B', '_id': ObjectId('567116031d41c8cf18a08305'), u'tenant': u'default'}
[INFO|NSManager.py:92] 2015-12-15 23:42:59,413 > The network service insertion is completed
[INFO|NSManager.py:169] 2015-12-15 23:43:08,173 > delete the network serivce entrie
[INFO|NSManager.py:175] 2015-12-15 23:43:08,174 > 9 entries are deleted
[INFO|NSManager.py:40] 2015-12-15 23:43:18,515 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-15 23:43:18,515 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-15 23:43:18,515 > name is ok
[DEBUG|NSManager.py:106] 2015-12-15 23:43:18,515 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-15 23:43:18,515 > egress_endpoint is OK
[DEBUG|NSManager.py:118] 2015-12-15 23:43:18,515 > vnffg is OK
[DEBUG|NSManager.py:91] 2015-12-15 23:43:18,517 > {u'vnffg': u'VNFFG_1', u'egress_endpoint': u'egress_endpoint', u'name': u'ns_dict_1', u'ingress_endpoint': u'ingress_endpoint', '_id': ObjectId('567116161d41c8cf30524e4e'), u'tenant': u'default'}
[INFO|NSManager.py:92] 2015-12-15 23:43:18,518 > The network service insertion is completed
[INFO|NSManager.py:40] 2015-12-15 23:43:20,729 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-15 23:43:20,730 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-15 23:43:20,730 > name is ok
[DEBUG|NSManager.py:106] 2015-12-15 23:43:20,730 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-15 23:43:20,730 > egress_endpoint is OK
[DEBUG|NSManager.py:118] 2015-12-15 23:43:20,730 > vnffg is OK
[DEBUG|NSManager.py:91] 2015-12-15 23:43:20,732 > {u'vnffg': u'VNFFG_2', u'egress_endpoint': u'egress_endpoint', u'name': u'ns_dict_2', u'ingress_endpoint': u'ingress_endpoint', '_id': ObjectId('567116181d41c8cf375e49ed'), u'tenant': u'default'}
[INFO|NSManager.py:92] 2015-12-15 23:43:20,733 > The network service insertion is completed
[INFO|NSManager.py:40] 2015-12-15 23:43:22,945 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-15 23:43:22,946 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-15 23:43:22,946 > name is ok
[DEBUG|NSManager.py:106] 2015-12-15 23:43:22,946 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-15 23:43:22,946 > egress_endpoint is OK
[DEBUG|NSManager.py:118] 2015-12-15 23:43:22,946 > vnffg is OK
[DEBUG|NSManager.py:91] 2015-12-15 23:43:22,948 > {u'vnffg': u'VNFFG_3', u'egress_endpoint': u'egress_endpoint', u'name': u'ns_dict_3', u'ingress_endpoint': u'ingress_endpoint', '_id': ObjectId('5671161a1d41c8cf40cf012e'), u'tenant': u'default'}
[INFO|NSManager.py:92] 2015-12-15 23:43:22,948 > The network service insertion is completed
[INFO|NSManager.py:40] 2015-12-15 23:43:25,441 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-15 23:43:25,441 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-15 23:43:25,442 > name is ok
[DEBUG|NSManager.py:106] 2015-12-15 23:43:25,442 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-15 23:43:25,442 > egress_endpoint is OK
[DEBUG|NSManager.py:118] 2015-12-15 23:43:25,442 > vnffg is OK
[DEBUG|NSManager.py:91] 2015-12-15 23:43:25,444 > {u'vnffg': u'VNFFG_3', u'egress_endpoint': u'egress_endpoint', u'name': u'ns_dict_4', u'ingress_endpoint': u'ingress_endpoint', '_id': ObjectId('5671161d1d41c8cf49a2bdd0'), u'tenant': u'udp_traffic'}
[INFO|NSManager.py:92] 2015-12-15 23:43:25,444 > The network service insertion is completed
[INFO|NSManager.py:40] 2015-12-15 23:43:27,831 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-15 23:43:27,832 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-15 23:43:27,832 > name is ok
[DEBUG|NSManager.py:106] 2015-12-15 23:43:27,832 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-15 23:43:27,832 > egress_endpoint is OK
[DEBUG|NSManager.py:118] 2015-12-15 23:43:27,832 > vnffg is OK
[DEBUG|NSManager.py:91] 2015-12-15 23:43:27,834 > {u'vnffg': u'VNFFG_3', u'egress_endpoint': u'egress_endpoint', u'name': u'ns_dict_5', u'ingress_endpoint': u'ingress_endpoint', '_id': ObjectId('5671161f1d41c8cf5074fddf'), u'tenant': u'vlan_traffic'}
[INFO|NSManager.py:92] 2015-12-15 23:43:27,834 > The network service insertion is completed
[INFO|NSManager.py:40] 2015-12-15 23:43:30,337 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-15 23:43:30,337 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-15 23:43:30,337 > name is ok
[DEBUG|NSManager.py:106] 2015-12-15 23:43:30,337 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-15 23:43:30,338 > egress_endpoint is OK
[DEBUG|NSManager.py:118] 2015-12-15 23:43:30,338 > vnffg is OK
[DEBUG|NSManager.py:91] 2015-12-15 23:43:30,339 > {u'vnffg': u'VNFFG_3', u'egress_endpoint': u'egress_endpoint', u'name': u'ns_dict_6', u'ingress_endpoint': u'ingress_endpoint', '_id': ObjectId('567116221d41c8cf5b8e9f4c'), u'tenant': u'src_ip_traffic'}
[INFO|NSManager.py:92] 2015-12-15 23:43:30,340 > The network service insertion is completed
[INFO|NSManager.py:40] 2015-12-15 23:43:32,736 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-15 23:43:32,737 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-15 23:43:32,737 > name is ok
[DEBUG|NSManager.py:106] 2015-12-15 23:43:32,737 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-15 23:43:32,737 > egress_endpoint is OK
[DEBUG|NSManager.py:118] 2015-12-15 23:43:32,737 > vnffg is OK
[DEBUG|NSManager.py:91] 2015-12-15 23:43:32,739 > {u'vnffg': u'VNFFG_4', u'egress_endpoint': u'egress_endpoint', u'name': u'ns_dict_7', u'ingress_endpoint': u'ingress_endpoint', '_id': ObjectId('567116241d41c8cf638b3d1c'), u'tenant': u'default'}
[INFO|NSManager.py:92] 2015-12-15 23:43:32,739 > The network service insertion is completed
[INFO|NSManager.py:40] 2015-12-15 23:43:35,149 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-15 23:43:35,149 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-15 23:43:35,149 > name is ok
[DEBUG|NSManager.py:106] 2015-12-15 23:43:35,149 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-15 23:43:35,150 > egress_endpoint is OK
[WARNING|NSManager.py:120] 2015-12-15 23:43:35,150 > vnffg is empty
[DEBUG|NSManager.py:91] 2015-12-15 23:43:35,151 > {u'vnffg': u'', u'egress_endpoint': u'egress_endpoint B', u'name': u'ns_dict_8', u'ingress_endpoint': u'ingress_endpoint B', '_id': ObjectId('567116271d41c8cf6c48ccd7'), u'tenant': u'default'}
[INFO|NSManager.py:92] 2015-12-15 23:43:35,152 > The network service insertion is completed
[INFO|NSManager.py:40] 2015-12-15 23:43:37,592 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-15 23:43:37,593 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-15 23:43:37,593 > name is ok
[DEBUG|NSManager.py:106] 2015-12-15 23:43:37,593 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-15 23:43:37,593 > egress_endpoint is OK
[DEBUG|NSManager.py:118] 2015-12-15 23:43:37,593 > vnffg is OK
[DEBUG|NSManager.py:91] 2015-12-15 23:43:37,595 > {u'vnffg': u'VNFFG_5', u'egress_endpoint': u'egress_endpoint B', u'name': u'ns_dict_9', u'ingress_endpoint': u'ingress_endpoint B', '_id': ObjectId('567116291d41c8cf7341574c'), u'tenant': u'default'}
[INFO|NSManager.py:92] 2015-12-15 23:43:37,595 > The network service insertion is completed
[INFO|NSManager.py:169] 2015-12-16 01:05:50,910 > delete the network serivce entrie
[INFO|NSManager.py:175] 2015-12-16 01:05:50,911 > 9 entries are deleted
[INFO|NSManager.py:40] 2015-12-16 01:06:36,133 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-16 01:06:36,134 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-16 01:06:36,134 > name is ok
[DEBUG|NSManager.py:106] 2015-12-16 01:06:36,134 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-16 01:06:36,134 > egress_endpoint is OK
[INFO|NSManager.py:169] 2015-12-16 01:07:10,374 > delete the network serivce entrie
[INFO|NSManager.py:175] 2015-12-16 01:07:10,375 > 0 entries are deleted
[INFO|NSManager.py:40] 2015-12-16 01:07:12,329 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-16 01:07:12,329 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-16 01:07:12,329 > name is ok
[DEBUG|NSManager.py:106] 2015-12-16 01:07:12,329 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-16 01:07:12,329 > egress_endpoint is OK
[INFO|NSManager.py:40] 2015-12-16 01:08:44,024 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-16 01:08:44,025 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-16 01:08:44,025 > name is ok
[DEBUG|NSManager.py:106] 2015-12-16 01:08:44,025 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-16 01:08:44,025 > egress_endpoint is OK
[INFO|NSManager.py:40] 2015-12-16 01:08:49,607 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-16 01:08:49,608 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-16 01:08:49,608 > name is ok
[DEBUG|NSManager.py:106] 2015-12-16 01:08:49,608 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-16 01:08:49,608 > egress_endpoint is OK
[INFO|NSManager.py:169] 2015-12-16 01:11:12,234 > delete the network serivce entrie
[INFO|NSManager.py:175] 2015-12-16 01:11:12,235 > 0 entries are deleted
[INFO|NSManager.py:40] 2015-12-16 01:11:14,240 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-16 01:11:14,240 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-16 01:11:14,240 > name is ok
[DEBUG|NSManager.py:106] 2015-12-16 01:11:14,240 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-16 01:11:14,240 > egress_endpoint is OK
[DEBUG|NSManager.py:118] 2015-12-16 01:11:14,241 > vnffg is OK
[DEBUG|NSManager.py:91] 2015-12-16 01:11:14,242 > {u'vnffg': u'VNFFG_1', u'egress_endpoint': u'egress_endpoint', u'name': u'ns_dict_1', u'ingress_endpoint': u'ingress_endpoint', '_id': ObjectId('56712ab21d41c8e051832c17'), u'tenant': u'default'}
[INFO|NSManager.py:92] 2015-12-16 01:11:14,242 > The network service insertion is completed
[INFO|NSManager.py:40] 2015-12-16 01:11:18,248 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-16 01:11:18,249 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-16 01:11:18,249 > name is ok
[DEBUG|NSManager.py:106] 2015-12-16 01:11:18,249 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-16 01:11:18,249 > egress_endpoint is OK
[DEBUG|NSManager.py:118] 2015-12-16 01:11:18,249 > vnffg is OK
[DEBUG|NSManager.py:91] 2015-12-16 01:11:18,251 > {u'vnffg': u'VNFFG_2', u'egress_endpoint': u'egress_endpoint', u'name': u'ns_dict_2', u'ingress_endpoint': u'ingress_endpoint', '_id': ObjectId('56712ab61d41c8e058762e5b'), u'tenant': u'default'}
[INFO|NSManager.py:92] 2015-12-16 01:11:18,251 > The network service insertion is completed
[INFO|NSManager.py:40] 2015-12-16 01:11:20,545 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-16 01:11:20,545 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-16 01:11:20,545 > name is ok
[DEBUG|NSManager.py:106] 2015-12-16 01:11:20,545 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-16 01:11:20,545 > egress_endpoint is OK
[DEBUG|NSManager.py:118] 2015-12-16 01:11:20,545 > vnffg is OK
[DEBUG|NSManager.py:91] 2015-12-16 01:11:20,547 > {u'vnffg': u'VNFFG_3', u'egress_endpoint': u'egress_endpoint', u'name': u'ns_dict_3', u'ingress_endpoint': u'ingress_endpoint', '_id': ObjectId('56712ab81d41c8e061483c6a'), u'tenant': u'default'}
[INFO|NSManager.py:92] 2015-12-16 01:11:20,547 > The network service insertion is completed
[INFO|NSManager.py:40] 2015-12-16 01:11:22,727 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-16 01:11:22,728 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-16 01:11:22,728 > name is ok
[DEBUG|NSManager.py:106] 2015-12-16 01:11:22,728 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-16 01:11:22,728 > egress_endpoint is OK
[DEBUG|NSManager.py:118] 2015-12-16 01:11:22,728 > vnffg is OK
[DEBUG|NSManager.py:91] 2015-12-16 01:11:22,730 > {u'vnffg': u'VNFFG_3', u'egress_endpoint': u'egress_endpoint', u'name': u'ns_dict_4', u'ingress_endpoint': u'ingress_endpoint', '_id': ObjectId('56712aba1d41c8e06821eb31'), u'tenant': u'udp_traffic'}
[INFO|NSManager.py:92] 2015-12-16 01:11:22,730 > The network service insertion is completed
[INFO|NSManager.py:40] 2015-12-16 01:11:25,083 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-16 01:11:25,083 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-16 01:11:25,083 > name is ok
[DEBUG|NSManager.py:106] 2015-12-16 01:11:25,083 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-16 01:11:25,083 > egress_endpoint is OK
[DEBUG|NSManager.py:118] 2015-12-16 01:11:25,083 > vnffg is OK
[DEBUG|NSManager.py:91] 2015-12-16 01:11:25,088 > {u'vnffg': u'VNFFG_3', u'egress_endpoint': u'egress_endpoint', u'name': u'ns_dict_5', u'ingress_endpoint': u'ingress_endpoint', '_id': ObjectId('56712abd1d41c8e07269cb67'), u'tenant': u'vlan_traffic'}
[INFO|NSManager.py:92] 2015-12-16 01:11:25,089 > The network service insertion is completed
[INFO|NSManager.py:40] 2015-12-16 01:11:27,481 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-16 01:11:27,481 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-16 01:11:27,482 > name is ok
[DEBUG|NSManager.py:106] 2015-12-16 01:11:27,482 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-16 01:11:27,482 > egress_endpoint is OK
[DEBUG|NSManager.py:118] 2015-12-16 01:11:27,482 > vnffg is OK
[DEBUG|NSManager.py:91] 2015-12-16 01:11:27,484 > {u'vnffg': u'VNFFG_3', u'egress_endpoint': u'egress_endpoint', u'name': u'ns_dict_6', u'ingress_endpoint': u'ingress_endpoint', '_id': ObjectId('56712abf1d41c8e07913ba21'), u'tenant': u'src_ip_traffic'}
[INFO|NSManager.py:92] 2015-12-16 01:11:27,484 > The network service insertion is completed
[INFO|NSManager.py:40] 2015-12-16 01:11:29,935 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-16 01:11:29,935 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-16 01:11:29,935 > name is ok
[DEBUG|NSManager.py:106] 2015-12-16 01:11:29,935 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-16 01:11:29,935 > egress_endpoint is OK
[DEBUG|NSManager.py:118] 2015-12-16 01:11:29,936 > vnffg is OK
[DEBUG|NSManager.py:91] 2015-12-16 01:11:29,937 > {u'vnffg': u'VNFFG_4', u'egress_endpoint': u'egress_endpoint', u'name': u'ns_dict_7', u'ingress_endpoint': u'ingress_endpoint', '_id': ObjectId('56712ac11d41c8e082b670ba'), u'tenant': u'default'}
[INFO|NSManager.py:92] 2015-12-16 01:11:29,937 > The network service insertion is completed
[INFO|NSManager.py:40] 2015-12-16 01:11:32,471 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-16 01:11:32,471 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-16 01:11:32,471 > name is ok
[DEBUG|NSManager.py:106] 2015-12-16 01:11:32,471 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-16 01:11:32,471 > egress_endpoint is OK
[WARNING|NSManager.py:120] 2015-12-16 01:11:32,472 > vnffg is empty
[DEBUG|NSManager.py:91] 2015-12-16 01:11:32,474 > {u'vnffg': u'', u'egress_endpoint': u'egress_endpoint B', u'name': u'ns_dict_8', u'ingress_endpoint': u'ingress_endpoint B', '_id': ObjectId('56712ac41d41c8e08bc776b0'), u'tenant': u'default'}
[INFO|NSManager.py:92] 2015-12-16 01:11:32,474 > The network service insertion is completed
[INFO|NSManager.py:40] 2015-12-16 01:11:34,864 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-16 01:11:34,864 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-16 01:11:34,864 > name is ok
[DEBUG|NSManager.py:106] 2015-12-16 01:11:34,865 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-16 01:11:34,865 > egress_endpoint is OK
[DEBUG|NSManager.py:118] 2015-12-16 01:11:34,865 > vnffg is OK
[DEBUG|NSManager.py:91] 2015-12-16 01:11:34,866 > {u'vnffg': u'VNFFG_5', u'egress_endpoint': u'egress_endpoint B', u'name': u'ns_dict_9', u'ingress_endpoint': u'ingress_endpoint B', '_id': ObjectId('56712ac61d41c8e09726759f'), u'tenant': u'default'}
[INFO|NSManager.py:92] 2015-12-16 01:11:34,867 > The network service insertion is completed
[INFO|NSManager.py:40] 2015-12-16 01:11:38,417 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-16 01:11:38,417 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-16 01:11:38,417 > name is ok
[DEBUG|NSManager.py:106] 2015-12-16 01:11:38,417 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-16 01:11:38,417 > egress_endpoint is OK
[DEBUG|NSManager.py:118] 2015-12-16 01:11:38,417 > vnffg is OK
[DEBUG|NSManager.py:91] 2015-12-16 01:11:38,419 > {u'vnffg': u'VNFFG_6', u'egress_endpoint': u'egress_endpoint B', u'name': u'ns_dict_10', u'ingress_endpoint': u'ingress_endpoint B', '_id': ObjectId('56712aca1d41c8e0a077658a'), u'tenant': u'default'}
[INFO|NSManager.py:92] 2015-12-16 01:11:38,419 > The network service insertion is completed
[INFO|NSManager.py:40] 2015-12-16 01:11:42,100 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-16 01:11:42,100 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-16 01:11:42,100 > name is ok
[DEBUG|NSManager.py:106] 2015-12-16 01:11:42,100 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-16 01:11:42,100 > egress_endpoint is OK
[DEBUG|NSManager.py:118] 2015-12-16 01:11:42,100 > vnffg is OK
[DEBUG|NSManager.py:91] 2015-12-16 01:11:42,102 > {u'vnffg': u'VNFFG_7', u'egress_endpoint': u'egress_endpoint B', u'name': u'ns_dict_11', u'ingress_endpoint': u'ingress_endpoint B', '_id': ObjectId('56712ace1d41c8e0aa9e54f6'), u'tenant': u'default'}
[INFO|NSManager.py:92] 2015-12-16 01:11:42,102 > The network service insertion is completed
[INFO|NSManager.py:40] 2015-12-16 01:11:50,625 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-16 01:11:50,625 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-16 01:11:50,625 > name is ok
[DEBUG|NSManager.py:106] 2015-12-16 01:11:50,625 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-16 01:11:50,626 > egress_endpoint is OK
[DEBUG|NSManager.py:118] 2015-12-16 01:11:50,626 > vnffg is OK
[ERROR|NSManager.py:84] 2015-12-16 01:11:50,627 > already, the service function is exist
[INFO|NSManager.py:40] 2015-12-16 01:12:39,634 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-16 01:12:39,634 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-16 01:12:39,634 > name is ok
[DEBUG|NSManager.py:106] 2015-12-16 01:12:39,634 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-16 01:12:39,635 > egress_endpoint is OK
[WARNING|NSManager.py:120] 2015-12-16 01:12:39,635 > vnffg is empty
[DEBUG|NSManager.py:91] 2015-12-16 01:12:39,636 > {u'vnffg': u'', u'egress_endpoint': u'OVSportC', u'name': u'ns_dict_0', u'ingress_endpoint': u'portA', '_id': ObjectId('56712b071d41c8e0e53c2887'), u'tenant': u'default'}
[INFO|NSManager.py:92] 2015-12-16 01:12:39,637 > The network service insertion is completed
[INFO|NSManager.py:169] 2015-12-16 01:13:07,984 > delete the network serivce entrie
[INFO|NSManager.py:175] 2015-12-16 01:13:07,987 > 1 entries are deleted
[INFO|NSManager.py:40] 2015-12-16 01:14:06,200 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-16 01:14:06,200 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-16 01:14:06,201 > name is ok
[DEBUG|NSManager.py:106] 2015-12-16 01:14:06,201 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-16 01:14:06,201 > egress_endpoint is OK
[WARNING|NSManager.py:120] 2015-12-16 01:14:06,201 > vnffg is empty
[DEBUG|NSManager.py:91] 2015-12-16 01:14:06,203 > {u'vnffg': u'', u'egress_endpoint': u'egress_endpoint', u'name': u'ns_dict_0', u'ingress_endpoint': u'ingress_endpoint', '_id': ObjectId('56712b5e1d41c8e13788e5ef'), u'tenant': u'default'}
[INFO|NSManager.py:92] 2015-12-16 01:14:06,203 > The network service insertion is completed
[INFO|SFCManager.py:551] 2015-12-22 22:01:29,938 > validate_NS
[DEBUG|SFCManager.py:557] 2015-12-22 22:01:29,986 > load ns entry (ns_dict_0)
[INFO|SFCManager.py:551] 2015-12-22 22:02:29,644 > validate_NS
[DEBUG|SFCManager.py:557] 2015-12-22 22:02:29,645 > load ns entry (ns_dict_0)
[INFO|SFCManager.py:551] 2015-12-22 22:05:59,728 > validate_NS
[DEBUG|SFCManager.py:557] 2015-12-22 22:05:59,729 > load ns entry (ns_dict_0)
[INFO|SFCManager.py:578] 2015-12-22 22:05:59,731 > Validation of network scenario is complete
[INFO|SFCManager.py:551] 2015-12-22 22:06:19,637 > validate_NS
[DEBUG|SFCManager.py:557] 2015-12-22 22:06:19,638 > load ns entry (ns_dict_0)
[INFO|SFCManager.py:578] 2015-12-22 22:06:19,640 > A network scenario is complete
[INFO|SFCManager.py:551] 2015-12-22 22:08:47,816 > validate_NS
[ERROR|SFCManager.py:560] 2015-12-22 22:08:47,818 > Faild to load ns entry (None)
[ERROR|sfc-nsctl:279] 2015-12-22 22:08:47,818 > fail to validate ns
[INFO|SFCManager.py:551] 2015-12-22 22:08:53,163 > validate_NS
[DEBUG|SFCManager.py:557] 2015-12-22 22:08:53,165 > load ns entry (ns_dict_0)
[INFO|SFCManager.py:578] 2015-12-22 22:08:53,167 > A network scenario is complete
[INFO|SFCManager.py:568] 2015-12-22 22:13:19,742 > validate_NS
[DEBUG|SFCManager.py:574] 2015-12-22 22:13:19,743 > load ns entry (ns_dict_0)
[INFO|SFCManager.py:595] 2015-12-22 22:13:19,744 > A network scenario is complete
[DEBUG|SFCManager.py:526] 2015-12-22 22:13:19,745 > ingress_endpoint loading is completed
[DEBUG|SFCManager.py:530] 2015-12-22 22:13:19,745 > egress_endpoint loading is completed
[INFO|SFCManager.py:568] 2015-12-22 22:13:57,919 > validate_NS
[DEBUG|SFCManager.py:574] 2015-12-22 22:13:57,920 > load ns entry (ns_dict_0)
[INFO|SFCManager.py:595] 2015-12-22 22:13:57,921 > A network scenario is complete
[INFO|SFCManager.py:526] 2015-12-22 22:13:57,922 > ingress_endpoint loading is completed(ingress_endpoint)
[INFO|SFCManager.py:530] 2015-12-22 22:13:57,922 > egress_endpoint loading is completed(egress_endpoint)
[INFO|SFCManager.py:569] 2015-12-22 22:15:41,544 > validate_NS
[DEBUG|SFCManager.py:575] 2015-12-22 22:15:41,545 > load ns entry (ns_dict_0)
[INFO|SFCManager.py:596] 2015-12-22 22:15:41,547 > A network scenario is complete
[INFO|SFCManager.py:526] 2015-12-22 22:15:41,547 > ingress_endpoint loading is completed(ingress_endpoint)
[INFO|SFCManager.py:530] 2015-12-22 22:15:41,548 > egress_endpoint loading is completed(egress_endpoint)
[INFO|SFCManager.py:569] 2015-12-22 22:21:49,366 > validate_NS
[DEBUG|SFCManager.py:575] 2015-12-22 22:21:49,367 > load ns entry (ns_dict_0)
[INFO|SFCManager.py:596] 2015-12-22 22:21:49,369 > A network scenario is complete
[INFO|SFCManager.py:526] 2015-12-22 22:21:49,369 > ingress_endpoint loading is completed(ingress_endpoint)
[INFO|SFCManager.py:530] 2015-12-22 22:21:49,370 > egress_endpoint loading is completed(egress_endpoint)
[INFO|OpenflowHandler.py:131] 2015-12-22 22:21:49,370 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-22 22:21:49,371 > request_curl_url: http://127.0.0.1:8080/wm/topology/route/00:00:00:0c:29:57:3d:a4/9/00:00:00:0c:29:57:3d:a4/3/json
[CRITICAL|OpenflowHandler.py:142] 2015-12-22 22:21:49,372 > couldn't connect to host
[INFO|SFCManager.py:569] 2015-12-22 22:23:09,887 > validate_NS
[DEBUG|SFCManager.py:575] 2015-12-22 22:23:09,888 > load ns entry (ns_dict_0)
[INFO|SFCManager.py:596] 2015-12-22 22:23:09,889 > A network scenario is complete
[INFO|SFCManager.py:526] 2015-12-22 22:23:09,890 > ingress_endpoint loading is completed(ingress_endpoint)
[INFO|SFCManager.py:530] 2015-12-22 22:23:09,890 > egress_endpoint loading is completed(egress_endpoint)
[INFO|OpenflowHandler.py:131] 2015-12-22 22:23:09,891 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-22 22:23:09,892 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:57:3d:a4/9/00:00:00:0c:29:57:3d:a4/3/json
[DEBUG|OpenflowHandler.py:152] 2015-12-22 22:23:10,020 > [
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    }
]
[INFO|SFCManager.py:569] 2015-12-22 22:24:14,087 > validate_NS
[DEBUG|SFCManager.py:575] 2015-12-22 22:24:14,088 > load ns entry (ns_dict_0)
[INFO|SFCManager.py:596] 2015-12-22 22:24:14,089 > A network scenario is complete
[INFO|SFCManager.py:526] 2015-12-22 22:24:14,090 > ingress_endpoint loading is completed(ingress_endpoint)
[INFO|SFCManager.py:530] 2015-12-22 22:24:14,090 > egress_endpoint loading is completed(egress_endpoint)
[INFO|OpenflowHandler.py:131] 2015-12-22 22:24:14,090 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-22 22:24:14,092 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:57:3d:a4/9/00:00:00:0c:29:57:3d:a4/3/json
[DEBUG|OpenflowHandler.py:152] 2015-12-22 22:24:14,107 > [
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    }
]
[INFO|SFCManager.py:569] 2015-12-22 22:26:54,656 > validate_NS
[DEBUG|SFCManager.py:575] 2015-12-22 22:26:54,657 > load ns entry (ns_dict_0)
[INFO|SFCManager.py:596] 2015-12-22 22:26:54,658 > A network scenario is complete
[INFO|SFCManager.py:526] 2015-12-22 22:26:54,659 > ingress_endpoint loading is completed(ingress_endpoint)
[INFO|SFCManager.py:530] 2015-12-22 22:26:54,659 > egress_endpoint loading is completed(egress_endpoint)
[INFO|OpenflowHandler.py:131] 2015-12-22 22:26:54,660 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-22 22:26:54,661 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:57:3d:a4/9/00:00:00:0c:29:57:3d:a4/3/json
[DEBUG|OpenflowHandler.py:152] 2015-12-22 22:26:54,671 > [
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    }
]
[INFO|SFCManager.py:569] 2015-12-22 22:26:57,130 > validate_NS
[DEBUG|SFCManager.py:575] 2015-12-22 22:26:57,131 > load ns entry (ns_dict_0)
[INFO|SFCManager.py:596] 2015-12-22 22:26:57,132 > A network scenario is complete
[INFO|SFCManager.py:526] 2015-12-22 22:26:57,133 > ingress_endpoint loading is completed(ingress_endpoint)
[INFO|SFCManager.py:530] 2015-12-22 22:26:57,133 > egress_endpoint loading is completed(egress_endpoint)
[INFO|OpenflowHandler.py:131] 2015-12-22 22:26:57,133 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-22 22:26:57,135 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:57:3d:a4/9/00:00:00:0c:29:57:3d:a4/3/json
[DEBUG|OpenflowHandler.py:152] 2015-12-22 22:26:57,145 > [
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    }
]
[INFO|SFCManager.py:571] 2015-12-22 22:28:10,760 > validate_NS
[DEBUG|SFCManager.py:577] 2015-12-22 22:28:10,761 > load ns entry (ns_dict_0)
[INFO|SFCManager.py:598] 2015-12-22 22:28:10,762 > A network scenario is complete
[INFO|SFCManager.py:526] 2015-12-22 22:28:10,762 > ingress_endpoint loading is completed(ingress_endpoint)
[INFO|SFCManager.py:530] 2015-12-22 22:28:10,763 > egress_endpoint loading is completed(egress_endpoint)
[INFO|OpenflowHandler.py:131] 2015-12-22 22:28:10,763 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-22 22:28:10,765 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:57:3d:a4/9/00:00:00:0c:29:57:3d:a4/3/json
[DEBUG|OpenflowHandler.py:152] 2015-12-22 22:28:10,780 > [
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    }
]
[INFO|SFCManager.py:571] 2015-12-22 22:28:17,120 > validate_NS
[DEBUG|SFCManager.py:577] 2015-12-22 22:28:17,121 > load ns entry (ns_dict_0)
[INFO|SFCManager.py:598] 2015-12-22 22:28:17,122 > A network scenario is complete
[INFO|SFCManager.py:526] 2015-12-22 22:28:17,122 > ingress_endpoint loading is completed(ingress_endpoint)
[INFO|SFCManager.py:530] 2015-12-22 22:28:17,123 > egress_endpoint loading is completed(egress_endpoint)
[INFO|OpenflowHandler.py:131] 2015-12-22 22:28:17,123 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-22 22:28:17,125 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:57:3d:a4/9/00:00:00:0c:29:57:3d:a4/3/json
[DEBUG|OpenflowHandler.py:152] 2015-12-22 22:28:17,133 > [
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    }
]
[INFO|SFCManager.py:571] 2015-12-22 22:33:59,883 > validate_NS
[DEBUG|SFCManager.py:577] 2015-12-22 22:33:59,885 > load ns entry (ns_dict_0)
[INFO|SFCManager.py:598] 2015-12-22 22:33:59,886 > A network scenario is complete
[INFO|SFCManager.py:526] 2015-12-22 22:33:59,889 > ingress_endpoint loading is completed(ingress_endpoint)
[INFO|SFCManager.py:530] 2015-12-22 22:33:59,891 > egress_endpoint loading is completed(egress_endpoint)
[INFO|OpenflowHandler.py:131] 2015-12-22 22:33:59,891 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-22 22:33:59,893 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:57:3d:a4/9/00:00:00:0c:29:57:3d:a4/3/json
[DEBUG|OpenflowHandler.py:152] 2015-12-22 22:33:59,898 > [
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    }
]
[INFO|SFCManager.py:571] 2015-12-22 22:34:21,025 > validate_NS
[DEBUG|SFCManager.py:577] 2015-12-22 22:34:21,026 > load ns entry (ns_dict_0)
[INFO|SFCManager.py:598] 2015-12-22 22:34:21,027 > A network scenario is complete
[INFO|SFCManager.py:526] 2015-12-22 22:34:21,028 > ingress_endpoint loading is completed(ingress_endpoint)
[INFO|SFCManager.py:530] 2015-12-22 22:34:21,028 > egress_endpoint loading is completed(egress_endpoint)
[INFO|OpenflowHandler.py:131] 2015-12-22 22:34:21,029 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-22 22:34:21,030 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:57:3d:a4/9/00:00:00:0c:29:57:3d:a4/3/json
[DEBUG|OpenflowHandler.py:152] 2015-12-22 22:34:21,039 > [
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    }
]
[INFO|SFCManager.py:571] 2015-12-22 22:34:29,916 > validate_NS
[DEBUG|SFCManager.py:577] 2015-12-22 22:34:29,917 > load ns entry (ns_dict_0)
[INFO|SFCManager.py:598] 2015-12-22 22:34:29,918 > A network scenario is complete
[INFO|SFCManager.py:526] 2015-12-22 22:34:29,919 > ingress_endpoint loading is completed(ingress_endpoint)
[INFO|SFCManager.py:530] 2015-12-22 22:34:29,919 > egress_endpoint loading is completed(egress_endpoint)
[INFO|OpenflowHandler.py:131] 2015-12-22 22:34:29,920 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-22 22:34:29,921 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:57:3d:a4/9/00:00:00:0c:29:57:3d:a4/3/json
[DEBUG|OpenflowHandler.py:152] 2015-12-22 22:34:29,927 > [
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    }
]
[INFO|SFCManager.py:571] 2015-12-22 22:34:50,428 > validate_NS
[DEBUG|SFCManager.py:577] 2015-12-22 22:34:50,429 > load ns entry (ns_dict_0)
[INFO|SFCManager.py:598] 2015-12-22 22:34:50,431 > A network scenario is complete
[INFO|SFCManager.py:526] 2015-12-22 22:34:50,431 > ingress_endpoint loading is completed(ingress_endpoint)
[INFO|SFCManager.py:530] 2015-12-22 22:34:50,432 > egress_endpoint loading is completed(egress_endpoint)
[INFO|OpenflowHandler.py:131] 2015-12-22 22:34:50,432 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-22 22:34:50,434 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:57:3d:a4/9/00:00:00:0c:29:57:3d:a4/3/json
[DEBUG|OpenflowHandler.py:152] 2015-12-22 22:34:50,449 > [
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    }
]
[DEBUG|SFCManager.py:680] 2015-12-22 22:34:50,451 > load ns entry (ns_dict_0)
[INFO|SFCManager.py:571] 2015-12-22 22:35:17,876 > validate_NS
[DEBUG|SFCManager.py:577] 2015-12-22 22:35:17,876 > load ns entry (ns_dict_0)
[INFO|SFCManager.py:598] 2015-12-22 22:35:17,878 > A network scenario is complete
[INFO|SFCManager.py:526] 2015-12-22 22:35:17,878 > ingress_endpoint loading is completed(ingress_endpoint)
[INFO|SFCManager.py:530] 2015-12-22 22:35:17,879 > egress_endpoint loading is completed(egress_endpoint)
[INFO|OpenflowHandler.py:131] 2015-12-22 22:35:17,879 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-22 22:35:17,880 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:57:3d:a4/9/00:00:00:0c:29:57:3d:a4/3/json
[DEBUG|OpenflowHandler.py:152] 2015-12-22 22:35:17,886 > [
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    }
]
[DEBUG|SFCManager.py:680] 2015-12-22 22:35:17,892 > load ns entry (ns_dict_0)
[INFO|SFCManager.py:571] 2015-12-22 22:35:37,542 > validate_NS
[DEBUG|SFCManager.py:577] 2015-12-22 22:35:37,543 > load ns entry (ns_dict_0)
[INFO|SFCManager.py:598] 2015-12-22 22:35:37,544 > A network scenario is complete
[INFO|SFCManager.py:526] 2015-12-22 22:35:37,545 > ingress_endpoint loading is completed(ingress_endpoint)
[INFO|SFCManager.py:530] 2015-12-22 22:35:37,545 > egress_endpoint loading is completed(egress_endpoint)
[INFO|OpenflowHandler.py:131] 2015-12-22 22:35:37,545 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-22 22:35:37,547 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:57:3d:a4/9/00:00:00:0c:29:57:3d:a4/3/json
[DEBUG|OpenflowHandler.py:152] 2015-12-22 22:35:37,555 > [
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    }
]
[DEBUG|SFCManager.py:680] 2015-12-22 22:35:37,557 > load ns entry (ns_dict_0)
[INFO|SFCManager.py:571] 2015-12-22 22:35:57,730 > validate_NS
[DEBUG|SFCManager.py:577] 2015-12-22 22:35:57,731 > load ns entry (ns_dict_0)
[INFO|SFCManager.py:598] 2015-12-22 22:35:57,732 > A network scenario is complete
[INFO|SFCManager.py:526] 2015-12-22 22:35:57,733 > ingress_endpoint loading is completed(ingress_endpoint)
[INFO|SFCManager.py:530] 2015-12-22 22:35:57,733 > egress_endpoint loading is completed(egress_endpoint)
[INFO|OpenflowHandler.py:131] 2015-12-22 22:35:57,734 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-22 22:35:57,735 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:57:3d:a4/9/00:00:00:0c:29:57:3d:a4/3/json
[DEBUG|OpenflowHandler.py:152] 2015-12-22 22:35:57,743 > [
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    }
]
[DEBUG|SFCManager.py:680] 2015-12-22 22:35:57,745 > load ns entry (ns_dict_0)
[DEBUG|SFCManager.py:688] 2015-12-22 22:35:57,746 > load tenant entry (ns_dict_0)
[INFO|SFCManager.py:571] 2015-12-22 22:36:20,765 > validate_NS
[DEBUG|SFCManager.py:577] 2015-12-22 22:36:20,765 > load ns entry (ns_dict_0)
[INFO|SFCManager.py:598] 2015-12-22 22:36:20,767 > A network scenario is complete
[INFO|SFCManager.py:526] 2015-12-22 22:36:20,767 > ingress_endpoint loading is completed(ingress_endpoint)
[INFO|SFCManager.py:530] 2015-12-22 22:36:20,768 > egress_endpoint loading is completed(egress_endpoint)
[INFO|OpenflowHandler.py:131] 2015-12-22 22:36:20,768 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-22 22:36:20,769 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:57:3d:a4/9/00:00:00:0c:29:57:3d:a4/3/json
[DEBUG|OpenflowHandler.py:152] 2015-12-22 22:36:20,777 > [
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    }
]
[DEBUG|SFCManager.py:680] 2015-12-22 22:36:20,778 > load ns entry (ns_dict_0)
[DEBUG|SFCManager.py:688] 2015-12-22 22:36:20,780 > load tenant entry (ns_dict_0)
[INFO|SFCManager.py:571] 2015-12-22 23:02:06,521 > validate_NS
[DEBUG|SFCManager.py:577] 2015-12-22 23:02:06,522 > load ns entry (ns_dict_0)
[INFO|SFCManager.py:598] 2015-12-22 23:02:06,523 > A network scenario is complete
[INFO|SFCManager.py:526] 2015-12-22 23:02:06,524 > ingress_endpoint loading is completed(ingress_endpoint)
[INFO|SFCManager.py:530] 2015-12-22 23:02:06,524 > egress_endpoint loading is completed(egress_endpoint)
[INFO|OpenflowHandler.py:131] 2015-12-22 23:02:06,525 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-22 23:02:06,526 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:57:3d:a4/9/00:00:00:0c:29:57:3d:a4/3/json
[DEBUG|OpenflowHandler.py:152] 2015-12-22 23:02:06,534 > [
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    }
]
[DEBUG|SFCManager.py:680] 2015-12-22 23:02:06,536 > load ns entry (ns_dict_0)
[DEBUG|SFCManager.py:688] 2015-12-22 23:02:06,538 > load tenant entry (ns_dict_0)
[INFO|SFCManager.py:571] 2015-12-22 23:02:27,329 > validate_NS
[DEBUG|SFCManager.py:577] 2015-12-22 23:02:27,330 > load ns entry (ns_dict_0)
[INFO|SFCManager.py:598] 2015-12-22 23:02:27,331 > A network scenario is complete
[INFO|SFCManager.py:526] 2015-12-22 23:02:27,332 > ingress_endpoint loading is completed(ingress_endpoint)
[INFO|SFCManager.py:530] 2015-12-22 23:02:27,332 > egress_endpoint loading is completed(egress_endpoint)
[INFO|OpenflowHandler.py:131] 2015-12-22 23:02:27,332 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-22 23:02:27,334 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:57:3d:a4/9/00:00:00:0c:29:57:3d:a4/3/json
[DEBUG|OpenflowHandler.py:152] 2015-12-22 23:02:27,343 > [
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    }
]
[INFO|SFCManager.py:571] 2015-12-22 23:08:41,484 > validate_NS
[DEBUG|SFCManager.py:577] 2015-12-22 23:08:41,485 > load ns entry (ns_dict_0)
[INFO|SFCManager.py:598] 2015-12-22 23:08:41,487 > A network scenario is complete
[INFO|SFCManager.py:526] 2015-12-22 23:08:41,487 > ingress_endpoint loading is completed(ingress_endpoint)
[INFO|SFCManager.py:530] 2015-12-22 23:08:41,488 > egress_endpoint loading is completed(egress_endpoint)
[INFO|OpenflowHandler.py:131] 2015-12-22 23:08:41,488 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-22 23:08:41,489 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:57:3d:a4/9/00:00:00:0c:29:57:3d:a4/3/json
[DEBUG|OpenflowHandler.py:152] 2015-12-22 23:08:41,497 > [
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    }
]
[INFO|SFCManager.py:571] 2015-12-22 23:11:06,107 > validate_NS
[DEBUG|SFCManager.py:577] 2015-12-22 23:11:06,108 > load ns entry (ns_dict_0)
[INFO|SFCManager.py:598] 2015-12-22 23:11:06,110 > A network scenario is complete
[INFO|SFCManager.py:526] 2015-12-22 23:11:06,110 > ingress_endpoint loading is completed(ingress_endpoint)
[INFO|SFCManager.py:530] 2015-12-22 23:11:06,111 > egress_endpoint loading is completed(egress_endpoint)
[INFO|OpenflowHandler.py:131] 2015-12-22 23:11:06,111 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-22 23:11:06,113 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:57:3d:a4/9/00:00:00:0c:29:57:3d:a4/3/json
[DEBUG|OpenflowHandler.py:152] 2015-12-22 23:11:06,119 > [
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:57:3d:a4"
    }
]
[INFO|SFManager.py:175] 2015-12-23 00:16:04,525 > delete the service function entrie
[INFO|SFManager.py:181] 2015-12-23 00:16:04,556 > 5 service entries are deleted
[INFO|SFFManager.py:186] 2015-12-23 00:16:44,359 > delete the service function entrie
[INFO|SFFManager.py:193] 2015-12-23 00:16:44,369 > 3 service entries are deleted
[DEBUG|SFFManager.py:35] 2015-12-23 00:18:20,921 > args ['create-sff', 'Endian', '12', '13']
[DEBUG|SFFManager.py:44] 2015-12-23 00:18:20,921 > ['Endian']
[DEBUG|SFFManager.py:44] 2015-12-23 00:18:20,921 > ['Endian', '12']
[DEBUG|SFFManager.py:44] 2015-12-23 00:18:20,921 > ['Endian', '12', '13']
[DEBUG|SFFManager.py:45] 2015-12-23 00:18:20,921 > ['Endian', '12', '13']
[DEBUG|SFFManager.py:48] 2015-12-23 00:18:20,922 > [['Endian', '12', '13']]
[INFO|SFFManager.py:54] 2015-12-23 00:18:20,922 > Create a service function forwarder
[INFO|SFFManager.py:101] 2015-12-23 00:18:20,922 > validate service_function_forwarder_enty
[DEBUG|SFFManager.py:104] 2015-12-23 00:18:20,922 > SFF name is OK
[DEBUG|SFFManager.py:110] 2015-12-23 00:18:20,922 > SFF type is OK
[DEBUG|SFFManager.py:116] 2015-12-23 00:18:20,922 > SFF dpid is OK(00:00:ee:42:21:d6:e1:44)
[DEBUG|SFFManager.py:124] 2015-12-23 00:18:20,923 > connected_sf's name is OK (Endian)
[DEBUG|SFFManager.py:130] 2015-12-23 00:18:20,923 > connected_sf's ingress_port is OK (12)
[DEBUG|SFFManager.py:136] 2015-12-23 00:18:20,923 > connected_sf's egress_port is OK (13)
[DEBUG|SFFManager.py:96] 2015-12-23 00:18:20,935 > {'_id': ObjectId('567a58cc1d41c851447016de'), 'connected_sf': {'Endian': {'egress_port': '13', 'name': 'Endian', 'ingress_port': '12'}}, 'type': 'general', 'name': 'one-box-br-int', 'dpid': '00:00:ee:42:21:d6:e1:44'}
[INFO|SFFManager.py:97] 2015-12-23 00:18:20,936 > The service function creation is completed
[INFO|SFFManager.py:189] 2015-12-23 00:21:16,920 > delete the service function entrie
[INFO|SFFManager.py:196] 2015-12-23 00:21:16,921 > 1 service entries are deleted
[DEBUG|SFFManager.py:35] 2015-12-23 00:21:21,450 > args ['create-sff', 'Endian', '12', '13']
[DEBUG|SFFManager.py:44] 2015-12-23 00:21:21,450 > ['Endian']
[DEBUG|SFFManager.py:44] 2015-12-23 00:21:21,450 > ['Endian', '12']
[DEBUG|SFFManager.py:44] 2015-12-23 00:21:21,450 > ['Endian', '12', '13']
[DEBUG|SFFManager.py:45] 2015-12-23 00:21:21,450 > ['Endian', '12', '13']
[DEBUG|SFFManager.py:48] 2015-12-23 00:21:21,451 > [['Endian', '12', '13']]
[INFO|SFFManager.py:54] 2015-12-23 00:21:21,451 > Create a service function forwarder
[INFO|SFFManager.py:104] 2015-12-23 00:21:21,451 > validate entry
[DEBUG|SFFManager.py:107] 2015-12-23 00:21:21,451 > SFF name is OK
[DEBUG|SFFManager.py:113] 2015-12-23 00:21:21,451 > SFF type is OK
[DEBUG|SFFManager.py:119] 2015-12-23 00:21:21,451 > SFF dpid is OK(00:00:ee:42:21:d6:e1:44)
[DEBUG|SFFManager.py:127] 2015-12-23 00:21:21,451 > connected_sf's name is OK (Endian)
[DEBUG|SFFManager.py:133] 2015-12-23 00:21:21,451 > connected_sf's ingress_port is OK (12)
[DEBUG|SFFManager.py:139] 2015-12-23 00:21:21,452 > connected_sf's egress_port is OK (13)
[DEBUG|SFFManager.py:99] 2015-12-23 00:21:21,453 > {'_id': ObjectId('567a59811d41c851f89b622d'), 'connected_sf': {'Endian': {'egress_port': '13', 'name': 'Endian', 'ingress_port': '12'}}, 'type': 'general', 'name': 'one-box-br-int', 'dpid': '00:00:ee:42:21:d6:e1:44'}
[INFO|SFFManager.py:100] 2015-12-23 00:21:21,453 > The service function creation is completed
[INFO|EPManager.py:45] 2015-12-23 00:23:03,520 > Create a service function forwarder
[INFO|EPManager.py:88] 2015-12-23 00:23:03,520 > validate service_function_forwarder_enty
[DEBUG|EPManager.py:91] 2015-12-23 00:23:03,521 > EP name is OK
[DEBUG|EPManager.py:97] 2015-12-23 00:23:03,521 > EP dpid is OK
[DEBUG|EPManager.py:103] 2015-12-23 00:23:03,521 > EP dpid is OK
[DEBUG|EPManager.py:83] 2015-12-23 00:23:03,544 > {'attached_switch': {'attached_port': '1', 'dpid': '00:00:00:0c:29:7d:49:ec'}, 'vlan': '0', 'name': 'br-office-end-point', '_id': ObjectId('567a59e71d41c8523cb79b7f')}
[INFO|EPManager.py:84] 2015-12-23 00:23:03,545 > the end point is completed
[INFO|EPManager.py:155] 2015-12-23 00:24:17,990 > delete the end point entrie
[INFO|EPManager.py:162] 2015-12-23 00:24:17,991 > 6 end point entries are deleted
[INFO|EPManager.py:45] 2015-12-23 00:24:26,444 > Create a service function forwarder
[INFO|EPManager.py:88] 2015-12-23 00:24:26,444 > validate service_function_forwarder_enty
[DEBUG|EPManager.py:91] 2015-12-23 00:24:26,444 > EP name is OK
[DEBUG|EPManager.py:97] 2015-12-23 00:24:26,444 > EP dpid is OK
[DEBUG|EPManager.py:103] 2015-12-23 00:24:26,445 > EP dpid is OK
[DEBUG|EPManager.py:83] 2015-12-23 00:24:26,446 > {'attached_switch': {'attached_port': '1', 'dpid': '00:00:00:0c:29:7d:49:ec'}, 'vlan': '0', 'name': 'br-office-end-point', '_id': ObjectId('567a5a3a1d41c852904771e2')}
[INFO|EPManager.py:84] 2015-12-23 00:24:26,447 > the end point is completed
[INFO|EPManager.py:155] 2015-12-23 00:28:24,083 > delete the end point entrie
[INFO|EPManager.py:162] 2015-12-23 00:28:24,084 > 1 end point entries are deleted
[INFO|EPManager.py:45] 2015-12-23 00:28:26,038 > Create a service function forwarder
[INFO|EPManager.py:88] 2015-12-23 00:28:26,039 > validate service_function_forwarder_enty
[DEBUG|EPManager.py:91] 2015-12-23 00:28:26,039 > EP name is OK
[DEBUG|EPManager.py:97] 2015-12-23 00:28:26,039 > EP dpid is OK
[DEBUG|EPManager.py:103] 2015-12-23 00:28:26,039 > EP dpid is OK
[DEBUG|EPManager.py:83] 2015-12-23 00:28:26,045 > {'attached_switch': {'attached_port': '1', 'dpid': '00:00:00:0c:29:7d:49:ec'}, 'vlan': '0', 'name': 'br-office-end-point', '_id': ObjectId('567a5b2a1d41c8534dc0e271')}
[INFO|EPManager.py:84] 2015-12-23 00:28:26,045 > the end point is completed
[INFO|EPManager.py:45] 2015-12-23 00:30:02,981 > Create a service function forwarder
[INFO|EPManager.py:88] 2015-12-23 00:30:02,981 > validate service_function_forwarder_enty
[DEBUG|EPManager.py:91] 2015-12-23 00:30:02,982 > EP name is OK
[DEBUG|EPManager.py:97] 2015-12-23 00:30:02,982 > EP dpid is OK
[DEBUG|EPManager.py:103] 2015-12-23 00:30:02,982 > EP dpid is OK
[DEBUG|EPManager.py:83] 2015-12-23 00:30:02,984 > {'attached_switch': {'attached_port': '1', 'dpid': '00:00:00:0c:29:7d:49:f6'}, 'vlan': '0', 'name': 'br-server-end-point', '_id': ObjectId('567a5b8a1d41c853a3a24f57')}
[INFO|EPManager.py:84] 2015-12-23 00:30:02,984 > the end point is completed
[INFO|NSManager.py:40] 2015-12-23 00:34:55,597 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-23 00:34:55,598 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-23 00:34:55,598 > name is ok
[DEBUG|NSManager.py:106] 2015-12-23 00:34:55,598 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-23 00:34:55,599 > egress_endpoint is OK
[DEBUG|NSManager.py:118] 2015-12-23 00:34:55,599 > vnffg is OK
[DEBUG|NSManager.py:91] 2015-12-23 00:34:55,601 > {'vnffg': 'NS2', 'egress_endpoint': 'br-office-end-point', 'name': 'bypass', 'ingress_endpoint': 'br-office-end-point', '_id': ObjectId('567a5caf1d41c85470a59d0a'), 'tenant': 'test'}
[INFO|NSManager.py:92] 2015-12-23 00:34:55,601 > The network service insertion is completed
[INFO|NSManager.py:169] 2015-12-23 00:35:07,154 > delete the network serivce entrie
[INFO|NSManager.py:175] 2015-12-23 00:35:07,155 > 13 entries are deleted
[INFO|NSManager.py:40] 2015-12-23 00:35:09,228 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-23 00:35:09,313 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-23 00:35:09,313 > name is ok
[DEBUG|NSManager.py:106] 2015-12-23 00:35:09,313 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-23 00:35:09,314 > egress_endpoint is OK
[DEBUG|NSManager.py:118] 2015-12-23 00:35:09,314 > vnffg is OK
[DEBUG|NSManager.py:91] 2015-12-23 00:35:09,316 > {'vnffg': 'NS2', 'egress_endpoint': 'br-office-end-point', 'name': 'bypass', 'ingress_endpoint': 'br-office-end-point', '_id': ObjectId('567a5cbd1d41c8548da46534'), 'tenant': 'test'}
[INFO|NSManager.py:92] 2015-12-23 00:35:09,316 > The network service insertion is completed
[INFO|NSManager.py:169] 2015-12-23 00:35:14,039 > delete the network serivce entrie
[INFO|NSManager.py:175] 2015-12-23 00:35:14,041 > 1 entries are deleted
[INFO|NSManager.py:40] 2015-12-23 00:35:19,602 > create network service entry [ex: firewall, NAT, DPI]
[ERROR|NSManager.py:61] 2015-12-23 00:35:19,602 > please input the name of the vnffg  [ex: custumer A, custumer B] : 
[INFO|NSManager.py:40] 2015-12-23 00:36:15,044 > create network service entry [ex: firewall, NAT, DPI]
[ERROR|NSManager.py:67] 2015-12-23 00:36:15,045 > please input the name of the tenant  [ex: custumer A, custumer B] : 
[INFO|NSManager.py:40] 2015-12-23 00:36:33,553 > create network service entry [ex: firewall, NAT, DPI]
[ERROR|NSManager.py:67] 2015-12-23 00:36:33,553 > please input the name of the tenant  [ex: custumer A, custumer B] : 
[INFO|NSManager.py:171] 2015-12-23 00:37:19,013 > delete the network serivce entrie
[INFO|NSManager.py:177] 2015-12-23 00:37:19,014 > 0 entries are deleted
[INFO|NSManager.py:40] 2015-12-23 00:37:20,572 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:98] 2015-12-23 00:37:20,573 > validate_entry
[DEBUG|NSManager.py:102] 2015-12-23 00:37:20,573 > name is ok
[DEBUG|NSManager.py:108] 2015-12-23 00:37:20,573 > ingress_endpoint is OK
[DEBUG|NSManager.py:114] 2015-12-23 00:37:20,573 > egress_endpoint is OK
[DEBUG|NSManager.py:93] 2015-12-23 00:37:20,575 > {'vnffg': None, 'egress_endpoint': 'br-office-end-point', 'name': 'bypass', 'ingress_endpoint': 'br-office-end-point', '_id': ObjectId('567a5d401d41c8553ce36e20'), 'tenant': None}
[INFO|NSManager.py:94] 2015-12-23 00:37:20,575 > The network service insertion is completed
[INFO|NSManager.py:173] 2015-12-23 00:38:08,588 > delete the network serivce entrie
[INFO|NSManager.py:179] 2015-12-23 00:38:08,589 > 1 entries are deleted
[INFO|NSManager.py:40] 2015-12-23 00:38:10,406 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:100] 2015-12-23 00:38:10,407 > validate_entry
[DEBUG|NSManager.py:104] 2015-12-23 00:38:10,407 > name is ok
[DEBUG|NSManager.py:110] 2015-12-23 00:38:10,407 > ingress_endpoint is OK
[DEBUG|NSManager.py:116] 2015-12-23 00:38:10,407 > egress_endpoint is OK
[DEBUG|NSManager.py:95] 2015-12-23 00:38:10,409 > {'vnffg': '', 'egress_endpoint': 'br-office-end-point', 'name': 'bypass', 'ingress_endpoint': 'br-office-end-point', '_id': ObjectId('567a5d721d41c855811bd83f'), 'tenant': 'default'}
[INFO|NSManager.py:96] 2015-12-23 00:38:10,409 > The network service insertion is completed
[INFO|SFCManager.py:571] 2015-12-23 00:43:13,040 > validate_NS
[ERROR|SFCManager.py:580] 2015-12-23 00:43:13,042 > Faild to load ns entry (None)
[INFO|SFCManager.py:571] 2015-12-23 00:43:16,236 > validate_NS
[DEBUG|SFCManager.py:577] 2015-12-23 00:43:16,242 > load ns entry (bypass)
[INFO|SFCManager.py:598] 2015-12-23 00:43:16,249 > A network scenario is complete
[INFO|SFCManager.py:571] 2015-12-23 00:43:53,195 > validate_NS
[DEBUG|SFCManager.py:577] 2015-12-23 00:43:53,196 > load ns entry (bypass)
[INFO|SFCManager.py:598] 2015-12-23 00:43:53,197 > A network scenario is complete
[INFO|SFCManager.py:526] 2015-12-23 00:43:53,198 > ingress_endpoint loading is completed(br-office-end-point)
[INFO|SFCManager.py:530] 2015-12-23 00:43:53,198 > egress_endpoint loading is completed(br-office-end-point)
[INFO|OpenflowHandler.py:131] 2015-12-23 00:43:53,198 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-23 00:43:53,200 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:ec/1/00:00:00:0c:29:7d:49:ec/1/json
[DEBUG|OpenflowHandler.py:156] 2015-12-23 00:43:53,209 > There is no route for request info
[ERROR|SFCManager.py:661] 2015-12-23 00:43:53,209 > service_path_entry None
[INFO|SFCManager.py:571] 2015-12-23 00:48:18,085 > validate_NS
[DEBUG|SFCManager.py:577] 2015-12-23 00:48:18,086 > load ns entry (bypass)
[INFO|SFCManager.py:598] 2015-12-23 00:48:18,088 > A network scenario is complete
[INFO|SFCManager.py:526] 2015-12-23 00:48:18,089 > ingress_endpoint loading is completed(br-office-end-point)
[INFO|SFCManager.py:530] 2015-12-23 00:48:18,091 > egress_endpoint loading is completed(br-office-end-point)
[INFO|OpenflowHandler.py:131] 2015-12-23 00:48:18,091 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-23 00:48:18,095 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:ec/1/00:00:00:0c:29:7d:49:ec/1/json
[DEBUG|OpenflowHandler.py:156] 2015-12-23 00:48:18,101 > There is no route for request info
[ERROR|SFCManager.py:661] 2015-12-23 00:48:18,102 > service_path_entry None
[INFO|SFCManager.py:575] 2015-12-23 00:50:07,963 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-23 00:50:07,964 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-23 00:50:07,965 > A network scenario check is complete
[INFO|SFCManager.py:526] 2015-12-23 00:50:07,966 > ingress_endpoint loading is completed(br-office-end-point)
[INFO|SFCManager.py:530] 2015-12-23 00:50:07,967 > egress_endpoint loading is completed(br-office-end-point)
[INFO|OpenflowHandler.py:131] 2015-12-23 00:50:07,967 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-23 00:50:07,969 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:ec/1/00:00:00:0c:29:7d:49:ec/1/json
[DEBUG|OpenflowHandler.py:156] 2015-12-23 00:50:07,972 > There is no route for request info
[ERROR|SFCManager.py:665] 2015-12-23 00:50:07,972 > service_path_entry None
[INFO|NSManager.py:40] 2015-12-23 00:50:58,403 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:100] 2015-12-23 00:50:58,404 > validate_entry
[DEBUG|NSManager.py:104] 2015-12-23 00:50:58,404 > name is ok
[DEBUG|NSManager.py:110] 2015-12-23 00:50:58,404 > ingress_endpoint is OK
[DEBUG|NSManager.py:116] 2015-12-23 00:50:58,404 > egress_endpoint is OK
[ERROR|NSManager.py:88] 2015-12-23 00:50:58,405 > already, the service function is exist
[INFO|NSManager.py:173] 2015-12-23 00:51:05,621 > delete the network serivce entrie
[INFO|NSManager.py:179] 2015-12-23 00:51:05,625 > 1 entries are deleted
[INFO|NSManager.py:40] 2015-12-23 00:51:07,816 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:100] 2015-12-23 00:51:07,816 > validate_entry
[DEBUG|NSManager.py:104] 2015-12-23 00:51:07,816 > name is ok
[DEBUG|NSManager.py:110] 2015-12-23 00:51:07,816 > ingress_endpoint is OK
[DEBUG|NSManager.py:116] 2015-12-23 00:51:07,817 > egress_endpoint is OK
[DEBUG|NSManager.py:95] 2015-12-23 00:51:07,818 > {'vnffg': None, 'egress_endpoint': 'br-server-end-point', 'name': 'bypass', 'ingress_endpoint': 'br-office-end-point', '_id': ObjectId('567a607b1d41c857fd8e0bcd'), 'tenant': 'default'}
[INFO|NSManager.py:96] 2015-12-23 00:51:07,819 > The network service insertion is completed
[INFO|SFCManager.py:575] 2015-12-23 00:51:15,544 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-23 00:51:15,545 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-23 00:51:15,547 > A network scenario check is complete
[INFO|SFCManager.py:526] 2015-12-23 00:51:15,547 > ingress_endpoint loading is completed(br-office-end-point)
[INFO|SFCManager.py:530] 2015-12-23 00:51:15,548 > egress_endpoint loading is completed(br-server-end-point)
[INFO|OpenflowHandler.py:131] 2015-12-23 00:51:15,548 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-23 00:51:15,549 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:ec/1/00:00:00:0c:29:7d:49:f6/1/json
[DEBUG|OpenflowHandler.py:156] 2015-12-23 00:51:15,602 > There is no route for request info
[ERROR|SFCManager.py:665] 2015-12-23 00:51:15,604 > service_path_entry None
[INFO|SFCManager.py:575] 2015-12-23 00:52:57,162 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-23 00:52:57,163 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-23 00:52:57,164 > A network scenario check is complete
[INFO|SFCManager.py:526] 2015-12-23 00:52:57,164 > ingress_endpoint loading is completed(br-office-end-point)
[INFO|SFCManager.py:530] 2015-12-23 00:52:57,165 > egress_endpoint loading is completed(br-server-end-point)
[INFO|OpenflowHandler.py:131] 2015-12-23 00:52:57,165 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-23 00:52:57,167 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:ec/1/00:00:00:0c:29:7d:49:f6/1/json
[DEBUG|OpenflowHandler.py:156] 2015-12-23 00:52:57,174 > There is no route for request info
[ERROR|SFCManager.py:665] 2015-12-23 00:52:57,174 > service_path_entry None
[INFO|SFCManager.py:575] 2015-12-23 00:53:54,729 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-23 00:53:54,730 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-23 00:53:54,731 > A network scenario check is complete
[INFO|SFCManager.py:526] 2015-12-23 00:53:54,732 > ingress_endpoint loading is completed(br-office-end-point)
[INFO|SFCManager.py:530] 2015-12-23 00:53:54,732 > egress_endpoint loading is completed(br-server-end-point)
[INFO|OpenflowHandler.py:131] 2015-12-23 00:53:54,733 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-23 00:53:54,735 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:ec/1/00:00:00:0c:29:7d:49:f6/1/json
[DEBUG|OpenflowHandler.py:156] 2015-12-23 00:53:54,742 > There is no route for request info
[ERROR|SFCManager.py:665] 2015-12-23 00:53:54,742 > service_path_entry None
[INFO|SFCManager.py:575] 2015-12-23 00:57:09,261 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-23 00:57:09,262 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-23 00:57:09,263 > A network scenario check is complete
[INFO|SFCManager.py:526] 2015-12-23 00:57:09,264 > ingress_endpoint loading is completed(br-office-end-point)
[INFO|SFCManager.py:530] 2015-12-23 00:57:09,264 > egress_endpoint loading is completed(br-server-end-point)
[INFO|OpenflowHandler.py:131] 2015-12-23 00:57:09,265 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-23 00:57:09,266 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:ec/1/00:00:00:0c:29:7d:49:f6/1/json
[DEBUG|OpenflowHandler.py:156] 2015-12-23 00:57:09,270 > There is no route for request info
[ERROR|SFCManager.py:665] 2015-12-23 00:57:09,270 > service_path_entry None
[INFO|SFCManager.py:575] 2015-12-23 01:01:57,480 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-23 01:01:57,482 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-23 01:01:57,486 > A network scenario check is complete
[INFO|SFCManager.py:526] 2015-12-23 01:01:57,487 > ingress_endpoint loading is completed(br-office-end-point)
[INFO|SFCManager.py:530] 2015-12-23 01:01:57,489 > egress_endpoint loading is completed(br-server-end-point)
[INFO|OpenflowHandler.py:131] 2015-12-23 01:01:57,489 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-23 01:01:57,491 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:ec/1/00:00:00:0c:29:7d:49:f6/1/json
[DEBUG|OpenflowHandler.py:156] 2015-12-23 01:01:57,515 > There is no route for request info
[ERROR|SFCManager.py:665] 2015-12-23 01:01:57,515 > service_path_entry None
[INFO|EPManager.py:155] 2015-12-23 01:09:42,600 > delete the end point entrie
[INFO|EPManager.py:162] 2015-12-23 01:09:42,602 > 2 end point entries are deleted
[INFO|EPManager.py:45] 2015-12-23 01:11:31,724 > Create a service function forwarder
[INFO|EPManager.py:88] 2015-12-23 01:11:31,724 > validate service_function_forwarder_enty
[DEBUG|EPManager.py:91] 2015-12-23 01:11:31,724 > EP name is OK
[DEBUG|EPManager.py:97] 2015-12-23 01:11:31,725 > EP dpid is OK
[DEBUG|EPManager.py:103] 2015-12-23 01:11:31,725 > EP dpid is OK
[DEBUG|EPManager.py:83] 2015-12-23 01:11:31,729 > {'attached_switch': {'attached_port': '18', 'dpid': '00:00:ee:42:21:d6:e1:44'}, 'vlan': '0', 'name': 'br-office-end-point', '_id': ObjectId('567a65431d41c85b57a06ace')}
[INFO|EPManager.py:84] 2015-12-23 01:11:31,729 > the end point is completed
[INFO|EPManager.py:45] 2015-12-23 01:11:40,968 > Create a service function forwarder
[INFO|EPManager.py:88] 2015-12-23 01:11:40,968 > validate service_function_forwarder_enty
[DEBUG|EPManager.py:91] 2015-12-23 01:11:40,968 > EP name is OK
[DEBUG|EPManager.py:97] 2015-12-23 01:11:40,968 > EP dpid is OK
[DEBUG|EPManager.py:103] 2015-12-23 01:11:40,969 > EP dpid is OK
[DEBUG|EPManager.py:83] 2015-12-23 01:11:40,970 > {'attached_switch': {'attached_port': '19', 'dpid': '00:00:ee:42:21:d6:e1:44'}, 'vlan': '0', 'name': 'br-server-end-point', '_id': ObjectId('567a654c1d41c85b620ea52b')}
[INFO|EPManager.py:84] 2015-12-23 01:11:40,970 > the end point is completed
[INFO|SFCManager.py:575] 2015-12-23 01:12:40,190 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-23 01:12:40,192 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-23 01:12:40,194 > A network scenario check is complete
[INFO|SFCManager.py:526] 2015-12-23 01:12:40,194 > ingress_endpoint loading is completed(br-office-end-point)
[INFO|SFCManager.py:530] 2015-12-23 01:12:40,195 > egress_endpoint loading is completed(br-server-end-point)
[INFO|OpenflowHandler.py:131] 2015-12-23 01:12:40,195 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-23 01:12:40,197 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/18/00:00:ee:42:21:d6:e1:44/19/json
[DEBUG|OpenflowHandler.py:152] 2015-12-23 01:12:40,203 > [
    {
        "port": {
            "length": 4,
            "portNumber": 18,
            "shortPortNumber": 18
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 19,
            "shortPortNumber": 19
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|SFCManager.py:575] 2015-12-23 01:14:14,958 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-23 01:14:14,959 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-23 01:14:14,960 > A network scenario check is complete
[INFO|SFCManager.py:526] 2015-12-23 01:14:14,961 > ingress_endpoint loading is completed(br-office-end-point)
[INFO|SFCManager.py:530] 2015-12-23 01:14:14,961 > egress_endpoint loading is completed(br-server-end-point)
[INFO|OpenflowHandler.py:131] 2015-12-23 01:14:14,961 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-23 01:14:14,963 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/18/00:00:ee:42:21:d6:e1:44/19/json
[DEBUG|OpenflowHandler.py:152] 2015-12-23 01:14:14,967 > [
    {
        "port": {
            "length": 4,
            "portNumber": 18,
            "shortPortNumber": 18
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 19,
            "shortPortNumber": 19
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[DEBUG|SFCManager.py:686] 2015-12-23 01:14:14,970 > load ns entry (bypass)
[DEBUG|SFCManager.py:694] 2015-12-23 01:14:14,972 > load tenant entry (bypass)
[INFO|SFCManager.py:575] 2015-12-23 01:15:13,512 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-23 01:15:13,513 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-23 01:15:13,514 > A network scenario check is complete
[INFO|SFCManager.py:526] 2015-12-23 01:15:13,515 > ingress_endpoint loading is completed(br-office-end-point)
[INFO|SFCManager.py:530] 2015-12-23 01:15:13,515 > egress_endpoint loading is completed(br-server-end-point)
[INFO|OpenflowHandler.py:131] 2015-12-23 01:15:13,516 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-23 01:15:13,517 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/18/00:00:ee:42:21:d6:e1:44/19/json
[DEBUG|OpenflowHandler.py:152] 2015-12-23 01:15:13,520 > [
    {
        "port": {
            "length": 4,
            "portNumber": 18,
            "shortPortNumber": 18
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 19,
            "shortPortNumber": 19
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[DEBUG|SFCManager.py:686] 2015-12-23 01:15:13,522 > load ns entry (bypass)
[DEBUG|SFCManager.py:694] 2015-12-23 01:15:13,525 > load tenant entry (bypass)
[INFO|SFCManager.py:575] 2015-12-23 01:16:06,306 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-23 01:16:06,307 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-23 01:16:06,309 > A network scenario check is complete
[INFO|SFCManager.py:526] 2015-12-23 01:16:06,309 > ingress_endpoint loading is completed(br-office-end-point)
[INFO|SFCManager.py:530] 2015-12-23 01:16:06,310 > egress_endpoint loading is completed(br-server-end-point)
[INFO|OpenflowHandler.py:131] 2015-12-23 01:16:06,310 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-23 01:16:06,311 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/18/00:00:ee:42:21:d6:e1:44/19/json
[DEBUG|OpenflowHandler.py:152] 2015-12-23 01:16:06,314 > [
    {
        "port": {
            "length": 4,
            "portNumber": 18,
            "shortPortNumber": 18
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 19,
            "shortPortNumber": 19
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[DEBUG|SFCManager.py:686] 2015-12-23 01:16:06,317 > load ns entry (bypass)
[DEBUG|SFCManager.py:694] 2015-12-23 01:16:06,320 > load tenant entry (bypass)
[INFO|SFCManager.py:575] 2015-12-23 01:16:51,132 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-23 01:16:51,133 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-23 01:16:51,135 > A network scenario check is complete
[INFO|SFCManager.py:526] 2015-12-23 01:16:51,135 > ingress_endpoint loading is completed(br-office-end-point)
[INFO|SFCManager.py:530] 2015-12-23 01:16:51,136 > egress_endpoint loading is completed(br-server-end-point)
[INFO|OpenflowHandler.py:131] 2015-12-23 01:16:51,136 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-23 01:16:51,138 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/18/00:00:ee:42:21:d6:e1:44/19/json
[DEBUG|OpenflowHandler.py:152] 2015-12-23 01:16:51,144 > [
    {
        "port": {
            "length": 4,
            "portNumber": 18,
            "shortPortNumber": 18
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 19,
            "shortPortNumber": 19
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[DEBUG|SFCManager.py:686] 2015-12-23 01:16:51,146 > load ns entry (bypass)
[DEBUG|SFCManager.py:694] 2015-12-23 01:16:51,148 > load tenant entry (bypass)
[INFO|SFCManager.py:575] 2015-12-23 01:18:12,976 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-23 01:18:12,977 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-23 01:18:12,979 > A network scenario check is complete
[INFO|SFCManager.py:526] 2015-12-23 01:18:12,979 > ingress_endpoint loading is completed(br-office-end-point)
[INFO|SFCManager.py:530] 2015-12-23 01:18:12,980 > egress_endpoint loading is completed(br-server-end-point)
[INFO|OpenflowHandler.py:131] 2015-12-23 01:18:12,980 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-23 01:18:12,982 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/18/00:00:ee:42:21:d6:e1:44/19/json
[DEBUG|OpenflowHandler.py:152] 2015-12-23 01:18:12,987 > [
    {
        "port": {
            "length": 4,
            "portNumber": 18,
            "shortPortNumber": 18
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 19,
            "shortPortNumber": 19
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[DEBUG|SFCManager.py:686] 2015-12-23 01:18:12,992 > load ns entry (bypass)
[DEBUG|SFCManager.py:694] 2015-12-23 01:18:12,993 > load tenant entry (bypass)
[INFO|SFCManager.py:575] 2015-12-23 01:18:50,642 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-23 01:18:50,643 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-23 01:18:50,644 > A network scenario check is complete
[INFO|SFCManager.py:526] 2015-12-23 01:18:50,645 > ingress_endpoint loading is completed(br-office-end-point)
[INFO|SFCManager.py:530] 2015-12-23 01:18:50,645 > egress_endpoint loading is completed(br-server-end-point)
[INFO|OpenflowHandler.py:131] 2015-12-23 01:18:50,645 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-23 01:18:50,647 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/18/00:00:ee:42:21:d6:e1:44/19/json
[DEBUG|OpenflowHandler.py:152] 2015-12-23 01:18:50,650 > [
    {
        "port": {
            "length": 4,
            "portNumber": 18,
            "shortPortNumber": 18
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 19,
            "shortPortNumber": 19
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[DEBUG|SFCManager.py:686] 2015-12-23 01:18:50,652 > load ns entry (bypass)
[DEBUG|SFCManager.py:694] 2015-12-23 01:18:50,654 > load tenant entry (bypass)
[INFO|SFCManager.py:575] 2015-12-23 01:19:03,962 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-23 01:19:03,965 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-23 01:19:03,969 > A network scenario check is complete
[INFO|SFCManager.py:526] 2015-12-23 01:19:03,970 > ingress_endpoint loading is completed(br-office-end-point)
[INFO|SFCManager.py:530] 2015-12-23 01:19:03,971 > egress_endpoint loading is completed(br-server-end-point)
[INFO|OpenflowHandler.py:131] 2015-12-23 01:19:03,971 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-23 01:19:03,973 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/18/00:00:ee:42:21:d6:e1:44/19/json
[DEBUG|OpenflowHandler.py:152] 2015-12-23 01:19:03,978 > [
    {
        "port": {
            "length": 4,
            "portNumber": 18,
            "shortPortNumber": 18
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 19,
            "shortPortNumber": 19
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[DEBUG|SFCManager.py:686] 2015-12-23 01:19:03,980 > load ns entry (bypass)
[DEBUG|SFCManager.py:694] 2015-12-23 01:19:03,981 > load tenant entry (bypass)
[INFO|OpenflowHandler.py:95] 2015-12-23 01:19:03,982 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-23 01:19:03,982 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-23 01:19:03,983 > request_curl_post_data: {"name": "bypass_default_1", "actions": "output=19", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 18}
[DEBUG|OpenflowHandler.py:126] 2015-12-23 01:19:04,131 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-23 01:19:04,131 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-23 01:19:04,131 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-23 01:19:04,132 > request_curl_post_data: {"name": "bypass_default_1_reverse", "actions": "output=18", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 19}
[DEBUG|OpenflowHandler.py:126] 2015-12-23 01:19:04,140 > {
    "status": "Entry pushed"
}
[INFO|SFCManager.py:575] 2015-12-23 23:03:14,257 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-23 23:03:14,261 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-23 23:03:14,263 > A network scenario check is complete
[INFO|SFCManager.py:526] 2015-12-23 23:03:14,263 > ingress_endpoint loading is completed(br-office-end-point)
[INFO|SFCManager.py:530] 2015-12-23 23:03:14,264 > egress_endpoint loading is completed(br-server-end-point)
[INFO|OpenflowHandler.py:131] 2015-12-23 23:03:14,265 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-23 23:03:14,268 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/18/00:00:ee:42:21:d6:e1:44/19/json
[DEBUG|OpenflowHandler.py:152] 2015-12-23 23:03:14,271 > [
    {
        "port": {
            "length": 4,
            "portNumber": 18,
            "shortPortNumber": 18
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 19,
            "shortPortNumber": 19
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[DEBUG|SFCManager.py:686] 2015-12-23 23:03:14,273 > load ns entry (bypass)
[DEBUG|SFCManager.py:694] 2015-12-23 23:03:14,274 > load tenant entry (bypass)
[INFO|OpenflowHandler.py:95] 2015-12-23 23:03:14,278 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-23 23:03:14,278 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-23 23:03:14,278 > request_curl_post_data: {"name": "bypass_default_1", "actions": "output=19", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 18}
[DEBUG|OpenflowHandler.py:126] 2015-12-23 23:03:14,351 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-23 23:03:14,351 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-23 23:03:14,352 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-23 23:03:14,352 > request_curl_post_data: {"name": "bypass_default_1_reverse", "actions": "output=18", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 19}
[DEBUG|OpenflowHandler.py:126] 2015-12-23 23:03:14,356 > {
    "status": "Entry pushed"
}
[INFO|SFCManager.py:575] 2015-12-27 16:39:04,819 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-27 16:39:04,883 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-27 16:39:04,960 > A network scenario check is complete
[INFO|SFCManager.py:526] 2015-12-27 16:39:04,961 > ingress_endpoint loading is completed(br-office-end-point)
[INFO|SFCManager.py:530] 2015-12-27 16:39:04,962 > egress_endpoint loading is completed(br-server-end-point)
[INFO|OpenflowHandler.py:131] 2015-12-27 16:39:04,962 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-27 16:39:04,963 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/18/00:00:ee:42:21:d6:e1:44/19/json
[DEBUG|OpenflowHandler.py:152] 2015-12-27 16:39:04,966 > [
    {
        "port": {
            "length": 4,
            "portNumber": 18,
            "shortPortNumber": 18
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 19,
            "shortPortNumber": 19
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[DEBUG|SFCManager.py:686] 2015-12-27 16:39:04,968 > load ns entry (bypass)
[DEBUG|SFCManager.py:694] 2015-12-27 16:39:04,969 > load tenant entry (bypass)
[INFO|OpenflowHandler.py:95] 2015-12-27 16:39:04,970 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-27 16:39:04,970 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-27 16:39:04,971 > request_curl_post_data: {"name": "bypass_default_1", "actions": "output=19", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 18}
[DEBUG|OpenflowHandler.py:126] 2015-12-27 16:39:04,975 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-27 16:39:04,975 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-27 16:39:04,975 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-27 16:39:04,976 > request_curl_post_data: {"name": "bypass_default_1_reverse", "actions": "output=18", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 19}
[DEBUG|OpenflowHandler.py:126] 2015-12-27 16:39:04,980 > {
    "status": "Entry pushed"
}
[INFO|SFCManager.py:574] 2015-12-28 00:06:07,061 > validate_NS
[DEBUG|SFCManager.py:580] 2015-12-28 00:06:07,062 > load ns entry (bypass)
[INFO|SFCManager.py:601] 2015-12-28 00:06:07,063 > A network scenario check is complete
[INFO|SFCManager.py:525] 2015-12-28 00:06:07,064 > ingress_endpoint loading is completed(br-office-end-point)
[INFO|SFCManager.py:529] 2015-12-28 00:06:07,065 > egress_endpoint loading is completed(br-server-end-point)
[INFO|OpenflowHandler.py:131] 2015-12-28 00:06:07,065 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 00:06:07,068 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/18/00:00:ee:42:21:d6:e1:44/19/json
[CRITICAL|OpenflowHandler.py:142] 2015-12-28 00:06:07,070 > couldn't connect to host
[ERROR|SFCManager.py:664] 2015-12-28 00:06:07,071 > service_path_entry None
[DEBUG|SFCManager.py:685] 2015-12-28 00:06:07,072 > load ns entry (bypass)
[DEBUG|SFCManager.py:693] 2015-12-28 00:06:07,074 > load tenant entry (bypass)
[INFO|EPManager.py:155] 2015-12-28 20:18:43,395 > delete the end point entrie
[INFO|EPManager.py:162] 2015-12-28 20:18:43,473 > 2 end point entries are deleted
[INFO|EPManager.py:45] 2015-12-28 20:20:55,891 > Create a service function forwarder
[INFO|EPManager.py:88] 2015-12-28 20:20:55,891 > validate service_function_forwarder_enty
[DEBUG|EPManager.py:91] 2015-12-28 20:20:55,891 > EP name is OK
[DEBUG|EPManager.py:97] 2015-12-28 20:20:55,891 > EP dpid is OK
[DEBUG|EPManager.py:103] 2015-12-28 20:20:55,891 > EP dpid is OK
[DEBUG|EPManager.py:83] 2015-12-28 20:20:55,924 > {'attached_switch': {'attached_port': '4', 'dpid': '00:00:00:0c:29:7d:49:f6'}, 'vlan': None, 'name': 'br-server-ep', '_id': ObjectId('56820a271d41c84957506807')}
[INFO|EPManager.py:84] 2015-12-28 20:20:55,924 > the end point is completed
[INFO|EPManager.py:155] 2015-12-28 20:21:45,787 > delete the end point entrie
[INFO|EPManager.py:162] 2015-12-28 20:21:45,788 > 1 end point entries are deleted
[INFO|EPManager.py:45] 2015-12-28 20:21:55,515 > Create a service function forwarder
[INFO|EPManager.py:88] 2015-12-28 20:21:55,515 > validate service_function_forwarder_enty
[DEBUG|EPManager.py:91] 2015-12-28 20:21:55,515 > EP name is OK
[DEBUG|EPManager.py:97] 2015-12-28 20:21:55,515 > EP dpid is OK
[DEBUG|EPManager.py:103] 2015-12-28 20:21:55,516 > EP dpid is OK
[DEBUG|EPManager.py:83] 2015-12-28 20:21:55,517 > {'attached_switch': {'attached_port': '1', 'dpid': '00:00:00:0c:29:7d:49:f6'}, 'vlan': None, 'name': 'br-office-ep', '_id': ObjectId('56820a631d41c8498c474598')}
[INFO|EPManager.py:84] 2015-12-28 20:21:55,518 > the end point is completed
[INFO|EPManager.py:155] 2015-12-28 20:23:43,937 > delete the end point entrie
[INFO|EPManager.py:162] 2015-12-28 20:23:43,939 > 1 end point entries are deleted
[INFO|EPManager.py:45] 2015-12-28 20:23:52,381 > Create a service function forwarder
[INFO|EPManager.py:88] 2015-12-28 20:23:52,381 > validate service_function_forwarder_enty
[DEBUG|EPManager.py:91] 2015-12-28 20:23:52,381 > EP name is OK
[DEBUG|EPManager.py:97] 2015-12-28 20:23:52,381 > EP dpid is OK
[DEBUG|EPManager.py:103] 2015-12-28 20:23:52,381 > EP dpid is OK
[DEBUG|EPManager.py:83] 2015-12-28 20:23:52,383 > {'attached_switch': {'attached_port': '1', 'dpid': '00:00:00:0c:29:7d:49:f6'}, 'vlan': None, 'name': 'br-server-ep', '_id': ObjectId('56820ad81d41c849d81ea1f5')}
[INFO|EPManager.py:84] 2015-12-28 20:23:52,383 > the end point is completed
[INFO|EPManager.py:45] 2015-12-28 20:24:20,692 > Create a service function forwarder
[INFO|EPManager.py:88] 2015-12-28 20:24:20,692 > validate service_function_forwarder_enty
[DEBUG|EPManager.py:91] 2015-12-28 20:24:20,693 > EP name is OK
[DEBUG|EPManager.py:97] 2015-12-28 20:24:20,693 > EP dpid is OK
[DEBUG|EPManager.py:103] 2015-12-28 20:24:20,693 > EP dpid is OK
[DEBUG|EPManager.py:83] 2015-12-28 20:24:20,695 > {'attached_switch': {'attached_port': '4', 'dpid': '00:00:00:0c:29:7d:49:f6'}, 'vlan': None, 'name': 'br-office-ep', '_id': ObjectId('56820af41d41c849f2add630')}
[INFO|EPManager.py:84] 2015-12-28 20:24:20,695 > the end point is completed
[INFO|EPManager.py:155] 2015-12-28 20:24:57,753 > delete the end point entrie
[INFO|EPManager.py:162] 2015-12-28 20:24:57,755 > 1 end point entries are deleted
[INFO|EPManager.py:45] 2015-12-28 20:25:11,459 > Create a service function forwarder
[INFO|EPManager.py:88] 2015-12-28 20:25:11,459 > validate service_function_forwarder_enty
[DEBUG|EPManager.py:91] 2015-12-28 20:25:11,459 > EP name is OK
[DEBUG|EPManager.py:97] 2015-12-28 20:25:11,459 > EP dpid is OK
[DEBUG|EPManager.py:103] 2015-12-28 20:25:11,459 > EP dpid is OK
[DEBUG|EPManager.py:83] 2015-12-28 20:25:11,461 > {'attached_switch': {'attached_port': '4', 'dpid': '00:00:00:0c:29:7d:49:ec'}, 'vlan': None, 'name': 'br-office-ep', '_id': ObjectId('56820b271d41c84a203f749f')}
[INFO|EPManager.py:84] 2015-12-28 20:25:11,461 > the end point is completed
[INFO|NSManager.py:173] 2015-12-28 20:26:02,635 > delete the network serivce entrie
[INFO|NSManager.py:179] 2015-12-28 20:26:02,636 > 1 entries are deleted
[INFO|NSManager.py:40] 2015-12-28 20:27:11,838 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:100] 2015-12-28 20:27:11,838 > validate_entry
[DEBUG|NSManager.py:104] 2015-12-28 20:27:11,838 > name is ok
[DEBUG|NSManager.py:110] 2015-12-28 20:27:11,838 > ingress_endpoint is OK
[DEBUG|NSManager.py:116] 2015-12-28 20:27:11,838 > egress_endpoint is OK
[DEBUG|NSManager.py:95] 2015-12-28 20:27:11,840 > {'vnffg': None, 'egress_endpoint': 'br-office-ep', 'name': 'bypass', 'ingress_endpoint': 'br-server-ep', '_id': ObjectId('56820b9f1d41c84a893f3cb0'), 'tenant': 'default'}
[INFO|NSManager.py:96] 2015-12-28 20:27:11,840 > The network service insertion is completed
[INFO|SFCManager.py:574] 2015-12-28 20:27:57,605 > validate_NS
[DEBUG|SFCManager.py:580] 2015-12-28 20:27:57,606 > load ns entry (bypass)
[INFO|SFCManager.py:601] 2015-12-28 20:27:57,607 > A network scenario check is complete
[INFO|SFCManager.py:525] 2015-12-28 20:27:57,608 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:529] 2015-12-28 20:27:57,608 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 20:27:57,609 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:27:57,610 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:27:57,640 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:685] 2015-12-28 20:27:57,644 > load ns entry (bypass)
[DEBUG|SFCManager.py:693] 2015-12-28 20:27:57,645 > load tenant entry (bypass)
[INFO|OpenflowHandler.py:95] 2015-12-28 20:27:57,646 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 20:27:57,646 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 20:27:57,646 > request_curl_post_data: {"name": "bypass_default_1", "actions": "output=3", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 1}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 20:27:57,702 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 20:27:57,702 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 20:27:57,703 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 20:27:57,703 > request_curl_post_data: {"name": "bypass_default_1_reverse", "actions": "output=1", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 20:27:57,710 > {
    "status": "Entry pushed"
}
[INFO|SFCManager.py:574] 2015-12-28 20:31:26,692 > validate_NS
[DEBUG|SFCManager.py:580] 2015-12-28 20:31:26,693 > load ns entry (bypass)
[INFO|SFCManager.py:601] 2015-12-28 20:31:26,694 > A network scenario check is complete
[INFO|SFCManager.py:525] 2015-12-28 20:31:26,695 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:529] 2015-12-28 20:31:26,695 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 20:31:26,695 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:31:26,697 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:156] 2015-12-28 20:31:26,703 > There is no route for request info
[ERROR|SFCManager.py:664] 2015-12-28 20:31:26,704 > service_path_entry None
[DEBUG|SFCManager.py:685] 2015-12-28 20:31:26,706 > load ns entry (bypass)
[DEBUG|SFCManager.py:693] 2015-12-28 20:31:26,707 > load tenant entry (bypass)
[INFO|SFCManager.py:574] 2015-12-28 20:31:57,786 > validate_NS
[DEBUG|SFCManager.py:580] 2015-12-28 20:31:57,787 > load ns entry (bypass)
[INFO|SFCManager.py:601] 2015-12-28 20:31:57,789 > A network scenario check is complete
[INFO|SFCManager.py:525] 2015-12-28 20:31:57,789 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:529] 2015-12-28 20:31:57,789 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 20:31:57,790 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:31:57,791 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:156] 2015-12-28 20:31:57,795 > There is no route for request info
[ERROR|SFCManager.py:664] 2015-12-28 20:31:57,795 > service_path_entry None
[DEBUG|SFCManager.py:685] 2015-12-28 20:31:57,797 > load ns entry (bypass)
[DEBUG|SFCManager.py:693] 2015-12-28 20:31:57,799 > load tenant entry (bypass)
[INFO|OpenflowHandler.py:131] 2015-12-28 20:35:17,082 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:35:17,083 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:35:17,113 > {
    "00:00:00:0c:29:7d:49:f6": [
        {
            "bypass_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035996485213002",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_1": {
                "command": "ADD",
                "cookie": "45035996931004887",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-28 20:35:21,296 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:35:21,297 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:35:21,300 > {
    "00:00:00:0c:29:7d:49:f6": [
        {
            "bypass_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035996485213002",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_1": {
                "command": "ADD",
                "cookie": "45035996931004887",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-28 20:39:18,430 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:39:18,431 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:39:18,434 > {
    "00:00:00:0c:29:7d:49:f6": [
        {
            "bypass_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035996485213002",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_1": {
                "command": "ADD",
                "cookie": "45035996931004887",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-28 20:39:18,434 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:39:18,435 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:39:18,438 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-28 20:39:44,580 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:39:44,582 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:39:44,584 > {
    "00:00:00:0c:29:7d:49:f6": []
}
[INFO|OpenflowHandler.py:131] 2015-12-28 20:39:44,585 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:39:44,585 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:39:44,590 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-28 20:39:44,590 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:39:44,590 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:39:44,593 > {
    "00:00:00:0c:29:7d:49:f6": []
}
[INFO|SFCManager.py:574] 2015-12-28 20:45:06,059 > validate_NS
[DEBUG|SFCManager.py:580] 2015-12-28 20:45:06,060 > load ns entry (bypass)
[INFO|SFCManager.py:601] 2015-12-28 20:45:06,061 > A network scenario check is complete
[INFO|SFCManager.py:525] 2015-12-28 20:45:06,062 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:529] 2015-12-28 20:45:06,062 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 20:45:06,063 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:45:06,064 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:45:06,068 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:685] 2015-12-28 20:45:06,072 > load ns entry (bypass)
[DEBUG|SFCManager.py:693] 2015-12-28 20:45:06,073 > load tenant entry (bypass)
[INFO|OpenflowHandler.py:95] 2015-12-28 20:45:06,074 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 20:45:06,075 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 20:45:06,075 > request_curl_post_data: {"name": "bypass_default_1", "actions": "output=3", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 1}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 20:45:06,078 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 20:45:06,078 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 20:45:06,079 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 20:45:06,079 > request_curl_post_data: {"name": "bypass_default_1_reverse", "actions": "output=1", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 20:45:06,082 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-28 20:45:06,082 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:45:06,082 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:45:06,085 > {
    "00:00:00:0c:29:7d:49:f6": [
        {
            "bypass_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035996485213002",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_1": {
                "command": "ADD",
                "cookie": "45035996931004887",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|SFCManager.py:574] 2015-12-28 20:47:52,153 > validate_NS
[DEBUG|SFCManager.py:580] 2015-12-28 20:47:52,154 > load ns entry (bypass)
[INFO|SFCManager.py:601] 2015-12-28 20:47:52,156 > A network scenario check is complete
[INFO|SFCManager.py:525] 2015-12-28 20:47:52,156 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:529] 2015-12-28 20:47:52,157 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 20:47:52,157 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:47:52,158 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:156] 2015-12-28 20:47:52,165 > There is no route for request info
[ERROR|SFCManager.py:664] 2015-12-28 20:47:52,165 > service_path_entry None
[DEBUG|SFCManager.py:685] 2015-12-28 20:47:52,167 > load ns entry (bypass)
[DEBUG|SFCManager.py:693] 2015-12-28 20:47:52,168 > load tenant entry (bypass)
[INFO|OpenflowHandler.py:131] 2015-12-28 20:47:59,745 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:47:59,746 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:47:59,749 > {
    "00:00:00:0c:29:7d:49:f6": [
        {
            "bypass_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035996485213002",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_1": {
                "command": "ADD",
                "cookie": "45035996931004887",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-28 20:47:59,750 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:47:59,750 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:47:59,753 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-28 20:47:59,753 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:47:59,753 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:47:59,755 > {
    "00:00:00:0c:29:7d:49:f6": []
}
[INFO|SFCManager.py:574] 2015-12-28 20:48:01,540 > validate_NS
[DEBUG|SFCManager.py:580] 2015-12-28 20:48:01,541 > load ns entry (bypass)
[INFO|SFCManager.py:601] 2015-12-28 20:48:01,543 > A network scenario check is complete
[INFO|SFCManager.py:525] 2015-12-28 20:48:01,543 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:529] 2015-12-28 20:48:01,544 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 20:48:01,544 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:48:01,546 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:48:01,550 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:685] 2015-12-28 20:48:01,554 > load ns entry (bypass)
[DEBUG|SFCManager.py:693] 2015-12-28 20:48:01,556 > load tenant entry (bypass)
[INFO|OpenflowHandler.py:95] 2015-12-28 20:48:01,557 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 20:48:01,557 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 20:48:01,557 > request_curl_post_data: {"name": "bypass_default_1", "actions": "output=3", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 1}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 20:48:01,560 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 20:48:01,560 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 20:48:01,561 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 20:48:01,561 > request_curl_post_data: {"name": "bypass_default_1_reverse", "actions": "output=1", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 20:48:01,565 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-28 20:48:01,566 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:48:01,566 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:48:01,569 > {
    "00:00:00:0c:29:7d:49:f6": [
        {
            "bypass_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035996485213002",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_1": {
                "command": "ADD",
                "cookie": "45035996931004887",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-28 20:48:24,010 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:48:24,012 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:48:24,014 > {
    "00:00:00:0c:29:7d:49:f6": [
        {
            "bypass_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035996485213002",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_1": {
                "command": "ADD",
                "cookie": "45035996931004887",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-28 20:48:24,015 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:48:24,015 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:48:24,018 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-28 20:48:24,018 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:48:24,018 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:48:24,021 > {
    "00:00:00:0c:29:7d:49:f6": []
}
[INFO|SFCManager.py:574] 2015-12-28 20:48:25,566 > validate_NS
[DEBUG|SFCManager.py:580] 2015-12-28 20:48:25,567 > load ns entry (bypass)
[INFO|SFCManager.py:601] 2015-12-28 20:48:25,568 > A network scenario check is complete
[INFO|SFCManager.py:525] 2015-12-28 20:48:25,568 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:529] 2015-12-28 20:48:25,569 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 20:48:25,569 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:48:25,571 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:48:25,574 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:685] 2015-12-28 20:48:25,578 > load ns entry (bypass)
[DEBUG|SFCManager.py:693] 2015-12-28 20:48:25,580 > load tenant entry (bypass)
[INFO|OpenflowHandler.py:95] 2015-12-28 20:48:25,582 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 20:48:25,582 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 20:48:25,582 > request_curl_post_data: {"name": "bypass_default_1", "actions": "output=3", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 1}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 20:48:25,589 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 20:48:25,589 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 20:48:25,589 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 20:48:25,589 > request_curl_post_data: {"name": "bypass_default_1_reverse", "actions": "output=1", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 20:48:25,593 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-28 20:48:25,593 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:48:25,594 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:48:25,597 > {
    "00:00:00:0c:29:7d:49:f6": [
        {
            "bypass_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035996485213002",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_1": {
                "command": "ADD",
                "cookie": "45035996931004887",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-28 20:49:16,087 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:49:16,089 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:49:16,091 > {
    "00:00:00:0c:29:7d:49:f6": [
        {
            "bypass_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035996485213002",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_1": {
                "command": "ADD",
                "cookie": "45035996931004887",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-28 20:49:16,092 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:49:16,092 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:49:16,094 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-28 20:49:16,094 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:49:16,094 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:49:16,096 > {
    "00:00:00:0c:29:7d:49:f6": []
}
[INFO|SFCManager.py:574] 2015-12-28 20:49:18,078 > validate_NS
[DEBUG|SFCManager.py:580] 2015-12-28 20:49:18,079 > load ns entry (bypass)
[INFO|SFCManager.py:601] 2015-12-28 20:49:18,080 > A network scenario check is complete
[INFO|SFCManager.py:525] 2015-12-28 20:49:18,080 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:529] 2015-12-28 20:49:18,081 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 20:49:18,081 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:49:18,083 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:156] 2015-12-28 20:49:18,089 > There is no route for request info
[ERROR|SFCManager.py:664] 2015-12-28 20:49:18,089 > service_path_entry None
[DEBUG|SFCManager.py:685] 2015-12-28 20:49:18,091 > load ns entry (bypass)
[DEBUG|SFCManager.py:693] 2015-12-28 20:49:18,092 > load tenant entry (bypass)
[INFO|SFCManager.py:574] 2015-12-28 20:49:19,829 > validate_NS
[DEBUG|SFCManager.py:580] 2015-12-28 20:49:19,830 > load ns entry (bypass)
[INFO|SFCManager.py:601] 2015-12-28 20:49:19,832 > A network scenario check is complete
[INFO|SFCManager.py:525] 2015-12-28 20:49:19,832 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:529] 2015-12-28 20:49:19,832 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 20:49:19,833 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:49:19,834 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:156] 2015-12-28 20:49:19,839 > There is no route for request info
[ERROR|SFCManager.py:664] 2015-12-28 20:49:19,839 > service_path_entry None
[DEBUG|SFCManager.py:685] 2015-12-28 20:49:19,843 > load ns entry (bypass)
[DEBUG|SFCManager.py:693] 2015-12-28 20:49:19,845 > load tenant entry (bypass)
[INFO|OpenflowHandler.py:131] 2015-12-28 20:49:21,569 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:49:21,570 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:49:21,572 > {
    "00:00:00:0c:29:7d:49:f6": []
}
[INFO|OpenflowHandler.py:131] 2015-12-28 20:49:21,573 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:49:21,573 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:49:21,574 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-28 20:49:21,575 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:49:21,575 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:49:21,578 > {
    "00:00:00:0c:29:7d:49:f6": []
}
[INFO|SFCManager.py:574] 2015-12-28 20:49:24,453 > validate_NS
[DEBUG|SFCManager.py:580] 2015-12-28 20:49:24,454 > load ns entry (bypass)
[INFO|SFCManager.py:601] 2015-12-28 20:49:24,455 > A network scenario check is complete
[INFO|SFCManager.py:525] 2015-12-28 20:49:24,456 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:529] 2015-12-28 20:49:24,456 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 20:49:24,456 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:49:24,458 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:156] 2015-12-28 20:49:24,461 > There is no route for request info
[ERROR|SFCManager.py:664] 2015-12-28 20:49:24,462 > service_path_entry None
[DEBUG|SFCManager.py:685] 2015-12-28 20:49:24,464 > load ns entry (bypass)
[DEBUG|SFCManager.py:693] 2015-12-28 20:49:24,466 > load tenant entry (bypass)
[INFO|OpenflowHandler.py:131] 2015-12-28 20:49:47,257 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:49:47,259 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:49:47,263 > {
    "00:00:00:0c:29:7d:49:f6": []
}
[INFO|OpenflowHandler.py:131] 2015-12-28 20:49:47,263 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:49:47,263 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:49:47,266 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-28 20:49:47,266 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:49:47,267 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:49:47,270 > {
    "00:00:00:0c:29:7d:49:f6": []
}
[INFO|SFCManager.py:574] 2015-12-28 20:49:49,859 > validate_NS
[DEBUG|SFCManager.py:580] 2015-12-28 20:49:49,860 > load ns entry (bypass)
[INFO|SFCManager.py:601] 2015-12-28 20:49:49,861 > A network scenario check is complete
[INFO|SFCManager.py:525] 2015-12-28 20:49:49,862 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:529] 2015-12-28 20:49:49,862 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 20:49:49,863 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:49:49,864 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:49:49,867 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:685] 2015-12-28 20:49:49,871 > load ns entry (bypass)
[DEBUG|SFCManager.py:693] 2015-12-28 20:49:49,873 > load tenant entry (bypass)
[INFO|SFCManager.py:574] 2015-12-28 20:49:55,343 > validate_NS
[DEBUG|SFCManager.py:580] 2015-12-28 20:49:55,343 > load ns entry (bypass)
[INFO|SFCManager.py:601] 2015-12-28 20:49:55,345 > A network scenario check is complete
[INFO|SFCManager.py:525] 2015-12-28 20:49:55,345 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:529] 2015-12-28 20:49:55,346 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 20:49:55,346 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:49:55,347 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:49:55,351 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:685] 2015-12-28 20:49:55,355 > load ns entry (bypass)
[DEBUG|SFCManager.py:693] 2015-12-28 20:49:55,357 > load tenant entry (bypass)
[INFO|SFCManager.py:574] 2015-12-28 20:49:56,512 > validate_NS
[DEBUG|SFCManager.py:580] 2015-12-28 20:49:56,513 > load ns entry (bypass)
[INFO|SFCManager.py:601] 2015-12-28 20:49:56,514 > A network scenario check is complete
[INFO|SFCManager.py:525] 2015-12-28 20:49:56,515 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:529] 2015-12-28 20:49:56,515 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 20:49:56,516 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:49:56,517 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:49:56,520 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:685] 2015-12-28 20:49:56,524 > load ns entry (bypass)
[DEBUG|SFCManager.py:693] 2015-12-28 20:49:56,527 > load tenant entry (bypass)
[INFO|SFCManager.py:574] 2015-12-28 20:49:57,939 > validate_NS
[DEBUG|SFCManager.py:580] 2015-12-28 20:49:57,940 > load ns entry (bypass)
[INFO|SFCManager.py:601] 2015-12-28 20:49:57,942 > A network scenario check is complete
[INFO|SFCManager.py:525] 2015-12-28 20:49:57,942 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:529] 2015-12-28 20:49:57,942 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 20:49:57,943 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:49:57,944 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:49:57,947 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:685] 2015-12-28 20:49:57,950 > load ns entry (bypass)
[DEBUG|SFCManager.py:693] 2015-12-28 20:49:57,953 > load tenant entry (bypass)
[INFO|SFCManager.py:574] 2015-12-28 20:50:23,567 > validate_NS
[DEBUG|SFCManager.py:580] 2015-12-28 20:50:23,568 > load ns entry (bypass)
[INFO|SFCManager.py:601] 2015-12-28 20:50:23,570 > A network scenario check is complete
[INFO|SFCManager.py:525] 2015-12-28 20:50:23,570 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:529] 2015-12-28 20:50:23,571 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 20:50:23,571 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:50:23,573 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:50:23,576 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:685] 2015-12-28 20:50:23,579 > load ns entry (bypass)
[DEBUG|SFCManager.py:693] 2015-12-28 20:50:23,581 > load tenant entry (bypass)
[INFO|SFCManager.py:574] 2015-12-28 20:51:37,982 > validate_NS
[DEBUG|SFCManager.py:580] 2015-12-28 20:51:37,983 > load ns entry (bypass)
[INFO|SFCManager.py:601] 2015-12-28 20:51:37,985 > A network scenario check is complete
[INFO|SFCManager.py:525] 2015-12-28 20:51:37,985 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:529] 2015-12-28 20:51:37,986 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 20:51:37,986 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:51:37,988 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:51:37,991 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:685] 2015-12-28 20:51:37,995 > load ns entry (bypass)
[DEBUG|SFCManager.py:693] 2015-12-28 20:51:37,996 > load tenant entry (bypass)
[INFO|SFCManager.py:574] 2015-12-28 20:52:37,963 > validate_NS
[DEBUG|SFCManager.py:580] 2015-12-28 20:52:37,964 > load ns entry (bypass)
[INFO|SFCManager.py:601] 2015-12-28 20:52:37,966 > A network scenario check is complete
[INFO|SFCManager.py:525] 2015-12-28 20:52:37,967 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:529] 2015-12-28 20:52:37,967 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 20:52:37,968 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:52:37,971 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:52:37,974 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:685] 2015-12-28 20:52:37,976 > load ns entry (bypass)
[DEBUG|SFCManager.py:693] 2015-12-28 20:52:37,977 > load tenant entry (bypass)
[INFO|SFCManager.py:574] 2015-12-28 20:54:36,398 > validate_NS
[DEBUG|SFCManager.py:580] 2015-12-28 20:54:36,399 > load ns entry (bypass)
[INFO|SFCManager.py:601] 2015-12-28 20:54:36,401 > A network scenario check is complete
[INFO|SFCManager.py:525] 2015-12-28 20:54:36,401 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:529] 2015-12-28 20:54:36,402 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 20:54:36,402 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:54:36,404 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:54:36,406 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:687] 2015-12-28 20:54:36,410 > load ns entry (bypass)
[DEBUG|SFCManager.py:695] 2015-12-28 20:54:36,412 > load tenant entry (bypass)
[INFO|SFCManager.py:574] 2015-12-28 20:54:44,861 > validate_NS
[DEBUG|SFCManager.py:580] 2015-12-28 20:54:44,862 > load ns entry (bypass)
[INFO|SFCManager.py:601] 2015-12-28 20:54:44,863 > A network scenario check is complete
[INFO|SFCManager.py:525] 2015-12-28 20:54:44,864 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:529] 2015-12-28 20:54:44,864 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 20:54:44,865 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 20:54:44,866 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 20:54:44,869 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:687] 2015-12-28 20:54:44,873 > load ns entry (bypass)
[DEBUG|SFCManager.py:695] 2015-12-28 20:54:44,874 > load tenant entry (bypass)
[INFO|SFCManager.py:574] 2015-12-28 21:00:53,422 > validate_NS
[DEBUG|SFCManager.py:580] 2015-12-28 21:00:53,423 > load ns entry (bypass)
[INFO|SFCManager.py:601] 2015-12-28 21:00:53,425 > A network scenario check is complete
[INFO|SFCManager.py:525] 2015-12-28 21:00:53,425 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:529] 2015-12-28 21:00:53,425 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 21:00:53,426 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 21:00:53,427 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 21:00:53,430 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:687] 2015-12-28 21:00:53,433 > load ns entry (bypass)
[DEBUG|SFCManager.py:695] 2015-12-28 21:00:53,437 > load tenant entry (bypass)
[INFO|SFCManager.py:574] 2015-12-28 21:02:39,874 > validate_NS
[DEBUG|SFCManager.py:580] 2015-12-28 21:02:39,875 > load ns entry (bypass)
[INFO|SFCManager.py:601] 2015-12-28 21:02:39,876 > A network scenario check is complete
[INFO|SFCManager.py:525] 2015-12-28 21:02:39,877 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:529] 2015-12-28 21:02:39,878 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 21:02:39,878 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 21:02:39,879 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 21:02:39,882 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:687] 2015-12-28 21:02:39,887 > load ns entry (bypass)
[DEBUG|SFCManager.py:695] 2015-12-28 21:02:39,889 > load tenant entry (bypass)
[INFO|SFCManager.py:574] 2015-12-28 21:02:41,599 > validate_NS
[DEBUG|SFCManager.py:580] 2015-12-28 21:02:41,600 > load ns entry (bypass)
[INFO|SFCManager.py:601] 2015-12-28 21:02:41,601 > A network scenario check is complete
[INFO|SFCManager.py:525] 2015-12-28 21:02:41,602 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:529] 2015-12-28 21:02:41,602 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 21:02:41,603 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 21:02:41,604 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 21:02:41,607 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:687] 2015-12-28 21:02:41,613 > load ns entry (bypass)
[DEBUG|SFCManager.py:695] 2015-12-28 21:02:41,615 > load tenant entry (bypass)
[INFO|SFCManager.py:574] 2015-12-28 21:03:13,540 > validate_NS
[DEBUG|SFCManager.py:580] 2015-12-28 21:03:13,541 > load ns entry (bypass)
[INFO|SFCManager.py:601] 2015-12-28 21:03:13,542 > A network scenario check is complete
[INFO|SFCManager.py:525] 2015-12-28 21:03:13,543 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:529] 2015-12-28 21:03:13,543 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 21:03:13,544 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 21:03:13,545 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 21:03:13,548 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:686] 2015-12-28 21:03:13,550 > load ns entry (bypass)
[DEBUG|SFCManager.py:694] 2015-12-28 21:03:13,552 > load tenant entry (bypass)
[INFO|SFCManager.py:574] 2015-12-28 21:04:23,328 > validate_NS
[DEBUG|SFCManager.py:580] 2015-12-28 21:04:23,329 > load ns entry (bypass)
[INFO|SFCManager.py:601] 2015-12-28 21:04:23,331 > A network scenario check is complete
[INFO|SFCManager.py:525] 2015-12-28 21:04:23,333 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:529] 2015-12-28 21:04:23,334 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 21:04:23,335 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 21:04:23,336 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 21:04:23,340 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[INFO|SFCManager.py:574] 2015-12-28 21:08:17,465 > validate_NS
[DEBUG|SFCManager.py:580] 2015-12-28 21:08:17,466 > load ns entry (bypass)
[INFO|SFCManager.py:601] 2015-12-28 21:08:17,467 > A network scenario check is complete
[INFO|SFCManager.py:525] 2015-12-28 21:08:17,468 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:529] 2015-12-28 21:08:17,469 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 21:08:17,469 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 21:08:17,470 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 21:08:17,474 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[INFO|SFCManager.py:574] 2015-12-28 21:08:23,995 > validate_NS
[DEBUG|SFCManager.py:580] 2015-12-28 21:08:23,996 > load ns entry (bypass)
[INFO|SFCManager.py:601] 2015-12-28 21:08:23,998 > A network scenario check is complete
[INFO|SFCManager.py:525] 2015-12-28 21:08:23,998 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:529] 2015-12-28 21:08:23,999 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 21:08:23,999 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 21:08:24,001 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 21:08:24,004 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[INFO|SFCManager.py:574] 2015-12-28 21:09:15,427 > validate_NS
[DEBUG|SFCManager.py:580] 2015-12-28 21:09:15,427 > load ns entry (bypass)
[INFO|SFCManager.py:601] 2015-12-28 21:09:15,429 > A network scenario check is complete
[INFO|SFCManager.py:525] 2015-12-28 21:09:15,429 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:529] 2015-12-28 21:09:15,430 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 21:09:15,430 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 21:09:15,433 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 21:09:15,437 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:686] 2015-12-28 21:09:15,439 > load ns entry (bypass)
[DEBUG|SFCManager.py:694] 2015-12-28 21:09:15,440 > load tenant entry (bypass)
[INFO|SFCManager.py:574] 2015-12-28 21:09:33,478 > validate_NS
[DEBUG|SFCManager.py:580] 2015-12-28 21:09:33,479 > load ns entry (bypass)
[INFO|SFCManager.py:601] 2015-12-28 21:09:33,480 > A network scenario check is complete
[INFO|SFCManager.py:525] 2015-12-28 21:09:33,481 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:529] 2015-12-28 21:09:33,481 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 21:09:33,481 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 21:09:33,483 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 21:09:33,485 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:686] 2015-12-28 21:09:33,489 > load ns entry (bypass)
[DEBUG|SFCManager.py:694] 2015-12-28 21:09:33,490 > load tenant entry (bypass)
[INFO|SFCManager.py:574] 2015-12-28 21:14:25,803 > validate_NS
[DEBUG|SFCManager.py:580] 2015-12-28 21:14:25,804 > load ns entry (bypass)
[INFO|SFCManager.py:601] 2015-12-28 21:14:25,805 > A network scenario check is complete
[INFO|SFCManager.py:525] 2015-12-28 21:14:25,806 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:529] 2015-12-28 21:14:25,806 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 21:14:25,807 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 21:14:25,809 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 21:14:25,815 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:686] 2015-12-28 21:14:25,817 > load ns entry (bypass)
[DEBUG|SFCManager.py:694] 2015-12-28 21:14:25,818 > load tenant entry (bypass)
[INFO|OpenflowHandler.py:95] 2015-12-28 21:14:25,822 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 21:14:25,822 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 21:14:25,822 > request_curl_post_data: {"name": "bypass_default_0", "actions": "output=3", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 1}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 21:14:25,826 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 21:14:25,827 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 21:14:25,827 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 21:14:25,827 > request_curl_post_data: {"name": "bypass_default_0_reverse", "actions": "output=1", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 21:14:25,831 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 21:14:25,832 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 21:14:25,832 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 21:14:25,832 > request_curl_post_data: {"name": "bypass_default_1", "actions": "output=9", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 21:14:25,836 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 21:14:25,836 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 21:14:25,836 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 21:14:25,836 > request_curl_post_data: {"name": "bypass_default_1_reverse", "actions": "output=3", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 9}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 21:14:25,848 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 21:14:25,849 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 21:14:25,849 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 21:14:25,849 > request_curl_post_data: {"name": "bypass_default_2", "actions": "output=8", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 9}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 21:14:25,856 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 21:14:25,856 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 21:14:25,857 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 21:14:25,857 > request_curl_post_data: {"name": "bypass_default_2_reverse", "actions": "output=9", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 8}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 21:14:25,861 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 21:14:25,862 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 21:14:25,862 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 21:14:25,862 > request_curl_post_data: {"name": "bypass_default_3", "actions": "output=3", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 8}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 21:14:25,864 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 21:14:25,864 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 21:14:25,865 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 21:14:25,865 > request_curl_post_data: {"name": "bypass_default_3_reverse", "actions": "output=8", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 21:14:25,868 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 21:14:25,868 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 21:14:25,868 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 21:14:25,869 > request_curl_post_data: {"name": "bypass_default_4", "actions": "output=4", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 21:14:25,872 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 21:14:25,872 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 21:14:25,872 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 21:14:25,873 > request_curl_post_data: {"name": "bypass_default_4_reverse", "actions": "output=3", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 4}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 21:14:25,876 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-28 21:14:55,776 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 21:14:55,777 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 21:14:55,780 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "bypass_default_4_reverse": {
                "command": "ADD",
                "cookie": "45035996647723693",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_4": {
                "command": "ADD",
                "cookie": "45035996931004890",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "bypass_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035997862698537",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035996485213002",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_0": {
                "command": "ADD",
                "cookie": "45035996931004886",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_1": {
                "command": "ADD",
                "cookie": "45035996931004887",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "9"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "bypass_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035999402694763",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "9"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035998025209228",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_3": {
                "command": "ADD",
                "cookie": "45035996931004889",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_2": {
                "command": "ADD",
                "cookie": "45035996931004888",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-28 21:17:50,488 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 21:17:50,490 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 21:17:50,493 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "bypass_default_4_reverse": {
                "command": "ADD",
                "cookie": "45035996647723693",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_4": {
                "command": "ADD",
                "cookie": "45035996931004890",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "bypass_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035997862698537",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035996485213002",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_0": {
                "command": "ADD",
                "cookie": "45035996931004886",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_1": {
                "command": "ADD",
                "cookie": "45035996931004887",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "9"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "bypass_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035999402694763",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "9"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035998025209228",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_3": {
                "command": "ADD",
                "cookie": "45035996931004889",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_2": {
                "command": "ADD",
                "cookie": "45035996931004888",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-28 21:17:50,494 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 21:17:50,495 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 21:17:50,499 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-28 21:17:50,499 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 21:17:50,499 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 21:17:50,505 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-28 21:17:54,534 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 21:17:54,535 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 21:17:54,537 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|SFCManager.py:574] 2015-12-28 21:17:58,655 > validate_NS
[DEBUG|SFCManager.py:580] 2015-12-28 21:17:58,656 > load ns entry (bypass)
[INFO|SFCManager.py:601] 2015-12-28 21:17:58,657 > A network scenario check is complete
[INFO|SFCManager.py:525] 2015-12-28 21:17:58,658 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:529] 2015-12-28 21:17:58,658 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 21:17:58,659 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 21:17:58,660 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:156] 2015-12-28 21:17:58,664 > There is no route for request info
[ERROR|SFCManager.py:664] 2015-12-28 21:17:58,664 > service_path_entry None
[DEBUG|SFCManager.py:686] 2015-12-28 21:17:58,667 > load ns entry (bypass)
[DEBUG|SFCManager.py:694] 2015-12-28 21:17:58,669 > load tenant entry (bypass)
[INFO|SFCManager.py:574] 2015-12-28 21:18:03,996 > validate_NS
[DEBUG|SFCManager.py:580] 2015-12-28 21:18:03,998 > load ns entry (bypass)
[INFO|SFCManager.py:601] 2015-12-28 21:18:04,000 > A network scenario check is complete
[INFO|SFCManager.py:525] 2015-12-28 21:18:04,001 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:529] 2015-12-28 21:18:04,001 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 21:18:04,002 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 21:18:04,004 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 21:18:04,007 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:686] 2015-12-28 21:18:04,010 > load ns entry (bypass)
[DEBUG|SFCManager.py:694] 2015-12-28 21:18:04,010 > load tenant entry (bypass)
[INFO|SFCManager.py:574] 2015-12-28 21:23:37,222 > validate_NS
[DEBUG|SFCManager.py:580] 2015-12-28 21:23:37,223 > load ns entry (bypass)
[INFO|SFCManager.py:601] 2015-12-28 21:23:37,225 > A network scenario check is complete
[INFO|SFCManager.py:525] 2015-12-28 21:23:37,225 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:529] 2015-12-28 21:23:37,226 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 21:23:37,226 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 21:23:37,227 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 21:23:37,231 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:686] 2015-12-28 21:23:37,236 > load ns entry (bypass)
[DEBUG|SFCManager.py:694] 2015-12-28 21:23:37,237 > load tenant entry (bypass)
[INFO|SFFManager.py:189] 2015-12-28 21:31:16,167 > delete the service function entrie
[INFO|SFFManager.py:196] 2015-12-28 21:31:16,169 > 1 service entries are deleted
[DEBUG|SFFManager.py:35] 2015-12-28 21:32:50,582 > args ['create-sff', 'Testing', '63', '60']
[DEBUG|SFFManager.py:44] 2015-12-28 21:32:50,583 > ['Testing']
[DEBUG|SFFManager.py:44] 2015-12-28 21:32:50,583 > ['Testing', '63']
[DEBUG|SFFManager.py:44] 2015-12-28 21:32:50,583 > ['Testing', '63', '60']
[DEBUG|SFFManager.py:45] 2015-12-28 21:32:50,583 > ['Testing', '63', '60']
[DEBUG|SFFManager.py:48] 2015-12-28 21:32:50,583 > [['Testing', '63', '60']]
[INFO|SFFManager.py:54] 2015-12-28 21:32:50,584 > Create a service function forwarder
[INFO|SFFManager.py:104] 2015-12-28 21:32:50,584 > validate entry
[DEBUG|SFFManager.py:107] 2015-12-28 21:32:50,584 > SFF name is OK
[DEBUG|SFFManager.py:113] 2015-12-28 21:32:50,584 > SFF type is OK
[DEBUG|SFFManager.py:119] 2015-12-28 21:32:50,584 > SFF dpid is OK(00:00:ee:42:21:d6:e1:44)
[DEBUG|SFFManager.py:127] 2015-12-28 21:32:50,584 > connected_sf's name is OK (Testing)
[DEBUG|SFFManager.py:133] 2015-12-28 21:32:50,584 > connected_sf's ingress_port is OK (63)
[DEBUG|SFFManager.py:139] 2015-12-28 21:32:50,584 > connected_sf's egress_port is OK (60)
[DEBUG|SFFManager.py:99] 2015-12-28 21:32:50,586 > {'_id': ObjectId('56821b021d41c8586bac9e8c'), 'connected_sf': {'Testing': {'egress_port': '60', 'name': 'Testing', 'ingress_port': '63'}}, 'type': 'general', 'name': 'br-int-onebox', 'dpid': '00:00:ee:42:21:d6:e1:44'}
[INFO|SFFManager.py:100] 2015-12-28 21:32:50,586 > The service function creation is completed
[DEBUG|SFManager.py:33] 2015-12-28 21:35:16,235 > args ['create-sf', 'eth3', '192.168.1.17/24', 'fa:16:3e:16:b1:34', 'ingress', 'eth2', '192.168.0.19/24', 'fa:16:3e:ca:ab:e0', 'egress']
[DEBUG|SFManager.py:41] 2015-12-28 21:35:16,235 > ['eth3']
[DEBUG|SFManager.py:41] 2015-12-28 21:35:16,236 > ['eth3', '192.168.1.17/24']
[DEBUG|SFManager.py:41] 2015-12-28 21:35:16,236 > ['eth3', '192.168.1.17/24', 'fa:16:3e:16:b1:34']
[DEBUG|SFManager.py:41] 2015-12-28 21:35:16,236 > ['eth3', '192.168.1.17/24', 'fa:16:3e:16:b1:34', 'ingress']
[DEBUG|SFManager.py:42] 2015-12-28 21:35:16,236 > ['eth3', '192.168.1.17/24', 'fa:16:3e:16:b1:34', 'ingress']
[DEBUG|SFManager.py:41] 2015-12-28 21:35:16,237 > ['eth2']
[DEBUG|SFManager.py:41] 2015-12-28 21:35:16,237 > ['eth2', '192.168.0.19/24']
[DEBUG|SFManager.py:41] 2015-12-28 21:35:16,237 > ['eth2', '192.168.0.19/24', 'fa:16:3e:ca:ab:e0']
[DEBUG|SFManager.py:41] 2015-12-28 21:35:16,237 > ['eth2', '192.168.0.19/24', 'fa:16:3e:ca:ab:e0', 'egress']
[DEBUG|SFManager.py:42] 2015-12-28 21:35:16,237 > ['eth2', '192.168.0.19/24', 'fa:16:3e:ca:ab:e0', 'egress']
[DEBUG|SFManager.py:45] 2015-12-28 21:35:16,237 > [['eth3', '192.168.1.17/24', 'fa:16:3e:16:b1:34', 'ingress'], ['eth2', '192.168.0.19/24', 'fa:16:3e:ca:ab:e0', 'egress']]
[INFO|SFManager.py:49] 2015-12-28 21:35:16,237 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:103] 2015-12-28 21:35:16,237 > The SF name is OK (testing)
[DEBUG|SFManager.py:109] 2015-12-28 21:35:16,238 > The SF Type is OK(FW)
[DEBUG|SFManager.py:118] 2015-12-28 21:35:16,238 > The interfaces name is OK (eth3)
[DEBUG|SFManager.py:124] 2015-12-28 21:35:16,238 > The interfaces MAC is OK (fa:16:3e:16:b1:34)
[DEBUG|SFManager.py:118] 2015-12-28 21:35:16,238 > The interfaces name is OK (eth2)
[DEBUG|SFManager.py:124] 2015-12-28 21:35:16,238 > The interfaces MAC is OK (fa:16:3e:ca:ab:e0)
[DEBUG|SFManager.py:95] 2015-12-28 21:35:16,239 > {'ip': '192.168.2.16/24', 'interfaces': {'eth3': {'ip': '192.168.1.17/24', 'mac': 'fa:16:3e:16:b1:34', 'type': 'ingress', 'name': 'eth3'}, 'eth2': {'ip': '192.168.0.19/24', 'mac': 'fa:16:3e:ca:ab:e0', 'type': 'egress', 'name': 'eth2'}}, '_id': ObjectId('56821b941d41c858ca24f978'), 'type': 'FW', 'name': 'testing'}
[INFO|SFManager.py:96] 2015-12-28 21:35:16,240 > The service function insertion is completed
[INFO|SFManager.py:175] 2015-12-28 21:35:49,667 > delete the service function entrie
[INFO|SFManager.py:181] 2015-12-28 21:35:49,668 > 1 service entries are deleted
[DEBUG|SFManager.py:33] 2015-12-28 21:36:00,555 > args ['create-sf', 'eth3', '192.168.1.17/24', 'fa:16:3e:16:b1:34', 'ingress', 'eth2', '192.168.0.19/24', 'fa:16:3e:ca:ab:e0', 'egress']
[DEBUG|SFManager.py:41] 2015-12-28 21:36:00,555 > ['eth3']
[DEBUG|SFManager.py:41] 2015-12-28 21:36:00,555 > ['eth3', '192.168.1.17/24']
[DEBUG|SFManager.py:41] 2015-12-28 21:36:00,555 > ['eth3', '192.168.1.17/24', 'fa:16:3e:16:b1:34']
[DEBUG|SFManager.py:41] 2015-12-28 21:36:00,555 > ['eth3', '192.168.1.17/24', 'fa:16:3e:16:b1:34', 'ingress']
[DEBUG|SFManager.py:42] 2015-12-28 21:36:00,555 > ['eth3', '192.168.1.17/24', 'fa:16:3e:16:b1:34', 'ingress']
[DEBUG|SFManager.py:41] 2015-12-28 21:36:00,556 > ['eth2']
[DEBUG|SFManager.py:41] 2015-12-28 21:36:00,556 > ['eth2', '192.168.0.19/24']
[DEBUG|SFManager.py:41] 2015-12-28 21:36:00,556 > ['eth2', '192.168.0.19/24', 'fa:16:3e:ca:ab:e0']
[DEBUG|SFManager.py:41] 2015-12-28 21:36:00,556 > ['eth2', '192.168.0.19/24', 'fa:16:3e:ca:ab:e0', 'egress']
[DEBUG|SFManager.py:42] 2015-12-28 21:36:00,556 > ['eth2', '192.168.0.19/24', 'fa:16:3e:ca:ab:e0', 'egress']
[DEBUG|SFManager.py:45] 2015-12-28 21:36:00,556 > [['eth3', '192.168.1.17/24', 'fa:16:3e:16:b1:34', 'ingress'], ['eth2', '192.168.0.19/24', 'fa:16:3e:ca:ab:e0', 'egress']]
[INFO|SFManager.py:49] 2015-12-28 21:36:00,557 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:103] 2015-12-28 21:36:00,557 > The SF name is OK (Testing)
[DEBUG|SFManager.py:109] 2015-12-28 21:36:00,557 > The SF Type is OK(FW)
[DEBUG|SFManager.py:118] 2015-12-28 21:36:00,557 > The interfaces name is OK (eth3)
[DEBUG|SFManager.py:124] 2015-12-28 21:36:00,557 > The interfaces MAC is OK (fa:16:3e:16:b1:34)
[DEBUG|SFManager.py:118] 2015-12-28 21:36:00,557 > The interfaces name is OK (eth2)
[DEBUG|SFManager.py:124] 2015-12-28 21:36:00,557 > The interfaces MAC is OK (fa:16:3e:ca:ab:e0)
[DEBUG|SFManager.py:95] 2015-12-28 21:36:00,559 > {'ip': '192.168.2.16/24', 'interfaces': {'eth3': {'ip': '192.168.1.17/24', 'mac': 'fa:16:3e:16:b1:34', 'type': 'ingress', 'name': 'eth3'}, 'eth2': {'ip': '192.168.0.19/24', 'mac': 'fa:16:3e:ca:ab:e0', 'type': 'egress', 'name': 'eth2'}}, '_id': ObjectId('56821bc01d41c858ffb5112b'), 'type': 'FW', 'name': 'Testing'}
[INFO|SFManager.py:96] 2015-12-28 21:36:00,559 > The service function insertion is completed
[INFO|VNFFGManager.py:37] 2015-12-28 21:39:57,376 > create VNFFG [ex: firewall, NAT, DPI]
[DEBUG|VNFFGManager.py:48] 2015-12-28 21:39:57,377 > name is empty
[DEBUG|VNFFGManager.py:92] 2015-12-28 21:39:57,377 > name is OK
[DEBUG|VNFFGManager.py:85] 2015-12-28 21:39:57,379 > {'sf_list': ['Testing'], '_id': ObjectId('56821cad1d41c85a3b3063bd'), 'name': 'testing_vnffg'}
[INFO|VNFFGManager.py:86] 2015-12-28 21:39:57,379 > The service function insertion is completed
[INFO|NSManager.py:40] 2015-12-28 21:40:48,950 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:100] 2015-12-28 21:40:48,950 > validate_entry
[DEBUG|NSManager.py:104] 2015-12-28 21:40:48,951 > name is ok
[DEBUG|NSManager.py:110] 2015-12-28 21:40:48,951 > ingress_endpoint is OK
[DEBUG|NSManager.py:116] 2015-12-28 21:40:48,951 > egress_endpoint is OK
[DEBUG|NSManager.py:95] 2015-12-28 21:40:48,953 > {'ingress_endpoint': 'br-office-end-point', 'egress_endpoint': 'br-office-end-point', 'name': 'testing', 'tenant': 'default', '_id': ObjectId('56821ce01d41c85a734793b2')}
[INFO|NSManager.py:96] 2015-12-28 21:40:48,953 > The network service insertion is completed
[INFO|NSManager.py:173] 2015-12-28 21:41:06,263 > delete the network serivce entrie
[INFO|NSManager.py:179] 2015-12-28 21:41:06,265 > 1 entries are deleted
[INFO|NSManager.py:40] 2015-12-28 21:41:14,841 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:100] 2015-12-28 21:41:14,841 > validate_entry
[DEBUG|NSManager.py:104] 2015-12-28 21:41:14,841 > name is ok
[DEBUG|NSManager.py:110] 2015-12-28 21:41:14,842 > ingress_endpoint is OK
[DEBUG|NSManager.py:116] 2015-12-28 21:41:14,842 > egress_endpoint is OK
[DEBUG|NSManager.py:95] 2015-12-28 21:41:14,843 > {'ingress_endpoint': 'br-office-end-point', 'egress_endpoint': 'br-office-end-point', 'name': 'testing', 'tenant': 'default', '_id': ObjectId('56821cfa1d41c85a95e1d079')}
[INFO|NSManager.py:96] 2015-12-28 21:41:14,844 > The network service insertion is completed
[INFO|NSManager.py:40] 2015-12-28 21:44:43,027 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-28 21:44:43,028 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-28 21:44:43,028 > name is ok
[DEBUG|NSManager.py:106] 2015-12-28 21:44:43,028 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-28 21:44:43,029 > egress_endpoint is OK
[ERROR|NSManager.py:84] 2015-12-28 21:44:43,031 > already, the service function is exist
[INFO|NSManager.py:169] 2015-12-28 21:45:02,595 > delete the network serivce entrie
[INFO|NSManager.py:175] 2015-12-28 21:45:02,596 > 0 entries are deleted
[INFO|NSManager.py:169] 2015-12-28 21:45:06,371 > delete the network serivce entrie
[INFO|NSManager.py:175] 2015-12-28 21:45:06,372 > 1 entries are deleted
[INFO|NSManager.py:40] 2015-12-28 21:45:08,396 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-28 21:45:08,396 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-28 21:45:08,396 > name is ok
[DEBUG|NSManager.py:106] 2015-12-28 21:45:08,396 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-28 21:45:08,396 > egress_endpoint is OK
[DEBUG|NSManager.py:91] 2015-12-28 21:45:08,398 > {'vnffg': 'testing_vnffg', 'egress_endpoint': 'br-office-end-point', 'name': 'testing', 'ingress_endpoint': 'br-office-end-point', '_id': ObjectId('56821de41d41c85ba5866395'), 'tenant': 'default'}
[INFO|NSManager.py:92] 2015-12-28 21:45:08,398 > The network service insertion is completed
[INFO|SFCManager.py:573] 2015-12-28 21:45:37,740 > validate_NS
[DEBUG|SFCManager.py:579] 2015-12-28 21:45:37,741 > load ns entry (testing)
[ERROR|SFCManager.py:592] 2015-12-28 21:45:37,742 > ingress_endpoint is missing
[DEBUG|SFCManager.py:685] 2015-12-28 21:45:37,743 > load ns entry (testing)
[DEBUG|SFCManager.py:693] 2015-12-28 21:45:37,744 > load tenant entry (testing)
[INFO|NSManager.py:169] 2015-12-28 21:46:18,572 > delete the network serivce entrie
[INFO|NSManager.py:175] 2015-12-28 21:46:18,574 > 1 entries are deleted
[INFO|NSManager.py:40] 2015-12-28 21:46:30,994 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-28 21:46:30,994 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-28 21:46:30,995 > name is ok
[DEBUG|NSManager.py:106] 2015-12-28 21:46:30,995 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-28 21:46:30,995 > egress_endpoint is OK
[DEBUG|NSManager.py:91] 2015-12-28 21:46:30,997 > {'vnffg': 'testing_vnff', 'egress_endpoint': 'br-office-ep', 'name': 'testing', 'ingress_endpoint': 'br-office-ep', '_id': ObjectId('56821e361d41c85beb5f2c67'), 'tenant': 'default'}
[INFO|NSManager.py:92] 2015-12-28 21:46:30,997 > The network service insertion is completed
[INFO|NSManager.py:169] 2015-12-28 21:46:40,177 > delete the network serivce entrie
[INFO|NSManager.py:175] 2015-12-28 21:46:40,178 > 1 entries are deleted
[INFO|NSManager.py:40] 2015-12-28 21:46:50,398 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-28 21:46:50,399 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-28 21:46:50,399 > name is ok
[DEBUG|NSManager.py:106] 2015-12-28 21:46:50,399 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-28 21:46:50,399 > egress_endpoint is OK
[DEBUG|NSManager.py:91] 2015-12-28 21:46:50,401 > {'vnffg': 'testing_vnff', 'egress_endpoint': 'br-office-ep', 'name': 'testing', 'ingress_endpoint': 'br-server-ep', '_id': ObjectId('56821e4a1d41c85c0a9a472f'), 'tenant': 'default'}
[INFO|NSManager.py:92] 2015-12-28 21:46:50,402 > The network service insertion is completed
[INFO|SFCManager.py:573] 2015-12-28 21:47:00,187 > validate_NS
[DEBUG|SFCManager.py:579] 2015-12-28 21:47:00,189 > load ns entry (testing)
[INFO|SFCManager.py:600] 2015-12-28 21:47:00,192 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 21:47:00,193 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 21:47:00,194 > egress_endpoint loading is completed(br-office-ep)
[INFO|SFCManager.py:573] 2015-12-28 21:47:18,721 > validate_NS
[DEBUG|SFCManager.py:579] 2015-12-28 21:47:18,721 > load ns entry (testing)
[INFO|SFCManager.py:600] 2015-12-28 21:47:18,723 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 21:47:18,723 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 21:47:18,724 > egress_endpoint loading is completed(br-office-ep)
[INFO|SFCManager.py:573] 2015-12-28 21:47:37,362 > validate_NS
[DEBUG|SFCManager.py:579] 2015-12-28 21:47:37,363 > load ns entry (bypass)
[INFO|SFCManager.py:600] 2015-12-28 21:47:37,365 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 21:47:37,365 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 21:47:37,366 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 21:47:37,366 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 21:47:37,368 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 21:47:37,371 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:685] 2015-12-28 21:47:37,374 > load ns entry (bypass)
[DEBUG|SFCManager.py:693] 2015-12-28 21:47:37,376 > load tenant entry (bypass)
[INFO|SFCManager.py:573] 2015-12-28 22:36:55,693 > validate_NS
[DEBUG|SFCManager.py:579] 2015-12-28 22:36:55,694 > load ns entry (bypass)
[INFO|SFCManager.py:600] 2015-12-28 22:36:55,696 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 22:36:55,696 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 22:36:55,697 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 22:36:55,697 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 22:36:55,699 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 22:36:55,702 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:685] 2015-12-28 22:36:55,706 > load ns entry (bypass)
[DEBUG|SFCManager.py:693] 2015-12-28 22:36:55,707 > load tenant entry (bypass)
[INFO|SFCManager.py:573] 2015-12-28 22:38:38,648 > validate_NS
[DEBUG|SFCManager.py:579] 2015-12-28 22:38:38,649 > load ns entry (testing)
[INFO|SFCManager.py:600] 2015-12-28 22:38:38,651 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 22:38:38,651 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 22:38:38,652 > egress_endpoint loading is completed(br-office-ep)
[INFO|SFCManager.py:573] 2015-12-28 22:57:58,011 > validate_NS
[DEBUG|SFCManager.py:579] 2015-12-28 22:57:58,012 > load ns entry (bypass)
[INFO|SFCManager.py:600] 2015-12-28 22:57:58,013 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 22:57:58,014 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 22:57:58,014 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 22:57:58,015 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 22:57:58,017 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 22:57:58,022 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:685] 2015-12-28 22:57:58,024 > load ns entry (bypass)
[DEBUG|SFCManager.py:693] 2015-12-28 22:57:58,025 > load tenant entry (bypass)
[INFO|OpenflowHandler.py:95] 2015-12-28 22:57:58,028 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 22:57:58,028 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 22:57:58,028 > request_curl_post_data: {"name": "bypass_default_0", "actions": "output=3", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 1}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 22:57:58,068 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 22:57:58,068 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 22:57:58,069 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 22:57:58,069 > request_curl_post_data: {"name": "bypass_default_0_reverse", "actions": "output=1", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 22:57:58,073 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 22:57:58,073 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 22:57:58,073 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 22:57:58,074 > request_curl_post_data: {"name": "bypass_default_1", "actions": "output=8", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 9}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 22:57:58,077 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 22:57:58,077 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 22:57:58,077 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 22:57:58,077 > request_curl_post_data: {"name": "bypass_default_1_reverse", "actions": "output=9", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 8}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 22:57:58,097 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 22:57:58,098 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 22:57:58,098 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 22:57:58,098 > request_curl_post_data: {"name": "bypass_default_2", "actions": "output=4", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 22:57:58,106 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 22:57:58,106 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 22:57:58,106 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 22:57:58,106 > request_curl_post_data: {"name": "bypass_default_2_reverse", "actions": "output=3", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 4}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 22:57:58,109 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-28 22:57:58,110 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 22:57:58,110 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 22:57:58,138 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "bypass_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035999402694763",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_2": {
                "command": "ADD",
                "cookie": "45035996931004888",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "bypass_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035997862698537",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_0": {
                "command": "ADD",
                "cookie": "45035996931004886",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "bypass_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035996485213002",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "9"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_1": {
                "command": "ADD",
                "cookie": "45035996931004887",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-28 22:59:00,302 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 22:59:00,303 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 22:59:00,306 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "bypass_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035999402694763",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_2": {
                "command": "ADD",
                "cookie": "45035996931004888",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "bypass_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035997862698537",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_0": {
                "command": "ADD",
                "cookie": "45035996931004886",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "bypass_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035996485213002",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "9"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_1": {
                "command": "ADD",
                "cookie": "45035996931004887",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-28 22:59:00,307 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 22:59:00,307 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 22:59:00,325 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-28 22:59:00,325 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 22:59:00,326 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 22:59:00,340 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|SFCManager.py:573] 2015-12-28 22:59:55,498 > validate_NS
[DEBUG|SFCManager.py:579] 2015-12-28 22:59:55,499 > load ns entry (testing)
[INFO|SFCManager.py:600] 2015-12-28 22:59:55,500 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 22:59:55,501 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 22:59:55,501 > egress_endpoint loading is completed(br-office-ep)
[INFO|SFCManager.py:573] 2015-12-28 23:00:11,659 > validate_NS
[DEBUG|SFCManager.py:579] 2015-12-28 23:00:11,660 > load ns entry (testing)
[INFO|SFCManager.py:600] 2015-12-28 23:00:11,661 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:00:11,661 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:00:11,662 > egress_endpoint loading is completed(br-office-ep)
[INFO|NSManager.py:169] 2015-12-28 23:01:45,200 > delete the network serivce entrie
[INFO|NSManager.py:175] 2015-12-28 23:01:45,201 > 0 entries are deleted
[INFO|NSManager.py:169] 2015-12-28 23:01:50,171 > delete the network serivce entrie
[INFO|NSManager.py:175] 2015-12-28 23:01:50,172 > 1 entries are deleted
[INFO|NSManager.py:40] 2015-12-28 23:02:22,912 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-28 23:02:22,912 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-28 23:02:22,912 > name is ok
[DEBUG|NSManager.py:106] 2015-12-28 23:02:22,912 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-28 23:02:22,913 > egress_endpoint is OK
[DEBUG|NSManager.py:91] 2015-12-28 23:02:22,914 > {'vnffg': 'testing_vnffg', 'egress_endpoint': 'br-office-ep', 'name': 'testing', 'ingress_endpoint': 'br-server-ep', '_id': ObjectId('56822ffe1d41c8668932a21f'), 'tenant': 'default'}
[INFO|NSManager.py:92] 2015-12-28 23:02:22,915 > The network service insertion is completed
[INFO|SFCManager.py:573] 2015-12-28 23:04:32,051 > validate_NS
[DEBUG|SFCManager.py:579] 2015-12-28 23:04:32,052 > load ns entry (testing)
[INFO|SFCManager.py:600] 2015-12-28 23:04:32,054 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:04:32,054 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:04:32,055 > egress_endpoint loading is completed(br-office-ep)
[INFO|SFCManager.py:537] 2015-12-28 23:04:32,055 > VNFFG loading is completed(testing_vnffg)
[INFO|SFCManager.py:585] 2015-12-28 23:06:07,648 > validate_NS
[DEBUG|SFCManager.py:591] 2015-12-28 23:06:07,648 > load ns entry (testing)
[INFO|SFCManager.py:612] 2015-12-28 23:06:07,650 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:06:07,650 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:06:07,651 > egress_endpoint loading is completed(br-office-ep)
[INFO|SFCManager.py:585] 2015-12-28 23:06:30,218 > validate_NS
[DEBUG|SFCManager.py:591] 2015-12-28 23:06:30,219 > load ns entry (testing)
[INFO|SFCManager.py:612] 2015-12-28 23:06:30,220 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:06:30,221 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:06:30,222 > egress_endpoint loading is completed(br-office-ep)
[INFO|SFCManager.py:585] 2015-12-28 23:06:59,954 > validate_NS
[DEBUG|SFCManager.py:591] 2015-12-28 23:06:59,955 > load ns entry (testing)
[INFO|SFCManager.py:612] 2015-12-28 23:06:59,956 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:06:59,957 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:06:59,957 > egress_endpoint loading is completed(br-office-ep)
[INFO|SFCManager.py:585] 2015-12-28 23:17:19,954 > validate_NS
[DEBUG|SFCManager.py:591] 2015-12-28 23:17:19,955 > load ns entry (testing)
[INFO|SFCManager.py:612] 2015-12-28 23:17:19,956 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:17:19,956 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:17:19,957 > egress_endpoint loading is completed(br-office-ep)
[INFO|SFCManager.py:585] 2015-12-28 23:18:37,847 > validate_NS
[DEBUG|SFCManager.py:591] 2015-12-28 23:18:37,847 > load ns entry (testing)
[INFO|SFCManager.py:612] 2015-12-28 23:18:37,849 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:18:37,849 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:18:37,850 > egress_endpoint loading is completed(br-office-ep)
[INFO|SFCManager.py:585] 2015-12-28 23:18:46,946 > validate_NS
[DEBUG|SFCManager.py:591] 2015-12-28 23:18:46,947 > load ns entry (testing)
[INFO|SFCManager.py:612] 2015-12-28 23:18:46,948 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:18:46,949 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:18:46,949 > egress_endpoint loading is completed(br-office-ep)
[INFO|SFCManager.py:585] 2015-12-28 23:18:57,581 > validate_NS
[DEBUG|SFCManager.py:591] 2015-12-28 23:18:57,582 > load ns entry (testing)
[INFO|SFCManager.py:612] 2015-12-28 23:18:57,599 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:18:57,602 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:18:57,603 > egress_endpoint loading is completed(br-office-ep)
[INFO|SFCManager.py:585] 2015-12-28 23:19:10,061 > validate_NS
[DEBUG|SFCManager.py:591] 2015-12-28 23:19:10,062 > load ns entry (testing)
[INFO|SFCManager.py:612] 2015-12-28 23:19:10,063 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:19:10,064 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:19:10,064 > egress_endpoint loading is completed(br-office-ep)
[INFO|SFCManager.py:585] 2015-12-28 23:20:16,614 > validate_NS
[DEBUG|SFCManager.py:591] 2015-12-28 23:20:16,615 > load ns entry (testing)
[INFO|SFCManager.py:612] 2015-12-28 23:20:16,616 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:20:16,617 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:20:16,617 > egress_endpoint loading is completed(br-office-ep)
[INFO|SFCManager.py:585] 2015-12-28 23:20:59,844 > validate_NS
[DEBUG|SFCManager.py:591] 2015-12-28 23:20:59,845 > load ns entry (testing)
[INFO|SFCManager.py:612] 2015-12-28 23:20:59,846 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:20:59,847 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:20:59,847 > egress_endpoint loading is completed(br-office-ep)
[INFO|SFCManager.py:585] 2015-12-28 23:21:06,230 > validate_NS
[DEBUG|SFCManager.py:591] 2015-12-28 23:21:06,231 > load ns entry (testing)
[INFO|SFCManager.py:612] 2015-12-28 23:21:06,232 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:21:06,233 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:21:06,233 > egress_endpoint loading is completed(br-office-ep)
[INFO|SFCManager.py:585] 2015-12-28 23:22:40,433 > validate_NS
[DEBUG|SFCManager.py:591] 2015-12-28 23:22:40,434 > load ns entry (testing)
[INFO|SFCManager.py:612] 2015-12-28 23:22:40,436 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:22:40,436 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:22:40,437 > egress_endpoint loading is completed(br-office-ep)
[INFO|SFCManager.py:585] 2015-12-28 23:24:38,541 > validate_NS
[DEBUG|SFCManager.py:591] 2015-12-28 23:24:38,542 > load ns entry (testing)
[INFO|SFCManager.py:612] 2015-12-28 23:24:38,544 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:24:38,545 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:24:38,545 > egress_endpoint loading is completed(br-office-ep)
[INFO|SFCManager.py:585] 2015-12-28 23:25:45,572 > validate_NS
[DEBUG|SFCManager.py:591] 2015-12-28 23:25:45,573 > load ns entry (testing)
[INFO|SFCManager.py:612] 2015-12-28 23:25:45,574 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:25:45,575 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:25:45,576 > egress_endpoint loading is completed(br-office-ep)
[INFO|SFCManager.py:585] 2015-12-28 23:25:49,465 > validate_NS
[DEBUG|SFCManager.py:591] 2015-12-28 23:25:49,466 > load ns entry (testing)
[INFO|SFCManager.py:612] 2015-12-28 23:25:49,467 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:25:49,467 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:25:49,468 > egress_endpoint loading is completed(br-office-ep)
[INFO|SFCManager.py:585] 2015-12-28 23:26:34,374 > validate_NS
[DEBUG|SFCManager.py:591] 2015-12-28 23:26:34,375 > load ns entry (testing)
[INFO|SFCManager.py:612] 2015-12-28 23:26:34,376 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:26:34,377 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:26:34,377 > egress_endpoint loading is completed(br-office-ep)
[INFO|SFCManager.py:585] 2015-12-28 23:26:37,066 > validate_NS
[DEBUG|SFCManager.py:591] 2015-12-28 23:26:37,067 > load ns entry (testing)
[INFO|SFCManager.py:612] 2015-12-28 23:26:37,068 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:26:37,068 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:26:37,069 > egress_endpoint loading is completed(br-office-ep)
[INFO|SFCManager.py:585] 2015-12-28 23:30:49,109 > validate_NS
[DEBUG|SFCManager.py:591] 2015-12-28 23:30:49,113 > load ns entry (testing)
[INFO|SFCManager.py:612] 2015-12-28 23:30:49,115 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:30:49,116 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:30:49,116 > egress_endpoint loading is completed(br-office-ep)
[INFO|SFCManager.py:585] 2015-12-28 23:31:02,059 > validate_NS
[DEBUG|SFCManager.py:591] 2015-12-28 23:31:02,060 > load ns entry (testing)
[INFO|SFCManager.py:612] 2015-12-28 23:31:02,061 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:31:02,062 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:31:02,062 > egress_endpoint loading is completed(br-office-ep)
[INFO|SFCManager.py:585] 2015-12-28 23:33:13,873 > validate_NS
[DEBUG|SFCManager.py:591] 2015-12-28 23:33:13,874 > load ns entry (testing)
[INFO|SFCManager.py:612] 2015-12-28 23:33:13,875 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:33:13,876 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:33:13,876 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 23:33:13,878 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:33:13,880 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:33:13,886 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 63,
            "shortPortNumber": 63
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-28 23:33:13,887 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:33:13,887 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/60/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:33:13,931 > [
    {
        "port": {
            "length": 4,
            "portNumber": 60,
            "shortPortNumber": 60
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[INFO|SFCManager.py:585] 2015-12-28 23:33:41,975 > validate_NS
[DEBUG|SFCManager.py:591] 2015-12-28 23:33:41,976 > load ns entry (testing)
[INFO|SFCManager.py:612] 2015-12-28 23:33:41,978 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:33:41,978 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:33:41,979 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 23:33:41,981 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:33:41,983 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:33:41,999 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 63,
            "shortPortNumber": 63
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-28 23:33:41,999 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:33:41,999 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/60/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:33:42,050 > [
    {
        "port": {
            "length": 4,
            "portNumber": 60,
            "shortPortNumber": 60
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:703] 2015-12-28 23:33:42,053 > load ns entry (testing)
[DEBUG|SFCManager.py:711] 2015-12-28 23:33:42,054 > load tenant entry (testing)
[INFO|SFCManager.py:585] 2015-12-28 23:41:23,775 > validate_NS
[DEBUG|SFCManager.py:591] 2015-12-28 23:41:23,776 > load ns entry (testing)
[INFO|SFCManager.py:612] 2015-12-28 23:41:23,777 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:41:23,778 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:41:23,778 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 23:41:23,780 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:41:23,782 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:41:27,984 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 63,
            "shortPortNumber": 63
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-28 23:41:27,984 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:41:27,985 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/60/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:41:28,036 > [
    {
        "port": {
            "length": 4,
            "portNumber": 60,
            "shortPortNumber": 60
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:703] 2015-12-28 23:41:28,039 > load ns entry (testing)
[DEBUG|SFCManager.py:711] 2015-12-28 23:41:28,040 > load tenant entry (testing)
[INFO|OpenflowHandler.py:95] 2015-12-28 23:41:28,043 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:41:28,043 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:41:28,043 > request_curl_post_data: {"name": "testing_default_0", "actions": "output=3", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 1}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:41:28,046 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:41:28,047 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:41:28,047 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:41:28,047 > request_curl_post_data: {"name": "testing_default_0_reverse", "actions": "output=1", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:41:28,066 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:41:28,066 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:41:28,066 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:41:28,067 > request_curl_post_data: {"name": "testing_default_1", "actions": "output=63", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 9}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:41:28,069 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:41:28,070 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:41:28,070 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:41:28,070 > request_curl_post_data: {"name": "testing_default_1_reverse", "actions": "output=9", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 63}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:41:28,076 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:41:28,076 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:41:28,077 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:41:28,077 > request_curl_post_data: {"name": "testing_default_2", "actions": "output=8", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 60}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:41:28,106 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:41:28,106 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:41:28,106 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:41:28,107 > request_curl_post_data: {"name": "testing_default_2_reverse", "actions": "output=60", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 8}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:41:28,126 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:41:28,127 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:41:28,127 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:41:28,127 > request_curl_post_data: {"name": "testing_default_3", "actions": "output=4", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:41:28,130 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:41:28,130 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:41:28,131 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:41:28,131 > request_curl_post_data: {"name": "testing_default_3_reverse", "actions": "output=3", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 4}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:41:28,133 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:41:28,134 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:41:28,134 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:41:28,137 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "testing_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035997551865418",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_3": {
                "command": "ADD",
                "cookie": "45035998866574551",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "testing_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035997389354727",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_0": {
                "command": "ADD",
                "cookie": "45035998866574548",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "testing_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035998929350953",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "60"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_1_reverse": {
                "command": "ADD",
                "cookie": "45036000306836488",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "9"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_1": {
                "command": "ADD",
                "cookie": "45035998866574549",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "63"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_2": {
                "command": "ADD",
                "cookie": "45035998866574550",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:41:35,324 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:41:35,326 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:41:35,329 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "testing_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035997551865418",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_3": {
                "command": "ADD",
                "cookie": "45035998866574551",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "testing_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035997389354727",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_0": {
                "command": "ADD",
                "cookie": "45035998866574548",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "testing_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035998929350953",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "60"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_1_reverse": {
                "command": "ADD",
                "cookie": "45036000306836488",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "9"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_1": {
                "command": "ADD",
                "cookie": "45035998866574549",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "63"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_2": {
                "command": "ADD",
                "cookie": "45035998866574550",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:42:30,384 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:42:30,385 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:42:30,426 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "testing_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035997551865418",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_3": {
                "command": "ADD",
                "cookie": "45035998866574551",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "testing_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035997389354727",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_0": {
                "command": "ADD",
                "cookie": "45035998866574548",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "testing_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035998929350953",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "60"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_1_reverse": {
                "command": "ADD",
                "cookie": "45036000306836488",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "9"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_1": {
                "command": "ADD",
                "cookie": "45035998866574549",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "63"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_2": {
                "command": "ADD",
                "cookie": "45035998866574550",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:42:30,428 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:42:30,429 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:42:30,433 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:42:30,433 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:42:30,433 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:42:30,457 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|SFCManager.py:585] 2015-12-28 23:42:37,609 > validate_NS
[DEBUG|SFCManager.py:591] 2015-12-28 23:42:37,610 > load ns entry (bypass)
[INFO|SFCManager.py:612] 2015-12-28 23:42:37,611 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:42:37,612 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:42:37,612 > egress_endpoint loading is completed(br-office-ep)
[DEBUG|SFCManager.py:703] 2015-12-28 23:42:37,613 > load ns entry (bypass)
[DEBUG|SFCManager.py:711] 2015-12-28 23:42:37,615 > load tenant entry (bypass)
[INFO|OpenflowHandler.py:131] 2015-12-28 23:42:55,212 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:42:55,214 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:42:55,242 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:42:55,243 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:42:55,243 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:42:55,261 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:42:55,261 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:42:55,262 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:42:55,282 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|SFCManager.py:585] 2015-12-28 23:42:56,841 > validate_NS
[DEBUG|SFCManager.py:591] 2015-12-28 23:42:56,842 > load ns entry (bypass)
[INFO|SFCManager.py:612] 2015-12-28 23:42:56,844 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:42:56,844 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:42:56,845 > egress_endpoint loading is completed(br-office-ep)
[DEBUG|SFCManager.py:703] 2015-12-28 23:42:56,846 > load ns entry (bypass)
[DEBUG|SFCManager.py:711] 2015-12-28 23:42:56,848 > load tenant entry (bypass)
[INFO|OpenflowHandler.py:131] 2015-12-28 23:43:27,564 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:43:27,565 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:43:27,594 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|SFCManager.py:585] 2015-12-28 23:43:44,503 > validate_NS
[DEBUG|SFCManager.py:591] 2015-12-28 23:43:44,504 > load ns entry (bypass)
[INFO|SFCManager.py:612] 2015-12-28 23:43:44,505 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:43:44,506 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:43:44,506 > egress_endpoint loading is completed(br-office-ep)
[DEBUG|SFCManager.py:703] 2015-12-28 23:43:44,508 > load ns entry (bypass)
[DEBUG|SFCManager.py:711] 2015-12-28 23:43:44,509 > load tenant entry (bypass)
[INFO|SFCManager.py:585] 2015-12-28 23:43:52,838 > validate_NS
[DEBUG|SFCManager.py:591] 2015-12-28 23:43:52,839 > load ns entry (testing)
[INFO|SFCManager.py:612] 2015-12-28 23:43:52,841 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:43:52,841 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:43:52,842 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 23:43:52,844 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:43:52,845 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:43:52,885 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 63,
            "shortPortNumber": 63
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-28 23:43:52,886 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:43:52,886 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/60/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:43:52,907 > [
    {
        "port": {
            "length": 4,
            "portNumber": 60,
            "shortPortNumber": 60
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:703] 2015-12-28 23:43:52,912 > load ns entry (testing)
[DEBUG|SFCManager.py:711] 2015-12-28 23:43:52,914 > load tenant entry (testing)
[INFO|SFCManager.py:585] 2015-12-28 23:43:54,259 > validate_NS
[DEBUG|SFCManager.py:591] 2015-12-28 23:43:54,260 > load ns entry (testing)
[INFO|SFCManager.py:612] 2015-12-28 23:43:54,262 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:43:54,262 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:43:54,263 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 23:43:54,265 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:43:54,266 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:43:54,270 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 63,
            "shortPortNumber": 63
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-28 23:43:54,271 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:43:54,271 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/60/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:43:54,306 > [
    {
        "port": {
            "length": 4,
            "portNumber": 60,
            "shortPortNumber": 60
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:703] 2015-12-28 23:43:54,309 > load ns entry (testing)
[DEBUG|SFCManager.py:711] 2015-12-28 23:43:54,310 > load tenant entry (testing)
[INFO|SFCManager.py:585] 2015-12-28 23:43:57,342 > validate_NS
[DEBUG|SFCManager.py:591] 2015-12-28 23:43:57,343 > load ns entry (bypass)
[INFO|SFCManager.py:612] 2015-12-28 23:43:57,345 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:43:57,345 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:43:57,346 > egress_endpoint loading is completed(br-office-ep)
[DEBUG|SFCManager.py:703] 2015-12-28 23:43:57,347 > load ns entry (bypass)
[DEBUG|SFCManager.py:711] 2015-12-28 23:43:57,349 > load tenant entry (bypass)
[INFO|SFCManager.py:585] 2015-12-28 23:44:54,827 > validate_NS
[DEBUG|SFCManager.py:591] 2015-12-28 23:44:54,827 > load ns entry (bypass)
[INFO|SFCManager.py:612] 2015-12-28 23:44:54,829 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:44:54,829 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:44:54,830 > egress_endpoint loading is completed(br-office-ep)
[INFO|SFCManager.py:575] 2015-12-28 23:45:28,525 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-28 23:45:28,526 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-28 23:45:28,528 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:45:28,529 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:45:28,529 > egress_endpoint loading is completed(br-office-ep)
[INFO|SFCManager.py:575] 2015-12-28 23:45:40,878 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-28 23:45:40,879 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-28 23:45:40,880 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:45:40,881 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:45:40,881 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 23:45:40,882 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:45:40,884 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:45:40,962 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[INFO|SFCManager.py:575] 2015-12-28 23:45:53,214 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-28 23:45:53,215 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-28 23:45:53,217 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:45:53,217 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:45:53,218 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 23:45:53,220 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:45:53,222 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:45:53,226 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-28 23:45:53,229 > load ns entry (bypass)
[DEBUG|SFCManager.py:701] 2015-12-28 23:45:53,230 > load tenant entry (bypass)
[INFO|OpenflowHandler.py:131] 2015-12-28 23:46:38,396 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:46:38,398 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:46:38,402 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:46:38,402 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:46:38,402 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:46:38,404 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:46:38,404 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:46:38,404 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:46:38,407 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:47:51,114 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:47:51,115 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:47:51,118 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:47:51,119 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:47:51,119 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:47:51,122 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:47:51,122 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:47:51,122 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:47:51,126 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:165] 2015-12-28 23:48:23,468 > get_switch_port
[INFO|OpenflowHandler.py:131] 2015-12-28 23:48:23,468 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:48:23,470 > request_curl_url: http://192.168.17.179:8080/wm/core/switch/all/port/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:48:25,014 > {
    "00:00:00:0c:29:7d:49:ec": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "552000000",
                "durationSec": "21019",
                "portNumber": "4",
                "receiveBytes": "811808",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "6818",
                "transmitBytes": "1267899",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "12140"
            },
            {
                "collisions": "0",
                "durationNsec": "431000000",
                "durationSec": "35600",
                "portNumber": "local",
                "receiveBytes": "237230",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "2531",
                "transmitBytes": "726796",
                "transmitDropped": "1218",
                "transmitErrors": "0",
                "transmitPackets": "5328"
            },
            {
                "collisions": "0",
                "durationNsec": "758000000",
                "durationSec": "35562",
                "portNumber": "3",
                "receiveBytes": "2936631",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "24109",
                "transmitBytes": "1008642",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "10238"
            }
        ],
        "version": "OF_13"
    },
    "00:00:00:0c:29:7d:49:f6": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "264000000",
                "durationSec": "35600",
                "portNumber": "local",
                "receiveBytes": "11646",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "94",
                "transmitBytes": "473828",
                "transmitDropped": "2728",
                "transmitErrors": "0",
                "transmitPackets": "3197"
            },
            {
                "collisions": "0",
                "durationNsec": "268000000",
                "durationSec": "35600",
                "portNumber": "1",
                "receiveBytes": "362250",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "2250",
                "transmitBytes": "738474",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "6519"
            },
            {
                "collisions": "0",
                "durationNsec": "854000000",
                "durationSec": "35561",
                "portNumber": "3",
                "receiveBytes": "2114934",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "16782",
                "transmitBytes": "447818",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3579"
            }
        ],
        "version": "OF_13"
    },
    "00:00:4a:72:d4:24:ae:41": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "268000000",
                "durationSec": "35600",
                "portNumber": "local",
                "receiveBytes": "33565",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "393",
                "transmitBytes": "556819",
                "transmitDropped": "84",
                "transmitErrors": "0",
                "transmitPackets": "3811"
            },
            {
                "collisions": "0",
                "durationNsec": "391000000",
                "durationSec": "35565",
                "portNumber": "2",
                "receiveBytes": "2456586",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "18749",
                "transmitBytes": "108529",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "1621"
            }
        ],
        "version": "OF_13"
    },
    "00:00:ee:42:21:d6:e1:44": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "627000000",
                "durationSec": "26444",
                "portNumber": "56",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "663422",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "4455"
            },
            {
                "collisions": "0",
                "durationNsec": "395000000",
                "durationSec": "35600",
                "portNumber": "local",
                "receiveBytes": "16431",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "124",
                "transmitBytes": "1385733",
                "transmitDropped": "7551",
                "transmitErrors": "0",
                "transmitPackets": "10121"
            },
            {
                "collisions": "0",
                "durationNsec": "894000000",
                "durationSec": "35562",
                "portNumber": "8",
                "receiveBytes": "1008642",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "10238",
                "transmitBytes": "2936631",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "24109"
            },
            {
                "collisions": "0",
                "durationNsec": "50000000",
                "durationSec": "35561",
                "portNumber": "10",
                "receiveBytes": "1173578",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8851",
                "transmitBytes": "1389673",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "11389"
            },
            {
                "collisions": "0",
                "durationNsec": "429000000",
                "durationSec": "28988",
                "portNumber": "37",
                "receiveBytes": "31141",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "267",
                "transmitBytes": "761824",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "6652"
            },
            {
                "collisions": "0",
                "durationNsec": "295000000",
                "durationSec": "28989",
                "portNumber": "36",
                "receiveBytes": "30151",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "271",
                "transmitBytes": "834975",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "7594"
            },
            {
                "collisions": "0",
                "durationNsec": "353000000",
                "durationSec": "35600",
                "portNumber": "25",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "543532",
                "transmitDropped": "29",
                "transmitErrors": "0",
                "transmitPackets": "3742"
            },
            {
                "collisions": "0",
                "durationNsec": "935000000",
                "durationSec": "19263",
                "portNumber": "63",
                "receiveBytes": "15628",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "144",
                "transmitBytes": "679112",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "5952"
            },
            {
                "collisions": "0",
                "durationNsec": "202000000",
                "durationSec": "19265",
                "portNumber": "62",
                "receiveBytes": "10961",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "88",
                "transmitBytes": "662446",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "5835"
            },
            {
                "collisions": "0",
                "durationNsec": "493000000",
                "durationSec": "26431",
                "portNumber": "57",
                "receiveBytes": "6308",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "50",
                "transmitBytes": "576563",
                "transmitDropped": "1",
                "transmitErrors": "0",
                "transmitPackets": "4242"
            },
            {
                "collisions": "0",
                "durationNsec": "220000000",
                "durationSec": "26467",
                "portNumber": "54",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "797814",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "5517"
            },
            {
                "collisions": "0",
                "durationNsec": "505000000",
                "durationSec": "28987",
                "portNumber": "38",
                "receiveBytes": "28528",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "241",
                "transmitBytes": "700421",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "6093"
            },
            {
                "collisions": "0",
                "durationNsec": "2000000",
                "durationSec": "35562",
                "portNumber": "9",
                "receiveBytes": "447818",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "3579",
                "transmitBytes": "2114934",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "16782"
            },
            {
                "collisions": "0",
                "durationNsec": "148000000",
                "durationSec": "26456",
                "portNumber": "55",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "557998",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3929"
            },
            {
                "collisions": "0",
                "durationNsec": "673000000",
                "durationSec": "28986",
                "portNumber": "39",
                "receiveBytes": "29332",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "247",
                "transmitBytes": "896075",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "7322"
            },
            {
                "collisions": "0",
                "durationNsec": "335000000",
                "durationSec": "19262",
                "portNumber": "64",
                "receiveBytes": "12257",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "98",
                "transmitBytes": "686391",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "5961"
            },
            {
                "collisions": "0",
                "durationNsec": "430000000",
                "durationSec": "19266",
                "portNumber": "61",
                "receiveBytes": "11500",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "95",
                "transmitBytes": "664697",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "5858"
            },
            {
                "collisions": "0",
                "durationNsec": "588000000",
                "durationSec": "35565",
                "portNumber": "6",
                "receiveBytes": "108529",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "1621",
                "transmitBytes": "2456586",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "18749"
            },
            {
                "collisions": "0",
                "durationNsec": "553000000",
                "durationSec": "35564",
                "portNumber": "7",
                "receiveBytes": "0",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "0",
                "transmitBytes": "2563042",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "20239"
            },
            {
                "collisions": "0",
                "durationNsec": "817000000",
                "durationSec": "28985",
                "portNumber": "40",
                "receiveBytes": "27159",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "220",
                "transmitBytes": "1049000",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "8640"
            },
            {
                "collisions": "0",
                "durationNsec": "334000000",
                "durationSec": "19267",
                "portNumber": "60",
                "receiveBytes": "677805",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "6670",
                "transmitBytes": "1349839",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "13053"
            }
        ],
        "version": "OF_13"
    }
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:48:25,016 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:48:25,017 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:48:25,019 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:48:25,019 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:48:25,019 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:48:25,021 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:48:25,021 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:48:25,021 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:48:25,023 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:48:25,023 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:48:25,023 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:48:25,023 > request_curl_post_data: {"name": "56 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "56"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:48:25,100 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:48:25,100 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:48:25,100 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:48:25,100 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:48:25,104 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:48:25,104 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:48:25,104 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:48:25,104 > request_curl_post_data: {"name": "8 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "8"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:48:25,174 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:48:25,174 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:48:25,174 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:48:25,175 > request_curl_post_data: {"name": "10 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "10"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:48:25,177 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:48:25,178 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:48:25,178 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:48:25,178 > request_curl_post_data: {"name": "37 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "37"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:48:25,181 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:48:25,181 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:48:25,181 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:48:25,182 > request_curl_post_data: {"name": "36 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "36"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:48:25,185 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:48:25,186 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:48:25,186 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:48:25,186 > request_curl_post_data: {"name": "25 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "25"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:48:25,191 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:48:25,192 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:48:25,192 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:48:25,193 > request_curl_post_data: {"name": "63 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "63"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:48:25,198 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:48:25,198 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:48:25,198 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:48:25,198 > request_curl_post_data: {"name": "62 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "62"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:48:25,207 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:48:25,208 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:48:25,208 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:48:25,208 > request_curl_post_data: {"name": "57 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "57"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:48:25,213 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:48:25,213 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:48:25,214 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:48:25,214 > request_curl_post_data: {"name": "54 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "54"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:48:25,221 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:48:25,221 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:48:25,222 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:48:25,222 > request_curl_post_data: {"name": "38 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "38"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:48:25,243 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:48:25,243 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:48:25,243 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:48:25,243 > request_curl_post_data: {"name": "9 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "9"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:48:25,296 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:48:25,296 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:48:25,296 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:48:25,297 > request_curl_post_data: {"name": "55 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "55"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:48:25,317 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:48:25,318 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:48:25,318 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:48:25,318 > request_curl_post_data: {"name": "39 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "39"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:48:25,352 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:48:25,352 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:48:25,353 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:48:25,353 > request_curl_post_data: {"name": "64 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "64"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:48:25,356 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:48:25,356 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:48:25,357 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:48:25,357 > request_curl_post_data: {"name": "61 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "61"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:48:25,397 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:48:25,398 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:48:25,398 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:48:25,398 > request_curl_post_data: {"name": "6 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "6"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:48:25,402 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:48:25,402 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:48:25,403 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:48:25,403 > request_curl_post_data: {"name": "7 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "7"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:48:25,420 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:48:25,420 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:48:25,420 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:48:25,420 > request_curl_post_data: {"name": "40 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "40"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:48:25,423 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:48:25,423 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:48:25,424 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:48:25,424 > request_curl_post_data: {"name": "60 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "60"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:48:25,428 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:48:25,428 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:48:25,428 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:48:25,428 > request_curl_post_data: {"name": "4 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "4"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:48:25,432 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:48:25,432 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:48:25,432 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:48:25,433 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:48:25,437 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:48:25,438 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:48:25,439 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:48:25,439 > request_curl_post_data: {"name": "3 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "3"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:48:25,452 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:48:25,453 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:48:25,453 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:48:25,453 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:48:25,455 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:48:25,456 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:48:25,456 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:48:25,456 > request_curl_post_data: {"name": "2 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "2"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:48:25,458 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:48:25,459 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:48:25,459 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:48:25,459 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:48:25,483 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:48:25,484 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:48:25,484 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:48:25,484 > request_curl_post_data: {"name": "1 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "1"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:48:25,497 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:48:25,497 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:48:25,497 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:48:25,498 > request_curl_post_data: {"name": "3 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "3"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:48:25,501 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:48:47,736 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:48:47,738 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:48:47,778 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "4 port drop rule": {
                "command": "ADD",
                "cookie": "45035999682764009",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "1 port drop rule": {
                "command": "ADD",
                "cookie": "45035997137007768",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "3 port drop rule": {
                "command": "ADD",
                "cookie": "45035997402522830",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [
        {
            "2 port drop rule": {
                "command": "ADD",
                "cookie": "45035999417248947",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "2"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "54 port drop rule": {
                "command": "ADD",
                "cookie": "45035999813688220",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "54"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "39 port drop rule": {
                "command": "ADD",
                "cookie": "45035998140888993",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "55 port drop rule": {
                "command": "ADD",
                "cookie": "45035997798962103",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "55"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "62 port drop rule": {
                "command": "ADD",
                "cookie": "45035999642724775",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "62"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "7 port drop rule": {
                "command": "ADD",
                "cookie": "45035997933552954",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "8 port drop rule": {
                "command": "ADD",
                "cookie": "45036000213794133",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "37 port drop rule": {
                "command": "ADD",
                "cookie": "45035997875373931",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "37"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "25 port drop rule": {
                "command": "ADD",
                "cookie": "45035997515307252",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "25"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "9 port drop rule": {
                "command": "ADD",
                "cookie": "45035998199068016",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "63 port drop rule": {
                "command": "ADD",
                "cookie": "45035997627998658",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "10 port drop rule": {
                "command": "ADD",
                "cookie": "45035998904451628",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "10"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "40 port drop rule": {
                "command": "ADD",
                "cookie": "45035999188106479",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "40"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "38 port drop rule": {
                "command": "ADD",
                "cookie": "45036000155615110",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "38"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "36 port drop rule": {
                "command": "ADD",
                "cookie": "45035999890100048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "61 port drop rule": {
                "command": "ADD",
                "cookie": "45035997362483596",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "61"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "60 port drop rule": {
                "command": "ADD",
                "cookie": "45035999377209713",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "64 port drop rule": {
                "command": "ADD",
                "cookie": "45035999908239837",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "64"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "56 port drop rule": {
                "command": "ADD",
                "cookie": "45036000079203282",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "56"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "6 port drop rule": {
                "command": "ADD",
                "cookie": "45035999948279071",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "6"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "57 port drop rule": {
                "command": "ADD",
                "cookie": "45035998064477165",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "57"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:48:47,780 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:48:47,781 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:48:47,805 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:48:47,806 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:48:47,806 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:48:47,823 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:165] 2015-12-28 23:49:00,957 > get_switch_port
[INFO|OpenflowHandler.py:131] 2015-12-28 23:49:00,958 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:49:00,959 > request_curl_url: http://192.168.17.179:8080/wm/core/switch/all/port/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:49:01,998 > {
    "00:00:00:0c:29:7d:49:ec": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "671000000",
                "durationSec": "21056",
                "portNumber": "4",
                "receiveBytes": "812750",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "6828",
                "transmitBytes": "1269432",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "12157"
            },
            {
                "collisions": "0",
                "durationNsec": "550000000",
                "durationSec": "35637",
                "portNumber": "local",
                "receiveBytes": "237230",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "2531",
                "transmitBytes": "727145",
                "transmitDropped": "1218",
                "transmitErrors": "0",
                "transmitPackets": "5331"
            },
            {
                "collisions": "0",
                "durationNsec": "877000000",
                "durationSec": "35599",
                "portNumber": "3",
                "receiveBytes": "2938026",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "24124",
                "transmitBytes": "1009706",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "10250"
            }
        ],
        "version": "OF_13"
    },
    "00:00:00:0c:29:7d:49:f6": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "347000000",
                "durationSec": "35637",
                "portNumber": "local",
                "receiveBytes": "11646",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "94",
                "transmitBytes": "474177",
                "transmitDropped": "2728",
                "transmitErrors": "0",
                "transmitPackets": "3200"
            },
            {
                "collisions": "0",
                "durationNsec": "351000000",
                "durationSec": "35637",
                "portNumber": "1",
                "receiveBytes": "362506",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "2253",
                "transmitBytes": "739181",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "6527"
            },
            {
                "collisions": "0",
                "durationNsec": "937000000",
                "durationSec": "35598",
                "portNumber": "3",
                "receiveBytes": "2115503",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "16788",
                "transmitBytes": "448294",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3585"
            }
        ],
        "version": "OF_13"
    },
    "00:00:4a:72:d4:24:ae:41": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "378000000",
                "durationSec": "35637",
                "portNumber": "local",
                "receiveBytes": "33565",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "393",
                "transmitBytes": "557168",
                "transmitDropped": "84",
                "transmitErrors": "0",
                "transmitPackets": "3814"
            },
            {
                "collisions": "0",
                "durationNsec": "501000000",
                "durationSec": "35602",
                "portNumber": "2",
                "receiveBytes": "2457057",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "18754",
                "transmitBytes": "108651",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "1623"
            }
        ],
        "version": "OF_13"
    },
    "00:00:ee:42:21:d6:e1:44": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "746000000",
                "durationSec": "26481",
                "portNumber": "56",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "663771",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "4458"
            },
            {
                "collisions": "0",
                "durationNsec": "514000000",
                "durationSec": "35637",
                "portNumber": "local",
                "receiveBytes": "16431",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "124",
                "transmitBytes": "1386082",
                "transmitDropped": "7551",
                "transmitErrors": "0",
                "transmitPackets": "10124"
            },
            {
                "collisions": "0",
                "durationNsec": "13000000",
                "durationSec": "35600",
                "portNumber": "8",
                "receiveBytes": "1009706",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "10250",
                "transmitBytes": "2938026",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "24124"
            },
            {
                "collisions": "0",
                "durationNsec": "169000000",
                "durationSec": "35598",
                "portNumber": "10",
                "receiveBytes": "1173787",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8852",
                "transmitBytes": "1390073",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "11395"
            },
            {
                "collisions": "0",
                "durationNsec": "548000000",
                "durationSec": "29025",
                "portNumber": "37",
                "receiveBytes": "31141",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "267",
                "transmitBytes": "762433",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "6659"
            },
            {
                "collisions": "0",
                "durationNsec": "414000000",
                "durationSec": "29026",
                "portNumber": "36",
                "receiveBytes": "30151",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "271",
                "transmitBytes": "835584",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "7601"
            },
            {
                "collisions": "0",
                "durationNsec": "472000000",
                "durationSec": "35637",
                "portNumber": "25",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "543881",
                "transmitDropped": "29",
                "transmitErrors": "0",
                "transmitPackets": "3745"
            },
            {
                "collisions": "0",
                "durationNsec": "54000000",
                "durationSec": "19301",
                "portNumber": "63",
                "receiveBytes": "15866",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "147",
                "transmitBytes": "679837",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "5960"
            },
            {
                "collisions": "0",
                "durationNsec": "321000000",
                "durationSec": "19302",
                "portNumber": "62",
                "receiveBytes": "10961",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "88",
                "transmitBytes": "663055",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "5842"
            },
            {
                "collisions": "0",
                "durationNsec": "612000000",
                "durationSec": "26468",
                "portNumber": "57",
                "receiveBytes": "6308",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "50",
                "transmitBytes": "576912",
                "transmitDropped": "1",
                "transmitErrors": "0",
                "transmitPackets": "4245"
            },
            {
                "collisions": "0",
                "durationNsec": "339000000",
                "durationSec": "26504",
                "portNumber": "54",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "798163",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "5520"
            },
            {
                "collisions": "0",
                "durationNsec": "624000000",
                "durationSec": "29024",
                "portNumber": "38",
                "receiveBytes": "28528",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "241",
                "transmitBytes": "701030",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "6100"
            },
            {
                "collisions": "0",
                "durationNsec": "121000000",
                "durationSec": "35599",
                "portNumber": "9",
                "receiveBytes": "448294",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "3585",
                "transmitBytes": "2115503",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "16788"
            },
            {
                "collisions": "0",
                "durationNsec": "267000000",
                "durationSec": "26493",
                "portNumber": "55",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "558347",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3932"
            },
            {
                "collisions": "0",
                "durationNsec": "792000000",
                "durationSec": "29023",
                "portNumber": "39",
                "receiveBytes": "29332",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "247",
                "transmitBytes": "896684",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "7329"
            },
            {
                "collisions": "0",
                "durationNsec": "453000000",
                "durationSec": "19299",
                "portNumber": "64",
                "receiveBytes": "12257",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "98",
                "transmitBytes": "687000",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "5968"
            },
            {
                "collisions": "0",
                "durationNsec": "548000000",
                "durationSec": "19303",
                "portNumber": "61",
                "receiveBytes": "11500",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "95",
                "transmitBytes": "665306",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "5865"
            },
            {
                "collisions": "0",
                "durationNsec": "706000000",
                "durationSec": "35602",
                "portNumber": "6",
                "receiveBytes": "108651",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "1623",
                "transmitBytes": "2457057",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "18754"
            },
            {
                "collisions": "0",
                "durationNsec": "671000000",
                "durationSec": "35601",
                "portNumber": "7",
                "receiveBytes": "0",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "0",
                "transmitBytes": "2563651",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "20246"
            },
            {
                "collisions": "0",
                "durationNsec": "935000000",
                "durationSec": "29022",
                "portNumber": "40",
                "receiveBytes": "27159",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "220",
                "transmitBytes": "1049609",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "8647"
            },
            {
                "collisions": "0",
                "durationNsec": "453000000",
                "durationSec": "19304",
                "portNumber": "60",
                "receiveBytes": "678729",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "6680",
                "transmitBytes": "1351390",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "13070"
            }
        ],
        "version": "OF_13"
    }
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:49:02,001 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:49:02,001 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:49:02,032 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:49:02,032 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:49:02,032 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:49:02,049 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:49:02,049 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:49:02,050 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:49:02,052 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:49:02,052 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:49:02,052 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:49:02,052 > request_curl_post_data: {"name": "56 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "56"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:49:02,055 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:49:02,055 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:49:02,055 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:49:02,055 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:49:02,058 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:49:02,058 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:49:02,058 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:49:02,058 > request_curl_post_data: {"name": "8 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "8"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:49:02,061 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:49:02,061 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:49:02,062 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:49:02,062 > request_curl_post_data: {"name": "10 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "10"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:49:02,065 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:49:02,066 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:49:02,066 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:49:02,066 > request_curl_post_data: {"name": "37 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "37"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:49:02,077 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:49:02,078 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:49:02,078 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:49:02,078 > request_curl_post_data: {"name": "36 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "36"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:49:02,081 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:49:02,081 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:49:02,081 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:49:02,081 > request_curl_post_data: {"name": "25 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "25"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:49:02,084 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:49:02,084 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:49:02,084 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:49:02,084 > request_curl_post_data: {"name": "63 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "63"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:49:02,088 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:49:02,088 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:49:02,088 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:49:02,088 > request_curl_post_data: {"name": "62 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "62"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:49:02,091 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:49:02,092 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:49:02,092 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:49:02,092 > request_curl_post_data: {"name": "57 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "57"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:49:02,097 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:49:02,097 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:49:02,097 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:49:02,098 > request_curl_post_data: {"name": "54 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "54"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:49:02,102 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:49:02,103 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:49:02,103 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:49:02,103 > request_curl_post_data: {"name": "38 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "38"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:49:02,120 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:49:02,121 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:49:02,121 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:49:02,121 > request_curl_post_data: {"name": "9 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "9"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:49:02,124 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:49:02,124 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:49:02,125 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:49:02,125 > request_curl_post_data: {"name": "55 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "55"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:49:02,131 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:49:02,131 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:49:02,131 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:49:02,131 > request_curl_post_data: {"name": "39 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "39"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:49:02,135 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:49:02,135 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:49:02,136 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:49:02,136 > request_curl_post_data: {"name": "64 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "64"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:49:02,172 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:49:02,173 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:49:02,173 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:49:02,173 > request_curl_post_data: {"name": "61 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "61"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:49:02,176 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:49:02,177 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:49:02,177 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:49:02,177 > request_curl_post_data: {"name": "6 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "6"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:49:02,180 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:49:02,180 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:49:02,181 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:49:02,181 > request_curl_post_data: {"name": "7 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "7"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:49:02,184 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:49:02,184 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:49:02,185 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:49:02,185 > request_curl_post_data: {"name": "40 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "40"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:49:02,188 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:49:02,189 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:49:02,189 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:49:02,189 > request_curl_post_data: {"name": "60 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "60"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:49:02,210 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:49:02,211 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:49:02,211 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:49:02,211 > request_curl_post_data: {"name": "4 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "4"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:49:02,214 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:49:02,215 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:49:02,215 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:49:02,215 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:49:02,218 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:49:02,218 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:49:02,218 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:49:02,219 > request_curl_post_data: {"name": "3 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "3"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:49:02,224 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:49:02,225 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:49:02,225 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:49:02,225 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:49:02,231 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:49:02,232 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:49:02,232 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:49:02,232 > request_curl_post_data: {"name": "2 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "2"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:49:02,235 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:49:02,235 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:49:02,235 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:49:02,236 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:49:02,239 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:49:02,239 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:49:02,239 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:49:02,239 > request_curl_post_data: {"name": "1 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "1"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:49:02,243 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:49:02,243 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:49:02,243 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:49:02,243 > request_curl_post_data: {"name": "3 port drop rule", "actions": "output=drop", "priority": "0", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "3"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:49:02,246 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:49:08,053 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:49:08,054 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:49:08,072 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "4 port drop rule": {
                "command": "ADD",
                "cookie": "45035999682764009",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "1 port drop rule": {
                "command": "ADD",
                "cookie": "45035997137007768",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "3 port drop rule": {
                "command": "ADD",
                "cookie": "45035997402522830",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [
        {
            "2 port drop rule": {
                "command": "ADD",
                "cookie": "45035999417248947",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "2"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "54 port drop rule": {
                "command": "ADD",
                "cookie": "45035999813688220",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "54"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "39 port drop rule": {
                "command": "ADD",
                "cookie": "45035998140888993",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "55 port drop rule": {
                "command": "ADD",
                "cookie": "45035997798962103",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "55"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "62 port drop rule": {
                "command": "ADD",
                "cookie": "45035999642724775",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "62"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "7 port drop rule": {
                "command": "ADD",
                "cookie": "45035997933552954",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "9 port drop rule": {
                "command": "ADD",
                "cookie": "45035998199068016",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "25 port drop rule": {
                "command": "ADD",
                "cookie": "45035997515307252",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "25"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "37 port drop rule": {
                "command": "ADD",
                "cookie": "45035997875373931",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "37"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "8 port drop rule": {
                "command": "ADD",
                "cookie": "45036000213794133",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "63 port drop rule": {
                "command": "ADD",
                "cookie": "45035997627998658",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "10 port drop rule": {
                "command": "ADD",
                "cookie": "45035998904451628",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "10"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "40 port drop rule": {
                "command": "ADD",
                "cookie": "45035999188106479",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "40"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "38 port drop rule": {
                "command": "ADD",
                "cookie": "45036000155615110",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "38"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "36 port drop rule": {
                "command": "ADD",
                "cookie": "45035999890100048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "61 port drop rule": {
                "command": "ADD",
                "cookie": "45035997362483596",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "61"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "60 port drop rule": {
                "command": "ADD",
                "cookie": "45035999377209713",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "64 port drop rule": {
                "command": "ADD",
                "cookie": "45035999908239837",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "64"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "56 port drop rule": {
                "command": "ADD",
                "cookie": "45036000079203282",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "56"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "6 port drop rule": {
                "command": "ADD",
                "cookie": "45035999948279071",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "6"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "57 port drop rule": {
                "command": "ADD",
                "cookie": "45035998064477165",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "57"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:50:04,294 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:50:04,296 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:50:04,333 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "4 port drop rule": {
                "command": "ADD",
                "cookie": "45035999682764009",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "1 port drop rule": {
                "command": "ADD",
                "cookie": "45035997137007768",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "3 port drop rule": {
                "command": "ADD",
                "cookie": "45035997402522830",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [
        {
            "2 port drop rule": {
                "command": "ADD",
                "cookie": "45035999417248947",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "2"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "54 port drop rule": {
                "command": "ADD",
                "cookie": "45035999813688220",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "54"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "39 port drop rule": {
                "command": "ADD",
                "cookie": "45035998140888993",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "55 port drop rule": {
                "command": "ADD",
                "cookie": "45035997798962103",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "55"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "62 port drop rule": {
                "command": "ADD",
                "cookie": "45035999642724775",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "62"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "7 port drop rule": {
                "command": "ADD",
                "cookie": "45035997933552954",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "9 port drop rule": {
                "command": "ADD",
                "cookie": "45035998199068016",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "25 port drop rule": {
                "command": "ADD",
                "cookie": "45035997515307252",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "25"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "37 port drop rule": {
                "command": "ADD",
                "cookie": "45035997875373931",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "37"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "8 port drop rule": {
                "command": "ADD",
                "cookie": "45036000213794133",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "63 port drop rule": {
                "command": "ADD",
                "cookie": "45035997627998658",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "10 port drop rule": {
                "command": "ADD",
                "cookie": "45035998904451628",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "10"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "40 port drop rule": {
                "command": "ADD",
                "cookie": "45035999188106479",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "40"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "38 port drop rule": {
                "command": "ADD",
                "cookie": "45036000155615110",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "38"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "36 port drop rule": {
                "command": "ADD",
                "cookie": "45035999890100048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "61 port drop rule": {
                "command": "ADD",
                "cookie": "45035997362483596",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "61"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "60 port drop rule": {
                "command": "ADD",
                "cookie": "45035999377209713",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "64 port drop rule": {
                "command": "ADD",
                "cookie": "45035999908239837",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "64"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "56 port drop rule": {
                "command": "ADD",
                "cookie": "45036000079203282",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "56"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "6 port drop rule": {
                "command": "ADD",
                "cookie": "45035999948279071",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "6"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        },
        {
            "57 port drop rule": {
                "command": "ADD",
                "cookie": "45035998064477165",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "57"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "0",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:50:04,336 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:50:04,336 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:50:04,359 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:50:04,359 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:50:04,360 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:50:04,362 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:165] 2015-12-28 23:50:06,804 > get_switch_port
[INFO|OpenflowHandler.py:131] 2015-12-28 23:50:06,804 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:50:06,805 > request_curl_url: http://192.168.17.179:8080/wm/core/switch/all/port/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:50:07,835 > {
    "00:00:00:0c:29:7d:49:ec": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "508000000",
                "durationSec": "21122",
                "portNumber": "4",
                "receiveBytes": "812750",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "6828",
                "transmitBytes": "1270758",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "12171"
            },
            {
                "collisions": "0",
                "durationNsec": "386000000",
                "durationSec": "35703",
                "portNumber": "local",
                "receiveBytes": "237230",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "2531",
                "transmitBytes": "727951",
                "transmitDropped": "1218",
                "transmitErrors": "0",
                "transmitPackets": "5337"
            },
            {
                "collisions": "0",
                "durationNsec": "713000000",
                "durationSec": "35665",
                "portNumber": "3",
                "receiveBytes": "2939076",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "24134",
                "transmitBytes": "1009950",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "10254"
            }
        ],
        "version": "OF_13"
    },
    "00:00:00:0c:29:7d:49:f6": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "191000000",
                "durationSec": "35703",
                "portNumber": "local",
                "receiveBytes": "11840",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "96",
                "transmitBytes": "474789",
                "transmitDropped": "2728",
                "transmitErrors": "0",
                "transmitPackets": "3204"
            },
            {
                "collisions": "0",
                "durationNsec": "195000000",
                "durationSec": "35703",
                "portNumber": "1",
                "receiveBytes": "362822",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "2257",
                "transmitBytes": "740787",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "6545"
            },
            {
                "collisions": "0",
                "durationNsec": "781000000",
                "durationSec": "35664",
                "portNumber": "3",
                "receiveBytes": "2116639",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "16800",
                "transmitBytes": "449048",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3595"
            }
        ],
        "version": "OF_13"
    },
    "00:00:4a:72:d4:24:ae:41": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "222000000",
                "durationSec": "35703",
                "portNumber": "local",
                "receiveBytes": "33565",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "393",
                "transmitBytes": "557974",
                "transmitDropped": "84",
                "transmitErrors": "0",
                "transmitPackets": "3820"
            },
            {
                "collisions": "0",
                "durationNsec": "345000000",
                "durationSec": "35668",
                "portNumber": "2",
                "receiveBytes": "2458107",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "18764",
                "transmitBytes": "108895",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "1627"
            }
        ],
        "version": "OF_13"
    },
    "00:00:ee:42:21:d6:e1:44": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "579000000",
                "durationSec": "26547",
                "portNumber": "56",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "664577",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "4464"
            },
            {
                "collisions": "0",
                "durationNsec": "347000000",
                "durationSec": "35703",
                "portNumber": "local",
                "receiveBytes": "16431",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "124",
                "transmitBytes": "1386888",
                "transmitDropped": "7551",
                "transmitErrors": "0",
                "transmitPackets": "10130"
            },
            {
                "collisions": "0",
                "durationNsec": "846000000",
                "durationSec": "35665",
                "portNumber": "8",
                "receiveBytes": "1009950",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "10254",
                "transmitBytes": "2939076",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "24134"
            },
            {
                "collisions": "0",
                "durationNsec": "2000000",
                "durationSec": "35664",
                "portNumber": "10",
                "receiveBytes": "1174399",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8856",
                "transmitBytes": "1390787",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "11405"
            },
            {
                "collisions": "0",
                "durationNsec": "381000000",
                "durationSec": "29091",
                "portNumber": "37",
                "receiveBytes": "31141",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "267",
                "transmitBytes": "763759",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "6673"
            },
            {
                "collisions": "0",
                "durationNsec": "248000000",
                "durationSec": "29092",
                "portNumber": "36",
                "receiveBytes": "30151",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "271",
                "transmitBytes": "836910",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "7615"
            },
            {
                "collisions": "0",
                "durationNsec": "306000000",
                "durationSec": "35703",
                "portNumber": "25",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "544687",
                "transmitDropped": "29",
                "transmitErrors": "0",
                "transmitPackets": "3751"
            },
            {
                "collisions": "0",
                "durationNsec": "888000000",
                "durationSec": "19366",
                "portNumber": "63",
                "receiveBytes": "16146",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "151",
                "transmitBytes": "681479",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "5978"
            },
            {
                "collisions": "0",
                "durationNsec": "155000000",
                "durationSec": "19368",
                "portNumber": "62",
                "receiveBytes": "10961",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "88",
                "transmitBytes": "664381",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "5856"
            },
            {
                "collisions": "0",
                "durationNsec": "446000000",
                "durationSec": "26534",
                "portNumber": "57",
                "receiveBytes": "6308",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "50",
                "transmitBytes": "577718",
                "transmitDropped": "1",
                "transmitErrors": "0",
                "transmitPackets": "4251"
            },
            {
                "collisions": "0",
                "durationNsec": "173000000",
                "durationSec": "26570",
                "portNumber": "54",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "798969",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "5526"
            },
            {
                "collisions": "0",
                "durationNsec": "458000000",
                "durationSec": "29090",
                "portNumber": "38",
                "receiveBytes": "28528",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "241",
                "transmitBytes": "702356",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "6114"
            },
            {
                "collisions": "0",
                "durationNsec": "955000000",
                "durationSec": "35664",
                "portNumber": "9",
                "receiveBytes": "449048",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "3595",
                "transmitBytes": "2116639",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "16800"
            },
            {
                "collisions": "0",
                "durationNsec": "101000000",
                "durationSec": "26559",
                "portNumber": "55",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "559153",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3938"
            },
            {
                "collisions": "0",
                "durationNsec": "626000000",
                "durationSec": "29089",
                "portNumber": "39",
                "receiveBytes": "29332",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "247",
                "transmitBytes": "898010",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "7343"
            },
            {
                "collisions": "0",
                "durationNsec": "288000000",
                "durationSec": "19365",
                "portNumber": "64",
                "receiveBytes": "12257",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "98",
                "transmitBytes": "688326",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "5982"
            },
            {
                "collisions": "0",
                "durationNsec": "383000000",
                "durationSec": "19369",
                "portNumber": "61",
                "receiveBytes": "11500",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "95",
                "transmitBytes": "666632",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "5879"
            },
            {
                "collisions": "0",
                "durationNsec": "541000000",
                "durationSec": "35668",
                "portNumber": "6",
                "receiveBytes": "108895",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "1627",
                "transmitBytes": "2458107",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "18764"
            },
            {
                "collisions": "0",
                "durationNsec": "506000000",
                "durationSec": "35667",
                "portNumber": "7",
                "receiveBytes": "0",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "0",
                "transmitBytes": "2564977",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "20260"
            },
            {
                "collisions": "0",
                "durationNsec": "770000000",
                "durationSec": "29088",
                "portNumber": "40",
                "receiveBytes": "27159",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "220",
                "transmitBytes": "1050935",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "8661"
            },
            {
                "collisions": "0",
                "durationNsec": "287000000",
                "durationSec": "19370",
                "portNumber": "60",
                "receiveBytes": "678729",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "6680",
                "transmitBytes": "1352716",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "13084"
            }
        ],
        "version": "OF_13"
    }
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:50:07,838 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:50:07,838 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:50:07,841 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:50:07,841 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:50:07,841 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:50:07,858 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:50:07,858 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:50:07,858 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:50:07,861 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:50:07,861 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:50:07,861 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:50:07,861 > request_curl_post_data: {"name": "56 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "56"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:50:07,864 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:50:07,864 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:50:07,864 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:50:07,864 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:50:07,894 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:50:07,894 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:50:07,894 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:50:07,894 > request_curl_post_data: {"name": "8 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "8"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:50:07,897 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:50:07,897 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:50:07,898 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:50:07,898 > request_curl_post_data: {"name": "10 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "10"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:50:07,900 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:50:07,901 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:50:07,901 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:50:07,901 > request_curl_post_data: {"name": "37 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "37"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:50:07,904 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:50:07,905 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:50:07,905 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:50:07,905 > request_curl_post_data: {"name": "36 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "36"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:50:07,909 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:50:07,909 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:50:07,909 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:50:07,910 > request_curl_post_data: {"name": "25 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "25"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:50:07,943 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:50:07,944 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:50:07,944 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:50:07,945 > request_curl_post_data: {"name": "63 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "63"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:50:07,950 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:50:07,951 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:50:07,951 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:50:07,951 > request_curl_post_data: {"name": "62 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "62"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:50:07,953 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:50:07,954 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:50:07,954 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:50:07,954 > request_curl_post_data: {"name": "57 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "57"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:50:07,956 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:50:07,957 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:50:07,957 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:50:07,957 > request_curl_post_data: {"name": "54 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "54"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:50:07,960 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:50:07,961 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:50:07,961 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:50:07,961 > request_curl_post_data: {"name": "38 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "38"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:50:07,964 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:50:07,965 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:50:07,965 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:50:07,965 > request_curl_post_data: {"name": "9 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "9"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:50:07,969 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:50:07,969 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:50:07,969 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:50:07,969 > request_curl_post_data: {"name": "55 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "55"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:50:07,973 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:50:07,973 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:50:07,973 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:50:07,974 > request_curl_post_data: {"name": "39 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "39"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:50:07,979 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:50:07,979 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:50:07,980 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:50:07,980 > request_curl_post_data: {"name": "64 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "64"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:50:07,984 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:50:07,984 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:50:07,984 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:50:07,984 > request_curl_post_data: {"name": "61 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "61"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:50:07,988 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:50:07,988 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:50:07,988 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:50:07,988 > request_curl_post_data: {"name": "6 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "6"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:50:07,991 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:50:07,992 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:50:07,992 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:50:07,992 > request_curl_post_data: {"name": "7 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "7"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:50:07,995 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:50:07,996 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:50:07,996 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:50:07,997 > request_curl_post_data: {"name": "40 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "40"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:50:08,001 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:50:08,001 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:50:08,001 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:50:08,001 > request_curl_post_data: {"name": "60 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "60"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:50:08,006 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:50:08,006 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:50:08,007 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:50:08,007 > request_curl_post_data: {"name": "4 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "4"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:50:08,013 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:50:08,014 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:50:08,014 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:50:08,014 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:50:08,017 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:50:08,017 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:50:08,017 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:50:08,017 > request_curl_post_data: {"name": "3 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "3"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:50:08,043 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:50:08,044 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:50:08,044 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:50:08,044 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:50:08,047 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:50:08,047 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:50:08,047 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:50:08,048 > request_curl_post_data: {"name": "2 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "2"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:50:08,050 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:50:08,051 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:50:08,051 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:50:08,051 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:50:08,054 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:50:08,054 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:50:08,055 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:50:08,055 > request_curl_post_data: {"name": "1 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "1"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:50:08,086 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:50:08,086 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:50:08,086 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:50:08,087 > request_curl_post_data: {"name": "3 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "3"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:50:08,125 > {
    "status": "Entry pushed"
}
[INFO|SFCManager.py:575] 2015-12-28 23:50:35,951 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-28 23:50:35,952 > load ns entry (testing)
[INFO|SFCManager.py:602] 2015-12-28 23:50:35,953 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:50:35,954 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:50:35,954 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 23:50:35,956 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:50:35,958 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:50:35,962 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 63,
            "shortPortNumber": 63
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-28 23:50:35,963 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:50:35,963 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/60/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:50:36,013 > [
    {
        "port": {
            "length": 4,
            "portNumber": 60,
            "shortPortNumber": 60
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-28 23:50:36,015 > load ns entry (testing)
[DEBUG|SFCManager.py:701] 2015-12-28 23:50:36,016 > load tenant entry (testing)
[INFO|SFCManager.py:575] 2015-12-28 23:50:47,847 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-28 23:50:47,848 > load ns entry (testing)
[INFO|SFCManager.py:602] 2015-12-28 23:50:47,849 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:50:47,850 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:50:47,850 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 23:50:47,853 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:50:47,854 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:156] 2015-12-28 23:50:47,938 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-28 23:50:47,938 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-28 23:50:47,939 > load ns entry (testing)
[DEBUG|SFCManager.py:701] 2015-12-28 23:50:47,941 > load tenant entry (testing)
[INFO|SFCManager.py:575] 2015-12-28 23:50:49,646 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-28 23:50:49,647 > load ns entry (testing)
[INFO|SFCManager.py:602] 2015-12-28 23:50:49,648 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:50:49,649 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:50:49,649 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 23:50:49,652 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:50:49,654 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:156] 2015-12-28 23:50:49,660 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-28 23:50:49,660 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-28 23:50:49,661 > load ns entry (testing)
[DEBUG|SFCManager.py:701] 2015-12-28 23:50:49,662 > load tenant entry (testing)
[INFO|SFCManager.py:575] 2015-12-28 23:50:53,572 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-28 23:50:53,573 > load ns entry (testing)
[INFO|SFCManager.py:602] 2015-12-28 23:50:53,575 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:50:53,575 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:50:53,576 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 23:50:53,578 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:50:53,579 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:156] 2015-12-28 23:50:53,615 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-28 23:50:53,615 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-28 23:50:53,616 > load ns entry (testing)
[DEBUG|SFCManager.py:701] 2015-12-28 23:50:53,618 > load tenant entry (testing)
[INFO|SFCManager.py:575] 2015-12-28 23:50:59,250 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-28 23:50:59,251 > load ns entry (testing)
[INFO|SFCManager.py:602] 2015-12-28 23:50:59,253 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:50:59,253 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:50:59,254 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 23:50:59,256 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:50:59,257 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:156] 2015-12-28 23:50:59,276 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-28 23:50:59,276 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-28 23:50:59,277 > load ns entry (testing)
[DEBUG|SFCManager.py:701] 2015-12-28 23:50:59,282 > load tenant entry (testing)
[INFO|OpenflowHandler.py:131] 2015-12-28 23:51:20,430 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:51:20,432 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:51:20,464 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "4 port drop rule": {
                "command": "ADD",
                "cookie": "45035999682764009",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "1 port drop rule": {
                "command": "ADD",
                "cookie": "45035997137007768",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "3 port drop rule": {
                "command": "ADD",
                "cookie": "45035997402522830",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [
        {
            "2 port drop rule": {
                "command": "ADD",
                "cookie": "45035999417248947",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "2"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "54 port drop rule": {
                "command": "ADD",
                "cookie": "45035999813688220",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "54"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "39 port drop rule": {
                "command": "ADD",
                "cookie": "45035998140888993",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "55 port drop rule": {
                "command": "ADD",
                "cookie": "45035997798962103",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "55"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "62 port drop rule": {
                "command": "ADD",
                "cookie": "45035999642724775",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "62"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "7 port drop rule": {
                "command": "ADD",
                "cookie": "45035997933552954",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "9 port drop rule": {
                "command": "ADD",
                "cookie": "45035998199068016",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "25 port drop rule": {
                "command": "ADD",
                "cookie": "45035997515307252",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "25"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "37 port drop rule": {
                "command": "ADD",
                "cookie": "45035997875373931",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "37"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "8 port drop rule": {
                "command": "ADD",
                "cookie": "45036000213794133",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "63 port drop rule": {
                "command": "ADD",
                "cookie": "45035997627998658",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "10 port drop rule": {
                "command": "ADD",
                "cookie": "45035998904451628",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "10"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "40 port drop rule": {
                "command": "ADD",
                "cookie": "45035999188106479",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "40"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "38 port drop rule": {
                "command": "ADD",
                "cookie": "45036000155615110",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "38"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "36 port drop rule": {
                "command": "ADD",
                "cookie": "45035999890100048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "61 port drop rule": {
                "command": "ADD",
                "cookie": "45035997362483596",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "61"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "60 port drop rule": {
                "command": "ADD",
                "cookie": "45035999377209713",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "64 port drop rule": {
                "command": "ADD",
                "cookie": "45035999908239837",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "64"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "56 port drop rule": {
                "command": "ADD",
                "cookie": "45036000079203282",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "56"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "6 port drop rule": {
                "command": "ADD",
                "cookie": "45035999948279071",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "6"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "57 port drop rule": {
                "command": "ADD",
                "cookie": "45035998064477165",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "57"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:51:20,469 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:51:20,469 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:51:20,476 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:51:20,476 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:51:20,476 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:51:20,478 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|SFCManager.py:575] 2015-12-28 23:51:23,070 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-28 23:51:23,071 > load ns entry (testing)
[INFO|SFCManager.py:602] 2015-12-28 23:51:23,072 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:51:23,073 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:51:23,073 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 23:51:23,075 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:51:23,077 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:51:23,118 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 63,
            "shortPortNumber": 63
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-28 23:51:23,118 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:51:23,118 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/60/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:51:23,121 > [
    {
        "port": {
            "length": 4,
            "portNumber": 60,
            "shortPortNumber": 60
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-28 23:51:23,123 > load ns entry (testing)
[DEBUG|SFCManager.py:701] 2015-12-28 23:51:23,124 > load tenant entry (testing)
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:23,127 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:23,128 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:23,128 > request_curl_post_data: {"name": "testing_default_0", "actions": "output=3", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 1}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:23,132 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:23,133 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:23,133 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:23,134 > request_curl_post_data: {"name": "testing_default_0_reverse", "actions": "output=1", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:23,138 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:23,139 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:23,139 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:23,139 > request_curl_post_data: {"name": "testing_default_1", "actions": "output=63", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 9}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:23,143 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:23,143 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:23,143 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:23,144 > request_curl_post_data: {"name": "testing_default_1_reverse", "actions": "output=9", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 63}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:23,152 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:23,153 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:23,153 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:23,153 > request_curl_post_data: {"name": "testing_default_2", "actions": "output=8", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 60}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:23,156 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:23,156 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:23,156 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:23,156 > request_curl_post_data: {"name": "testing_default_2_reverse", "actions": "output=60", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 8}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:23,177 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:23,177 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:23,177 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:23,177 > request_curl_post_data: {"name": "testing_default_3", "actions": "output=4", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:23,180 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:23,181 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:23,181 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:23,181 > request_curl_post_data: {"name": "testing_default_3_reverse", "actions": "output=3", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 4}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:23,184 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:51:23,185 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:51:23,185 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:51:23,203 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "testing_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035997551865418",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_3": {
                "command": "ADD",
                "cookie": "45035998866574551",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "testing_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035997389354727",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_0": {
                "command": "ADD",
                "cookie": "45035998866574548",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "testing_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035998929350953",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "60"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_1": {
                "command": "ADD",
                "cookie": "45035998866574549",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "63"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_2": {
                "command": "ADD",
                "cookie": "45035998866574550",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_1_reverse": {
                "command": "ADD",
                "cookie": "45036000306836488",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "9"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|SFCManager.py:575] 2015-12-28 23:51:25,703 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-28 23:51:25,704 > load ns entry (testing)
[INFO|SFCManager.py:602] 2015-12-28 23:51:25,705 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:51:25,706 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:51:25,706 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 23:51:25,708 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:51:25,710 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:51:25,715 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 63,
            "shortPortNumber": 63
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-28 23:51:25,715 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:51:25,716 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/60/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:51:25,718 > [
    {
        "port": {
            "length": 4,
            "portNumber": 60,
            "shortPortNumber": 60
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-28 23:51:25,720 > load ns entry (testing)
[DEBUG|SFCManager.py:701] 2015-12-28 23:51:25,722 > load tenant entry (testing)
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:25,725 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:25,725 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:25,725 > request_curl_post_data: {"name": "testing_default_0", "actions": "output=3", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 1}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:25,839 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:25,839 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:25,839 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:25,839 > request_curl_post_data: {"name": "testing_default_0_reverse", "actions": "output=1", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:25,842 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:25,842 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:25,842 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:25,842 > request_curl_post_data: {"name": "testing_default_1", "actions": "output=63", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 9}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:25,845 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:25,845 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:25,846 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:25,846 > request_curl_post_data: {"name": "testing_default_1_reverse", "actions": "output=9", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 63}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:25,848 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:25,848 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:25,849 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:25,849 > request_curl_post_data: {"name": "testing_default_2", "actions": "output=8", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 60}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:25,853 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:25,853 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:25,853 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:25,853 > request_curl_post_data: {"name": "testing_default_2_reverse", "actions": "output=60", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 8}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:25,858 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:25,859 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:25,859 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:25,859 > request_curl_post_data: {"name": "testing_default_3", "actions": "output=4", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:25,861 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:25,862 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:25,862 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:25,862 > request_curl_post_data: {"name": "testing_default_3_reverse", "actions": "output=3", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 4}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:25,885 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:51:25,885 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:51:25,885 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:51:25,888 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "testing_default_3_reverse": {
                "command": "MODIFY",
                "cookie": "45035997551865418",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_3": {
                "command": "MODIFY",
                "cookie": "45035998866574551",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "testing_default_0_reverse": {
                "command": "MODIFY",
                "cookie": "45035997389354727",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_0": {
                "command": "MODIFY",
                "cookie": "45035998866574548",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "testing_default_2_reverse": {
                "command": "MODIFY",
                "cookie": "45035998929350953",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "60"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_1": {
                "command": "MODIFY",
                "cookie": "45035998866574549",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "63"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_2": {
                "command": "MODIFY",
                "cookie": "45035998866574550",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_1_reverse": {
                "command": "MODIFY",
                "cookie": "45036000306836488",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "9"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|SFCManager.py:575] 2015-12-28 23:51:27,404 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-28 23:51:27,405 > load ns entry (testing)
[INFO|SFCManager.py:602] 2015-12-28 23:51:27,406 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:51:27,407 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:51:27,408 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 23:51:27,410 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:51:27,411 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:51:27,414 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 63,
            "shortPortNumber": 63
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-28 23:51:27,415 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:51:27,415 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/60/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:51:27,420 > [
    {
        "port": {
            "length": 4,
            "portNumber": 60,
            "shortPortNumber": 60
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-28 23:51:27,422 > load ns entry (testing)
[DEBUG|SFCManager.py:701] 2015-12-28 23:51:27,424 > load tenant entry (testing)
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:27,427 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:27,427 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:27,427 > request_curl_post_data: {"name": "testing_default_0", "actions": "output=3", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 1}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:27,431 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:27,432 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:27,432 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:27,432 > request_curl_post_data: {"name": "testing_default_0_reverse", "actions": "output=1", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:27,435 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:27,436 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:27,436 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:27,436 > request_curl_post_data: {"name": "testing_default_1", "actions": "output=63", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 9}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:27,441 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:27,443 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:27,444 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:27,444 > request_curl_post_data: {"name": "testing_default_1_reverse", "actions": "output=9", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 63}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:27,480 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:27,481 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:27,481 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:27,481 > request_curl_post_data: {"name": "testing_default_2", "actions": "output=8", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 60}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:27,485 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:27,485 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:27,485 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:27,485 > request_curl_post_data: {"name": "testing_default_2_reverse", "actions": "output=60", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 8}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:27,513 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:27,514 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:27,514 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:27,514 > request_curl_post_data: {"name": "testing_default_3", "actions": "output=4", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:27,517 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:27,517 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:27,517 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:27,518 > request_curl_post_data: {"name": "testing_default_3_reverse", "actions": "output=3", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 4}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:27,520 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:51:27,520 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:51:27,520 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:51:27,523 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "testing_default_3_reverse": {
                "command": "MODIFY",
                "cookie": "45035997551865418",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_3": {
                "command": "MODIFY",
                "cookie": "45035998866574551",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "testing_default_0_reverse": {
                "command": "MODIFY",
                "cookie": "45035997389354727",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_0": {
                "command": "MODIFY",
                "cookie": "45035998866574548",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "testing_default_2_reverse": {
                "command": "MODIFY",
                "cookie": "45035998929350953",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "60"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_1": {
                "command": "MODIFY",
                "cookie": "45035998866574549",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "63"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_2": {
                "command": "MODIFY",
                "cookie": "45035998866574550",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_1_reverse": {
                "command": "MODIFY",
                "cookie": "45036000306836488",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "9"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:51:29,618 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:51:29,619 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:51:29,622 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "testing_default_3_reverse": {
                "command": "MODIFY",
                "cookie": "45035997551865418",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_3": {
                "command": "MODIFY",
                "cookie": "45035998866574551",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "testing_default_0_reverse": {
                "command": "MODIFY",
                "cookie": "45035997389354727",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_0": {
                "command": "MODIFY",
                "cookie": "45035998866574548",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "testing_default_2_reverse": {
                "command": "MODIFY",
                "cookie": "45035998929350953",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "60"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_1": {
                "command": "MODIFY",
                "cookie": "45035998866574549",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "63"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_2": {
                "command": "MODIFY",
                "cookie": "45035998866574550",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_1_reverse": {
                "command": "MODIFY",
                "cookie": "45036000306836488",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "9"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:51:29,623 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:51:29,623 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:51:29,653 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:51:29,654 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:51:29,655 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:51:29,658 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:165] 2015-12-28 23:51:53,825 > get_switch_port
[INFO|OpenflowHandler.py:131] 2015-12-28 23:51:53,825 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:51:53,826 > request_curl_url: http://192.168.17.179:8080/wm/core/switch/all/port/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:51:54,832 > {
    "00:00:00:0c:29:7d:49:ec": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "498000000",
                "durationSec": "21229",
                "portNumber": "4",
                "receiveBytes": "813420",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "6836",
                "transmitBytes": "1272093",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "12189"
            },
            {
                "collisions": "0",
                "durationNsec": "376000000",
                "durationSec": "35810",
                "portNumber": "local",
                "receiveBytes": "237230",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "2531",
                "transmitBytes": "727951",
                "transmitDropped": "1218",
                "transmitErrors": "0",
                "transmitPackets": "5337"
            },
            {
                "collisions": "0",
                "durationNsec": "703000000",
                "durationSec": "35772",
                "portNumber": "3",
                "receiveBytes": "2940783",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "24150",
                "transmitBytes": "1010438",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "10262"
            }
        ],
        "version": "OF_13"
    },
    "00:00:00:0c:29:7d:49:f6": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "207000000",
                "durationSec": "35810",
                "portNumber": "local",
                "receiveBytes": "11840",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "96",
                "transmitBytes": "475713",
                "transmitDropped": "2728",
                "transmitErrors": "0",
                "transmitPackets": "3210"
            },
            {
                "collisions": "0",
                "durationNsec": "211000000",
                "durationSec": "35810",
                "portNumber": "1",
                "receiveBytes": "363884",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "2269",
                "transmitBytes": "743046",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "6569"
            },
            {
                "collisions": "0",
                "durationNsec": "797000000",
                "durationSec": "35771",
                "portNumber": "3",
                "receiveBytes": "2118622",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "16820",
                "transmitBytes": "449873",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3608"
            }
        ],
        "version": "OF_13"
    },
    "00:00:4a:72:d4:24:ae:41": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "211000000",
                "durationSec": "35810",
                "portNumber": "local",
                "receiveBytes": "33565",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "393",
                "transmitBytes": "559193",
                "transmitDropped": "84",
                "transmitErrors": "0",
                "transmitPackets": "3828"
            },
            {
                "collisions": "0",
                "durationNsec": "334000000",
                "durationSec": "35775",
                "portNumber": "2",
                "receiveBytes": "2460090",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "18784",
                "transmitBytes": "109720",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "1640"
            }
        ],
        "version": "OF_13"
    },
    "00:00:ee:42:21:d6:e1:44": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "572000000",
                "durationSec": "26654",
                "portNumber": "56",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "665796",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "4472"
            },
            {
                "collisions": "0",
                "durationNsec": "340000000",
                "durationSec": "35810",
                "portNumber": "local",
                "receiveBytes": "16431",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "124",
                "transmitBytes": "1388107",
                "transmitDropped": "7551",
                "transmitErrors": "0",
                "transmitPackets": "10138"
            },
            {
                "collisions": "0",
                "durationNsec": "839000000",
                "durationSec": "35772",
                "portNumber": "8",
                "receiveBytes": "1010438",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "10262",
                "transmitBytes": "2940783",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "24150"
            },
            {
                "collisions": "0",
                "durationNsec": "995000000",
                "durationSec": "35770",
                "portNumber": "10",
                "receiveBytes": "1176715",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8869",
                "transmitBytes": "1391827",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "11421"
            },
            {
                "collisions": "0",
                "durationNsec": "374000000",
                "durationSec": "29198",
                "portNumber": "37",
                "receiveBytes": "31141",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "267",
                "transmitBytes": "766018",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "6697"
            },
            {
                "collisions": "0",
                "durationNsec": "240000000",
                "durationSec": "29199",
                "portNumber": "36",
                "receiveBytes": "30151",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "271",
                "transmitBytes": "839169",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "7639"
            },
            {
                "collisions": "0",
                "durationNsec": "298000000",
                "durationSec": "35810",
                "portNumber": "25",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "545906",
                "transmitDropped": "29",
                "transmitErrors": "0",
                "transmitPackets": "3759"
            },
            {
                "collisions": "0",
                "durationNsec": "880000000",
                "durationSec": "19473",
                "portNumber": "63",
                "receiveBytes": "16146",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "151",
                "transmitBytes": "683738",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "6002"
            },
            {
                "collisions": "0",
                "durationNsec": "147000000",
                "durationSec": "19475",
                "portNumber": "62",
                "receiveBytes": "10961",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "88",
                "transmitBytes": "666640",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "5880"
            },
            {
                "collisions": "0",
                "durationNsec": "438000000",
                "durationSec": "26641",
                "portNumber": "57",
                "receiveBytes": "6308",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "50",
                "transmitBytes": "578937",
                "transmitDropped": "1",
                "transmitErrors": "0",
                "transmitPackets": "4259"
            },
            {
                "collisions": "0",
                "durationNsec": "165000000",
                "durationSec": "26677",
                "portNumber": "54",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "800188",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "5534"
            },
            {
                "collisions": "0",
                "durationNsec": "450000000",
                "durationSec": "29197",
                "portNumber": "38",
                "receiveBytes": "28528",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "241",
                "transmitBytes": "704615",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "6138"
            },
            {
                "collisions": "0",
                "durationNsec": "947000000",
                "durationSec": "35771",
                "portNumber": "9",
                "receiveBytes": "449873",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "3608",
                "transmitBytes": "2118622",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "16820"
            },
            {
                "collisions": "0",
                "durationNsec": "93000000",
                "durationSec": "26666",
                "portNumber": "55",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "560372",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3946"
            },
            {
                "collisions": "0",
                "durationNsec": "618000000",
                "durationSec": "29196",
                "portNumber": "39",
                "receiveBytes": "29332",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "247",
                "transmitBytes": "900269",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "7367"
            },
            {
                "collisions": "0",
                "durationNsec": "279000000",
                "durationSec": "19472",
                "portNumber": "64",
                "receiveBytes": "12257",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "98",
                "transmitBytes": "690585",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "6006"
            },
            {
                "collisions": "0",
                "durationNsec": "374000000",
                "durationSec": "19476",
                "portNumber": "61",
                "receiveBytes": "11500",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "95",
                "transmitBytes": "668891",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "5903"
            },
            {
                "collisions": "0",
                "durationNsec": "533000000",
                "durationSec": "35775",
                "portNumber": "6",
                "receiveBytes": "109720",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "1640",
                "transmitBytes": "2460090",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "18784"
            },
            {
                "collisions": "0",
                "durationNsec": "498000000",
                "durationSec": "35774",
                "portNumber": "7",
                "receiveBytes": "0",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "0",
                "transmitBytes": "2567236",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "20284"
            },
            {
                "collisions": "0",
                "durationNsec": "762000000",
                "durationSec": "29195",
                "portNumber": "40",
                "receiveBytes": "27159",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "220",
                "transmitBytes": "1053194",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "8685"
            },
            {
                "collisions": "0",
                "durationNsec": "279000000",
                "durationSec": "19477",
                "portNumber": "60",
                "receiveBytes": "678729",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "6680",
                "transmitBytes": "1354975",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "13108"
            }
        ],
        "version": "OF_13"
    }
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:51:54,835 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:51:54,835 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:51:54,849 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:51:54,849 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:51:54,849 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:51:54,866 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:51:54,867 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:51:54,867 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:51:54,870 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:54,871 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:54,872 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:54,872 > request_curl_post_data: {"name": "56 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "56"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:54,877 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:54,877 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:54,877 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:54,877 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:54,880 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:54,880 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:54,880 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:54,880 > request_curl_post_data: {"name": "8 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "8"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:54,883 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:54,883 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:54,884 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:54,884 > request_curl_post_data: {"name": "10 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "10"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:54,897 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:54,897 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:54,897 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:54,898 > request_curl_post_data: {"name": "37 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "37"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:54,901 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:54,901 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:54,901 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:54,901 > request_curl_post_data: {"name": "36 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "36"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:54,905 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:54,905 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:54,905 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:54,906 > request_curl_post_data: {"name": "25 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "25"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:54,912 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:54,913 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:54,913 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:54,913 > request_curl_post_data: {"name": "63 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "63"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:54,916 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:54,916 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:54,916 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:54,916 > request_curl_post_data: {"name": "62 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "62"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:54,931 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:54,932 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:54,932 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:54,932 > request_curl_post_data: {"name": "57 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "57"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:54,935 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:54,936 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:54,936 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:54,936 > request_curl_post_data: {"name": "54 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "54"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:54,941 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:54,942 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:54,942 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:54,943 > request_curl_post_data: {"name": "38 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "38"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:54,947 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:54,947 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:54,947 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:54,947 > request_curl_post_data: {"name": "9 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "9"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:54,950 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:54,950 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:54,951 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:54,951 > request_curl_post_data: {"name": "55 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "55"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:54,954 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:54,955 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:54,955 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:54,955 > request_curl_post_data: {"name": "39 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "39"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:54,962 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:54,962 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:54,962 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:54,962 > request_curl_post_data: {"name": "64 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "64"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:54,965 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:54,966 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:54,966 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:54,966 > request_curl_post_data: {"name": "61 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "61"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:54,970 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:54,970 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:54,970 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:54,971 > request_curl_post_data: {"name": "6 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "6"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:54,977 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:54,977 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:54,977 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:54,978 > request_curl_post_data: {"name": "7 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "7"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:54,989 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:54,989 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:54,989 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:54,990 > request_curl_post_data: {"name": "40 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "40"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:54,994 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:54,994 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:54,994 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:54,994 > request_curl_post_data: {"name": "60 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "60"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:54,997 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:54,997 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:54,998 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:54,998 > request_curl_post_data: {"name": "4 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "4"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:55,002 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:55,003 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:55,003 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:55,003 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:55,009 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:55,009 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:55,009 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:55,009 > request_curl_post_data: {"name": "3 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "3"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:55,012 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:55,013 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:55,013 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:55,013 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:55,015 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:55,016 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:55,016 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:55,016 > request_curl_post_data: {"name": "2 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "2"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:55,018 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:55,019 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:55,019 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:55,019 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:55,021 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:55,022 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:55,022 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:55,023 > request_curl_post_data: {"name": "1 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "1"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:55,027 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:51:55,027 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:51:55,027 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:51:55,027 > request_curl_post_data: {"name": "3 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "3"}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:51:55,031 > {
    "status": "Entry pushed"
}
[INFO|SFCManager.py:575] 2015-12-28 23:52:02,987 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-28 23:52:02,988 > load ns entry (testing)
[INFO|SFCManager.py:602] 2015-12-28 23:52:02,989 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-28 23:52:02,989 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-28 23:52:02,990 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-28 23:52:02,992 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:52:02,994 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:52:02,999 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 63,
            "shortPortNumber": 63
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-28 23:52:03,000 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:52:03,000 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/60/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:52:03,003 > [
    {
        "port": {
            "length": 4,
            "portNumber": 60,
            "shortPortNumber": 60
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-28 23:52:03,005 > load ns entry (testing)
[DEBUG|SFCManager.py:701] 2015-12-28 23:52:03,007 > load tenant entry (testing)
[INFO|OpenflowHandler.py:95] 2015-12-28 23:52:03,010 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:52:03,011 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:52:03,011 > request_curl_post_data: {"name": "testing_default_0", "actions": "output=3", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 1}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:52:03,014 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:52:03,015 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:52:03,015 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:52:03,015 > request_curl_post_data: {"name": "testing_default_0_reverse", "actions": "output=1", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:52:03,020 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:52:03,021 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:52:03,022 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:52:03,023 > request_curl_post_data: {"name": "testing_default_1", "actions": "output=63", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 9}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:52:03,026 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:52:03,027 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:52:03,027 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:52:03,027 > request_curl_post_data: {"name": "testing_default_1_reverse", "actions": "output=9", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 63}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:52:03,030 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:52:03,030 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:52:03,030 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:52:03,030 > request_curl_post_data: {"name": "testing_default_2", "actions": "output=8", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 60}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:52:03,033 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:52:03,033 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:52:03,033 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:52:03,033 > request_curl_post_data: {"name": "testing_default_2_reverse", "actions": "output=60", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 8}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:52:03,038 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:52:03,038 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:52:03,038 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:52:03,038 > request_curl_post_data: {"name": "testing_default_3", "actions": "output=4", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:52:03,041 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-28 23:52:03,041 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-28 23:52:03,041 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-28 23:52:03,041 > request_curl_post_data: {"name": "testing_default_3_reverse", "actions": "output=3", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 4}
[DEBUG|OpenflowHandler.py:126] 2015-12-28 23:52:03,045 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:52:03,046 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:52:03,046 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:52:03,053 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "4 port drop rule": {
                "command": "ADD",
                "cookie": "45035999682764009",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "testing_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035997551865418",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_3": {
                "command": "ADD",
                "cookie": "45035998866574551",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "1 port drop rule": {
                "command": "ADD",
                "cookie": "45035997137007768",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "testing_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035997389354727",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "3 port drop rule": {
                "command": "ADD",
                "cookie": "45035997402522830",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "testing_default_0": {
                "command": "ADD",
                "cookie": "45035998866574548",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [
        {
            "2 port drop rule": {
                "command": "ADD",
                "cookie": "45035999417248947",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "2"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "54 port drop rule": {
                "command": "ADD",
                "cookie": "45035999813688220",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "54"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "testing_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035998929350953",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "60"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "39 port drop rule": {
                "command": "ADD",
                "cookie": "45035998140888993",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "55 port drop rule": {
                "command": "ADD",
                "cookie": "45035997798962103",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "55"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "62 port drop rule": {
                "command": "ADD",
                "cookie": "45035999642724775",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "62"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "7 port drop rule": {
                "command": "ADD",
                "cookie": "45035997933552954",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "9 port drop rule": {
                "command": "ADD",
                "cookie": "45035998199068016",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "25 port drop rule": {
                "command": "ADD",
                "cookie": "45035997515307252",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "25"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "37 port drop rule": {
                "command": "ADD",
                "cookie": "45035997875373931",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "37"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "8 port drop rule": {
                "command": "ADD",
                "cookie": "45036000213794133",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "63 port drop rule": {
                "command": "ADD",
                "cookie": "45035997627998658",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "testing_default_1": {
                "command": "ADD",
                "cookie": "45035998866574549",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "63"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "10 port drop rule": {
                "command": "ADD",
                "cookie": "45035998904451628",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "10"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "testing_default_2": {
                "command": "ADD",
                "cookie": "45035998866574550",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "40 port drop rule": {
                "command": "ADD",
                "cookie": "45035999188106479",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "40"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "38 port drop rule": {
                "command": "ADD",
                "cookie": "45036000155615110",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "38"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "testing_default_1_reverse": {
                "command": "ADD",
                "cookie": "45036000306836488",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "9"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "36 port drop rule": {
                "command": "ADD",
                "cookie": "45035999890100048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "61 port drop rule": {
                "command": "ADD",
                "cookie": "45035997362483596",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "61"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "60 port drop rule": {
                "command": "ADD",
                "cookie": "45035999377209713",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "64 port drop rule": {
                "command": "ADD",
                "cookie": "45035999908239837",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "64"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "56 port drop rule": {
                "command": "ADD",
                "cookie": "45036000079203282",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "56"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "6 port drop rule": {
                "command": "ADD",
                "cookie": "45035999948279071",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "6"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "57 port drop rule": {
                "command": "ADD",
                "cookie": "45035998064477165",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "57"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:52:38,563 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:52:38,564 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:52:38,569 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "4 port drop rule": {
                "command": "ADD",
                "cookie": "45035999682764009",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "testing_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035997551865418",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_3": {
                "command": "ADD",
                "cookie": "45035998866574551",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "1 port drop rule": {
                "command": "ADD",
                "cookie": "45035997137007768",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "testing_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035997389354727",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "3 port drop rule": {
                "command": "ADD",
                "cookie": "45035997402522830",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "testing_default_0": {
                "command": "ADD",
                "cookie": "45035998866574548",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [
        {
            "2 port drop rule": {
                "command": "ADD",
                "cookie": "45035999417248947",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "2"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "54 port drop rule": {
                "command": "ADD",
                "cookie": "45035999813688220",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "54"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "testing_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035998929350953",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "60"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "39 port drop rule": {
                "command": "ADD",
                "cookie": "45035998140888993",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "55 port drop rule": {
                "command": "ADD",
                "cookie": "45035997798962103",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "55"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "62 port drop rule": {
                "command": "ADD",
                "cookie": "45035999642724775",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "62"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "7 port drop rule": {
                "command": "ADD",
                "cookie": "45035997933552954",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "9 port drop rule": {
                "command": "ADD",
                "cookie": "45035998199068016",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "25 port drop rule": {
                "command": "ADD",
                "cookie": "45035997515307252",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "25"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "37 port drop rule": {
                "command": "ADD",
                "cookie": "45035997875373931",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "37"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "8 port drop rule": {
                "command": "ADD",
                "cookie": "45036000213794133",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "63 port drop rule": {
                "command": "ADD",
                "cookie": "45035997627998658",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "testing_default_1": {
                "command": "ADD",
                "cookie": "45035998866574549",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "63"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "10 port drop rule": {
                "command": "ADD",
                "cookie": "45035998904451628",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "10"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "testing_default_2": {
                "command": "ADD",
                "cookie": "45035998866574550",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "40 port drop rule": {
                "command": "ADD",
                "cookie": "45035999188106479",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "40"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "38 port drop rule": {
                "command": "ADD",
                "cookie": "45036000155615110",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "38"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "testing_default_1_reverse": {
                "command": "ADD",
                "cookie": "45036000306836488",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "9"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "36 port drop rule": {
                "command": "ADD",
                "cookie": "45035999890100048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "61 port drop rule": {
                "command": "ADD",
                "cookie": "45035997362483596",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "61"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "60 port drop rule": {
                "command": "ADD",
                "cookie": "45035999377209713",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "64 port drop rule": {
                "command": "ADD",
                "cookie": "45035999908239837",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "64"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "56 port drop rule": {
                "command": "ADD",
                "cookie": "45036000079203282",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "56"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "6 port drop rule": {
                "command": "ADD",
                "cookie": "45035999948279071",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "6"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "57 port drop rule": {
                "command": "ADD",
                "cookie": "45035998064477165",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "57"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:52:38,573 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:52:38,573 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:52:38,582 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-28 23:52:38,582 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-28 23:52:38,582 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-28 23:52:38,584 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:165] 2015-12-29 00:45:32,897 > get_switch_port
[INFO|OpenflowHandler.py:131] 2015-12-29 00:45:32,897 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:45:32,899 > request_curl_url: http://192.168.17.179:8080/wm/core/switch/all/port/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 00:45:33,952 > {
    "00:00:00:0c:29:7d:49:ec": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "464000000",
                "durationSec": "24448",
                "portNumber": "4",
                "receiveBytes": "813916",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "6843",
                "transmitBytes": "3546702",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "64510"
            },
            {
                "collisions": "0",
                "durationNsec": "342000000",
                "durationSec": "39029",
                "portNumber": "local",
                "receiveBytes": "2539477",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "55128",
                "transmitBytes": "3504862",
                "transmitDropped": "1218",
                "transmitErrors": "0",
                "transmitPackets": "58057"
            },
            {
                "collisions": "0",
                "durationNsec": "669000000",
                "durationSec": "38991",
                "portNumber": "3",
                "receiveBytes": "5731365",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "77093",
                "transmitBytes": "3314865",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "62808"
            }
        ],
        "version": "OF_13"
    },
    "00:00:00:0c:29:7d:49:f6": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "174000000",
                "durationSec": "39029",
                "portNumber": "local",
                "receiveBytes": "2153262",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "51066",
                "transmitBytes": "2719478",
                "transmitDropped": "2728",
                "transmitErrors": "0",
                "transmitPackets": "55065"
            },
            {
                "collisions": "0",
                "durationNsec": "178000000",
                "durationSec": "39029",
                "portNumber": "1",
                "receiveBytes": "364298",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "2274",
                "transmitBytes": "3017753",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "58891"
            },
            {
                "collisions": "0",
                "durationNsec": "764000000",
                "durationSec": "38990",
                "portNumber": "3",
                "receiveBytes": "4376026",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "68897",
                "transmitBytes": "2593703",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "54530"
            }
        ],
        "version": "OF_13"
    },
    "00:00:4a:72:d4:24:ae:41": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "180000000",
                "durationSec": "39029",
                "portNumber": "local",
                "receiveBytes": "2177475",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "51396",
                "transmitBytes": "2803450",
                "transmitDropped": "84",
                "transmitErrors": "0",
                "transmitPackets": "55692"
            },
            {
                "collisions": "0",
                "durationNsec": "303000000",
                "durationSec": "38994",
                "portNumber": "2",
                "receiveBytes": "4717706",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "70866",
                "transmitBytes": "2255555",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "52589"
            }
        ],
        "version": "OF_13"
    },
    "00:00:ee:42:21:d6:e1:44": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "538000000",
                "durationSec": "29873",
                "portNumber": "56",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "2910999",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "56345"
            },
            {
                "collisions": "0",
                "durationNsec": "306000000",
                "durationSec": "39029",
                "portNumber": "local",
                "receiveBytes": "2157331",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "51086",
                "transmitBytes": "3632394",
                "transmitDropped": "7551",
                "transmitErrors": "0",
                "transmitPackets": "62001"
            },
            {
                "collisions": "0",
                "durationNsec": "805000000",
                "durationSec": "38991",
                "portNumber": "8",
                "receiveBytes": "3314865",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "62808",
                "transmitBytes": "5731365",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "77093"
            },
            {
                "collisions": "0",
                "durationNsec": "961000000",
                "durationSec": "38989",
                "portNumber": "10",
                "receiveBytes": "1244662",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "9269",
                "transmitBytes": "3597043",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "63322"
            },
            {
                "collisions": "0",
                "durationNsec": "340000000",
                "durationSec": "32417",
                "portNumber": "37",
                "receiveBytes": "2174221",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "51255",
                "transmitBytes": "3036792",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "58971"
            },
            {
                "collisions": "0",
                "durationNsec": "206000000",
                "durationSec": "32418",
                "portNumber": "36",
                "receiveBytes": "2717684",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "52390",
                "transmitBytes": "2043411",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "32410"
            },
            {
                "collisions": "0",
                "durationNsec": "264000000",
                "durationSec": "39029",
                "portNumber": "25",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "2791109",
                "transmitDropped": "29",
                "transmitErrors": "0",
                "transmitPackets": "55632"
            },
            {
                "collisions": "0",
                "durationNsec": "846000000",
                "durationSec": "22692",
                "portNumber": "63",
                "receiveBytes": "2158382",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "51129",
                "transmitBytes": "2956580",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "58303"
            },
            {
                "collisions": "0",
                "durationNsec": "114000000",
                "durationSec": "22694",
                "portNumber": "62",
                "receiveBytes": "2152712",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "51060",
                "transmitBytes": "2938785",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "58171"
            },
            {
                "collisions": "0",
                "durationNsec": "405000000",
                "durationSec": "29860",
                "portNumber": "57",
                "receiveBytes": "6308",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "50",
                "transmitBytes": "2824140",
                "transmitDropped": "1",
                "transmitErrors": "0",
                "transmitPackets": "56132"
            },
            {
                "collisions": "0",
                "durationNsec": "132000000",
                "durationSec": "29896",
                "portNumber": "54",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "3045391",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "57407"
            },
            {
                "collisions": "0",
                "durationNsec": "417000000",
                "durationSec": "32416",
                "portNumber": "38",
                "receiveBytes": "2171608",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "51229",
                "transmitBytes": "2975389",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "58412"
            },
            {
                "collisions": "0",
                "durationNsec": "914000000",
                "durationSec": "38990",
                "portNumber": "9",
                "receiveBytes": "2593703",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "54530",
                "transmitBytes": "4376026",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "68897"
            },
            {
                "collisions": "0",
                "durationNsec": "60000000",
                "durationSec": "29885",
                "portNumber": "55",
                "receiveBytes": "690",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "9",
                "transmitBytes": "2805575",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "55819"
            },
            {
                "collisions": "0",
                "durationNsec": "585000000",
                "durationSec": "32415",
                "portNumber": "39",
                "receiveBytes": "2183345",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "51497",
                "transmitBytes": "28858826",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "671156"
            },
            {
                "collisions": "0",
                "durationNsec": "246000000",
                "durationSec": "22691",
                "portNumber": "64",
                "receiveBytes": "2154115",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "51071",
                "transmitBytes": "2963015",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "58300"
            },
            {
                "collisions": "0",
                "durationNsec": "341000000",
                "durationSec": "22695",
                "portNumber": "61",
                "receiveBytes": "2153792",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "51073",
                "transmitBytes": "2940971",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "58194"
            },
            {
                "collisions": "0",
                "durationNsec": "499000000",
                "durationSec": "38994",
                "portNumber": "6",
                "receiveBytes": "2255555",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "52589",
                "transmitBytes": "4717706",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "70866"
            },
            {
                "collisions": "0",
                "durationNsec": "464000000",
                "durationSec": "38993",
                "portNumber": "7",
                "receiveBytes": "0",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "0",
                "transmitBytes": "4840190",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "72584"
            },
            {
                "collisions": "0",
                "durationNsec": "728000000",
                "durationSec": "32414",
                "portNumber": "40",
                "receiveBytes": "2170637",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "51213",
                "transmitBytes": "3323570",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "60954"
            },
            {
                "collisions": "0",
                "durationNsec": "245000000",
                "durationSec": "22696",
                "portNumber": "60",
                "receiveBytes": "2820867",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57657",
                "transmitBytes": "3627719",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "65408"
            }
        ],
        "version": "OF_13"
    }
}
[INFO|OpenflowHandler.py:131] 2015-12-29 00:45:33,956 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:45:33,956 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 00:45:33,958 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-29 00:45:33,959 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:45:33,959 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 00:45:33,962 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-29 00:45:33,962 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:45:33,962 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 00:45:33,964 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:45:33,965 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:45:33,965 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:45:33,965 > request_curl_post_data: {"name": "56 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "56"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:45:33,968 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:45:33,969 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:45:33,969 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:45:33,969 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:45:33,977 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:45:33,977 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:45:33,977 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:45:33,977 > request_curl_post_data: {"name": "8 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "8"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:45:33,981 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:45:33,981 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:45:33,982 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:45:33,982 > request_curl_post_data: {"name": "10 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "10"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:45:33,985 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:45:33,985 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:45:33,986 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:45:33,986 > request_curl_post_data: {"name": "37 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "37"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:45:33,991 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:45:33,991 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:45:33,992 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:45:33,992 > request_curl_post_data: {"name": "36 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "36"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:45:33,998 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:45:33,998 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:45:33,998 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:45:33,998 > request_curl_post_data: {"name": "25 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "25"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:45:34,001 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:45:34,001 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:45:34,001 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:45:34,001 > request_curl_post_data: {"name": "63 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "63"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:45:34,005 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:45:34,006 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:45:34,006 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:45:34,006 > request_curl_post_data: {"name": "62 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "62"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:45:34,009 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:45:34,009 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:45:34,009 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:45:34,009 > request_curl_post_data: {"name": "57 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "57"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:45:34,012 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:45:34,012 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:45:34,012 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:45:34,013 > request_curl_post_data: {"name": "54 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "54"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:45:34,016 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:45:34,016 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:45:34,016 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:45:34,016 > request_curl_post_data: {"name": "38 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "38"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:45:34,018 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:45:34,018 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:45:34,019 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:45:34,019 > request_curl_post_data: {"name": "9 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "9"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:45:34,026 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:45:34,027 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:45:34,027 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:45:34,027 > request_curl_post_data: {"name": "55 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "55"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:45:34,038 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:45:34,039 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:45:34,039 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:45:34,040 > request_curl_post_data: {"name": "39 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "39"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:45:34,046 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:45:34,046 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:45:34,046 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:45:34,046 > request_curl_post_data: {"name": "64 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "64"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:45:34,050 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:45:34,050 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:45:34,051 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:45:34,052 > request_curl_post_data: {"name": "61 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "61"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:45:34,057 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:45:34,057 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:45:34,058 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:45:34,058 > request_curl_post_data: {"name": "6 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "6"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:45:34,067 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:45:34,068 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:45:34,068 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:45:34,068 > request_curl_post_data: {"name": "7 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "7"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:45:34,071 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:45:34,072 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:45:34,072 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:45:34,072 > request_curl_post_data: {"name": "40 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "40"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:45:34,102 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:45:34,102 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:45:34,102 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:45:34,102 > request_curl_post_data: {"name": "60 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "60"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:45:34,107 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:45:34,108 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:45:34,108 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:45:34,108 > request_curl_post_data: {"name": "4 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "4"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:45:34,111 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:45:34,111 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:45:34,112 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:45:34,112 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:45:34,116 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:45:34,116 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:45:34,117 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:45:34,117 > request_curl_post_data: {"name": "3 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "3"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:45:34,124 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:45:34,125 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:45:34,125 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:45:34,126 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:45:34,130 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:45:34,132 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:45:34,133 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:45:34,134 > request_curl_post_data: {"name": "2 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "2"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:45:34,138 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:45:34,138 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:45:34,138 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:45:34,139 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:45:34,141 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:45:34,142 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:45:34,142 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:45:34,142 > request_curl_post_data: {"name": "1 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "1"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:45:34,145 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:45:34,146 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:45:34,146 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:45:34,146 > request_curl_post_data: {"name": "3 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "3"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:45:34,150 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-29 00:47:12,032 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:47:12,034 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 00:47:12,038 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "4 port drop rule": {
                "command": "ADD",
                "cookie": "45035999682764009",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "1 port drop rule": {
                "command": "ADD",
                "cookie": "45035997137007768",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "3 port drop rule": {
                "command": "ADD",
                "cookie": "45035997402522830",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [
        {
            "2 port drop rule": {
                "command": "ADD",
                "cookie": "45035999417248947",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "2"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "54 port drop rule": {
                "command": "ADD",
                "cookie": "45035999813688220",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "54"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "39 port drop rule": {
                "command": "ADD",
                "cookie": "45035998140888993",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "55 port drop rule": {
                "command": "ADD",
                "cookie": "45035997798962103",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "55"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "62 port drop rule": {
                "command": "ADD",
                "cookie": "45035999642724775",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "62"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "7 port drop rule": {
                "command": "ADD",
                "cookie": "45035997933552954",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "9 port drop rule": {
                "command": "ADD",
                "cookie": "45035998199068016",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "25 port drop rule": {
                "command": "ADD",
                "cookie": "45035997515307252",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "25"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "37 port drop rule": {
                "command": "ADD",
                "cookie": "45035997875373931",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "37"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "8 port drop rule": {
                "command": "ADD",
                "cookie": "45036000213794133",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "63 port drop rule": {
                "command": "ADD",
                "cookie": "45035997627998658",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "10 port drop rule": {
                "command": "ADD",
                "cookie": "45035998904451628",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "10"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "40 port drop rule": {
                "command": "ADD",
                "cookie": "45035999188106479",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "40"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "38 port drop rule": {
                "command": "ADD",
                "cookie": "45036000155615110",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "38"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "36 port drop rule": {
                "command": "ADD",
                "cookie": "45035999890100048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "61 port drop rule": {
                "command": "ADD",
                "cookie": "45035997362483596",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "61"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "60 port drop rule": {
                "command": "ADD",
                "cookie": "45035999377209713",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "64 port drop rule": {
                "command": "ADD",
                "cookie": "45035999908239837",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "64"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "56 port drop rule": {
                "command": "ADD",
                "cookie": "45036000079203282",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "56"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "6 port drop rule": {
                "command": "ADD",
                "cookie": "45035999948279071",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "6"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "57 port drop rule": {
                "command": "ADD",
                "cookie": "45035998064477165",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "57"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|SFCManager.py:575] 2015-12-29 00:48:21,594 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 00:48:21,595 > load ns entry (testing)
[INFO|SFCManager.py:602] 2015-12-29 00:48:21,597 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 00:48:21,598 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 00:48:21,599 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 00:48:21,602 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:48:21,604 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 00:48:21,626 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-29 00:48:21,627 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 00:48:21,631 > load ns entry (testing)
[DEBUG|SFCManager.py:701] 2015-12-29 00:48:21,633 > load tenant entry (testing)
[INFO|SFCManager.py:575] 2015-12-29 00:48:24,764 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 00:48:24,765 > load ns entry (testing)
[INFO|SFCManager.py:602] 2015-12-29 00:48:24,766 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 00:48:24,766 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 00:48:24,767 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 00:48:24,769 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:48:24,771 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 00:48:24,777 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-29 00:48:24,778 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 00:48:24,780 > load ns entry (testing)
[DEBUG|SFCManager.py:701] 2015-12-29 00:48:24,781 > load tenant entry (testing)
[INFO|SFCManager.py:575] 2015-12-29 00:48:52,504 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 00:48:52,505 > load ns entry (testing)
[INFO|SFCManager.py:602] 2015-12-29 00:48:52,507 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 00:48:52,507 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 00:48:52,508 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 00:48:52,510 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:48:52,512 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 00:48:52,520 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-29 00:48:52,520 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 00:48:52,521 > load ns entry (testing)
[DEBUG|SFCManager.py:701] 2015-12-29 00:48:52,523 > load tenant entry (testing)
[INFO|SFCManager.py:575] 2015-12-29 00:48:56,957 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 00:48:56,959 > load ns entry (testing)
[INFO|SFCManager.py:602] 2015-12-29 00:48:56,960 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 00:48:56,961 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 00:48:56,962 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 00:48:56,967 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:48:56,969 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 00:48:56,974 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-29 00:48:56,974 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 00:48:56,975 > load ns entry (testing)
[DEBUG|SFCManager.py:701] 2015-12-29 00:48:56,978 > load tenant entry (testing)
[INFO|SFCManager.py:575] 2015-12-29 00:48:59,494 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 00:48:59,495 > load ns entry (testing)
[INFO|SFCManager.py:602] 2015-12-29 00:48:59,497 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 00:48:59,498 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 00:48:59,499 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 00:48:59,504 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:48:59,505 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 00:48:59,512 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-29 00:48:59,513 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 00:48:59,514 > load ns entry (testing)
[DEBUG|SFCManager.py:701] 2015-12-29 00:48:59,516 > load tenant entry (testing)
[INFO|OpenflowHandler.py:131] 2015-12-29 00:49:04,831 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:49:04,835 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 00:49:04,840 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "4 port drop rule": {
                "command": "ADD",
                "cookie": "45035999682764009",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "1 port drop rule": {
                "command": "ADD",
                "cookie": "45035997137007768",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "3 port drop rule": {
                "command": "ADD",
                "cookie": "45035997402522830",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [
        {
            "2 port drop rule": {
                "command": "ADD",
                "cookie": "45035999417248947",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "2"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "54 port drop rule": {
                "command": "ADD",
                "cookie": "45035999813688220",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "54"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "39 port drop rule": {
                "command": "ADD",
                "cookie": "45035998140888993",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "55 port drop rule": {
                "command": "ADD",
                "cookie": "45035997798962103",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "55"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "62 port drop rule": {
                "command": "ADD",
                "cookie": "45035999642724775",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "62"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "7 port drop rule": {
                "command": "ADD",
                "cookie": "45035997933552954",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "9 port drop rule": {
                "command": "ADD",
                "cookie": "45035998199068016",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "25 port drop rule": {
                "command": "ADD",
                "cookie": "45035997515307252",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "25"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "37 port drop rule": {
                "command": "ADD",
                "cookie": "45035997875373931",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "37"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "8 port drop rule": {
                "command": "ADD",
                "cookie": "45036000213794133",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "63 port drop rule": {
                "command": "ADD",
                "cookie": "45035997627998658",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "10 port drop rule": {
                "command": "ADD",
                "cookie": "45035998904451628",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "10"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "40 port drop rule": {
                "command": "ADD",
                "cookie": "45035999188106479",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "40"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "38 port drop rule": {
                "command": "ADD",
                "cookie": "45036000155615110",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "38"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "36 port drop rule": {
                "command": "ADD",
                "cookie": "45035999890100048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "61 port drop rule": {
                "command": "ADD",
                "cookie": "45035997362483596",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "61"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "60 port drop rule": {
                "command": "ADD",
                "cookie": "45035999377209713",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "64 port drop rule": {
                "command": "ADD",
                "cookie": "45035999908239837",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "64"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "56 port drop rule": {
                "command": "ADD",
                "cookie": "45036000079203282",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "56"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "6 port drop rule": {
                "command": "ADD",
                "cookie": "45035999948279071",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "6"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "57 port drop rule": {
                "command": "ADD",
                "cookie": "45035998064477165",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "57"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-29 00:49:04,844 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:49:04,844 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 00:49:04,851 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-29 00:49:04,852 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:49:04,852 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 00:49:04,859 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|SFCManager.py:575] 2015-12-29 00:49:07,535 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 00:49:07,535 > load ns entry (testing)
[INFO|SFCManager.py:602] 2015-12-29 00:49:07,537 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 00:49:07,538 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 00:49:07,538 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 00:49:07,544 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:49:07,547 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 00:49:07,552 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-29 00:49:07,553 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 00:49:07,555 > load ns entry (testing)
[DEBUG|SFCManager.py:701] 2015-12-29 00:49:07,558 > load tenant entry (testing)
[INFO|SFCManager.py:575] 2015-12-29 00:49:09,019 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 00:49:09,020 > load ns entry (testing)
[INFO|SFCManager.py:602] 2015-12-29 00:49:09,022 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 00:49:09,022 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 00:49:09,023 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 00:49:09,025 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:49:09,028 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 00:49:09,036 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-29 00:49:09,036 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 00:49:09,038 > load ns entry (testing)
[DEBUG|SFCManager.py:701] 2015-12-29 00:49:09,039 > load tenant entry (testing)
[INFO|SFCManager.py:575] 2015-12-29 00:49:11,546 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 00:49:11,547 > load ns entry (testing)
[INFO|SFCManager.py:602] 2015-12-29 00:49:11,549 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 00:49:11,550 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 00:49:11,552 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 00:49:11,554 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:49:11,556 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 00:49:11,562 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-29 00:49:11,562 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 00:49:11,564 > load ns entry (testing)
[DEBUG|SFCManager.py:701] 2015-12-29 00:49:11,565 > load tenant entry (testing)
[INFO|OpenflowHandler.py:131] 2015-12-29 00:49:14,995 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:49:14,997 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 00:49:15,001 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-29 00:49:15,001 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:49:15,001 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 00:49:15,005 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-29 00:49:15,005 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:49:15,005 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 00:49:15,009 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:165] 2015-12-29 00:49:21,228 > get_switch_port
[INFO|OpenflowHandler.py:131] 2015-12-29 00:49:21,228 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:49:21,230 > request_curl_url: http://192.168.17.179:8080/wm/core/switch/all/port/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 00:49:22,237 > {
    "00:00:00:0c:29:7d:49:ec": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "770000000",
                "durationSec": "24676",
                "portNumber": "4",
                "receiveBytes": "813916",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "6843",
                "transmitBytes": "3676151",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "67565"
            },
            {
                "collisions": "0",
                "durationNsec": "648000000",
                "durationSec": "39257",
                "portNumber": "local",
                "receiveBytes": "2666976",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58153",
                "transmitBytes": "3631492",
                "transmitDropped": "1218",
                "transmitErrors": "0",
                "transmitPackets": "61072"
            },
            {
                "collisions": "0",
                "durationNsec": "975000000",
                "durationSec": "39219",
                "portNumber": "3",
                "receiveBytes": "5977861",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "82951",
                "transmitBytes": "3452351",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "66064"
            }
        ],
        "version": "OF_13"
    },
    "00:00:00:0c:29:7d:49:f6": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "480000000",
                "durationSec": "39257",
                "portNumber": "local",
                "receiveBytes": "2398736",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "56908",
                "transmitBytes": "2964865",
                "transmitDropped": "2728",
                "transmitErrors": "0",
                "transmitPackets": "60906"
            },
            {
                "collisions": "0",
                "durationNsec": "484000000",
                "durationSec": "39257",
                "portNumber": "1",
                "receiveBytes": "364298",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "2274",
                "transmitBytes": "3265284",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "64764"
            },
            {
                "collisions": "0",
                "durationNsec": "70000000",
                "durationSec": "39219",
                "portNumber": "3",
                "receiveBytes": "4678333",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "76077",
                "transmitBytes": "2849878",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "60611"
            }
        ],
        "version": "OF_13"
    },
    "00:00:4a:72:d4:24:ae:41": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "486000000",
                "durationSec": "39257",
                "portNumber": "local",
                "receiveBytes": "2422755",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57236",
                "transmitBytes": "3049031",
                "transmitDropped": "84",
                "transmitErrors": "0",
                "transmitPackets": "61535"
            },
            {
                "collisions": "0",
                "durationNsec": "609000000",
                "durationSec": "39222",
                "portNumber": "2",
                "receiveBytes": "4965229",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "76739",
                "transmitBytes": "2511830",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "58675"
            }
        ],
        "version": "OF_13"
    },
    "00:00:ee:42:21:d6:e1:44": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "845000000",
                "durationSec": "30101",
                "portNumber": "56",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "3156580",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "62188"
            },
            {
                "collisions": "0",
                "durationNsec": "613000000",
                "durationSec": "39257",
                "portNumber": "local",
                "receiveBytes": "2402611",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "56926",
                "transmitBytes": "3877975",
                "transmitDropped": "7551",
                "transmitErrors": "0",
                "transmitPackets": "67844"
            },
            {
                "collisions": "0",
                "durationNsec": "112000000",
                "durationSec": "39220",
                "portNumber": "8",
                "receiveBytes": "3452351",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "66064",
                "transmitBytes": "5977861",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "82951"
            },
            {
                "collisions": "0",
                "durationNsec": "268000000",
                "durationSec": "39218",
                "portNumber": "10",
                "receiveBytes": "1250840",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "9292",
                "transmitBytes": "3844536",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "69195"
            },
            {
                "collisions": "0",
                "durationNsec": "647000000",
                "durationSec": "32645",
                "portNumber": "37",
                "receiveBytes": "2419501",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57095",
                "transmitBytes": "3284392",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "64845"
            },
            {
                "collisions": "0",
                "durationNsec": "513000000",
                "durationSec": "32646",
                "portNumber": "36",
                "receiveBytes": "2964671",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58261",
                "transmitBytes": "4701280",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "95672"
            },
            {
                "collisions": "0",
                "durationNsec": "571000000",
                "durationSec": "39257",
                "portNumber": "25",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "3036690",
                "transmitDropped": "29",
                "transmitErrors": "0",
                "transmitPackets": "61475"
            },
            {
                "collisions": "0",
                "durationNsec": "153000000",
                "durationSec": "22921",
                "portNumber": "63",
                "receiveBytes": "2403662",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "56969",
                "transmitBytes": "3204180",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "64177"
            },
            {
                "collisions": "0",
                "durationNsec": "420000000",
                "durationSec": "22922",
                "portNumber": "62",
                "receiveBytes": "2397992",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "56900",
                "transmitBytes": "3186385",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "64045"
            },
            {
                "collisions": "0",
                "durationNsec": "711000000",
                "durationSec": "30088",
                "portNumber": "57",
                "receiveBytes": "6308",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "50",
                "transmitBytes": "3069721",
                "transmitDropped": "1",
                "transmitErrors": "0",
                "transmitPackets": "61975"
            },
            {
                "collisions": "0",
                "durationNsec": "439000000",
                "durationSec": "30124",
                "portNumber": "54",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "3290972",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "63250"
            },
            {
                "collisions": "0",
                "durationNsec": "724000000",
                "durationSec": "32644",
                "portNumber": "38",
                "receiveBytes": "2416888",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57069",
                "transmitBytes": "3222989",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "64286"
            },
            {
                "collisions": "0",
                "durationNsec": "221000000",
                "durationSec": "39219",
                "portNumber": "9",
                "receiveBytes": "2849878",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "60611",
                "transmitBytes": "4678333",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "76077"
            },
            {
                "collisions": "0",
                "durationNsec": "367000000",
                "durationSec": "30113",
                "portNumber": "55",
                "receiveBytes": "690",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "9",
                "transmitBytes": "3051156",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "61662"
            },
            {
                "collisions": "0",
                "durationNsec": "892000000",
                "durationSec": "32643",
                "portNumber": "39",
                "receiveBytes": "2430794",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57379",
                "transmitBytes": "29391915",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "683828"
            },
            {
                "collisions": "0",
                "durationNsec": "553000000",
                "durationSec": "22919",
                "portNumber": "64",
                "receiveBytes": "2399395",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "56911",
                "transmitBytes": "3210615",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "64174"
            },
            {
                "collisions": "0",
                "durationNsec": "648000000",
                "durationSec": "22923",
                "portNumber": "61",
                "receiveBytes": "2399072",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "56913",
                "transmitBytes": "3188571",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "64068"
            },
            {
                "collisions": "0",
                "durationNsec": "806000000",
                "durationSec": "39222",
                "portNumber": "6",
                "receiveBytes": "2511830",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58675",
                "transmitBytes": "4965229",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "76739"
            },
            {
                "collisions": "0",
                "durationNsec": "771000000",
                "durationSec": "39221",
                "portNumber": "7",
                "receiveBytes": "0",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "0",
                "transmitBytes": "5087790",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "78458"
            },
            {
                "collisions": "0",
                "durationNsec": "35000000",
                "durationSec": "32643",
                "portNumber": "40",
                "receiveBytes": "2416245",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57057",
                "transmitBytes": "3571170",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "66828"
            },
            {
                "collisions": "0",
                "durationNsec": "552000000",
                "durationSec": "22924",
                "portNumber": "60",
                "receiveBytes": "3066147",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "63497",
                "transmitBytes": "3875319",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "71282"
            }
        ],
        "version": "OF_13"
    }
}
[INFO|OpenflowHandler.py:131] 2015-12-29 00:49:22,242 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:49:22,242 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 00:49:22,244 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-29 00:49:22,245 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:49:22,245 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 00:49:22,247 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-29 00:49:22,247 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:49:22,247 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 00:49:22,250 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:22,250 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:22,251 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:22,251 > request_curl_post_data: {"name": "56 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "56"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:22,254 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:22,255 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:22,255 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:22,256 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:22,261 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:22,262 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:22,262 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:22,262 > request_curl_post_data: {"name": "8 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "8"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:22,268 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:22,269 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:22,272 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:22,272 > request_curl_post_data: {"name": "10 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "10"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:22,276 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:22,276 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:22,277 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:22,277 > request_curl_post_data: {"name": "37 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "37"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:22,288 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:22,288 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:22,289 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:22,289 > request_curl_post_data: {"name": "36 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "36"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:22,292 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:22,292 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:22,293 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:22,293 > request_curl_post_data: {"name": "25 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "25"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:22,297 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:22,298 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:22,298 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:22,298 > request_curl_post_data: {"name": "63 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "63"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:22,303 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:22,303 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:22,303 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:22,303 > request_curl_post_data: {"name": "62 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "62"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:22,308 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:22,309 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:22,309 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:22,309 > request_curl_post_data: {"name": "57 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "57"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:22,315 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:22,315 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:22,315 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:22,316 > request_curl_post_data: {"name": "54 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "54"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:22,323 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:22,323 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:22,324 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:22,324 > request_curl_post_data: {"name": "38 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "38"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:22,330 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:22,330 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:22,330 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:22,330 > request_curl_post_data: {"name": "9 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "9"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:22,333 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:22,334 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:22,334 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:22,335 > request_curl_post_data: {"name": "55 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "55"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:22,340 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:22,340 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:22,341 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:22,341 > request_curl_post_data: {"name": "39 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "39"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:22,345 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:22,346 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:22,346 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:22,346 > request_curl_post_data: {"name": "64 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "64"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:22,351 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:22,352 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:22,353 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:22,353 > request_curl_post_data: {"name": "61 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "61"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:22,361 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:22,362 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:22,362 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:22,362 > request_curl_post_data: {"name": "6 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "6"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:22,365 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:22,365 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:22,365 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:22,366 > request_curl_post_data: {"name": "7 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "7"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:22,369 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:22,369 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:22,370 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:22,370 > request_curl_post_data: {"name": "40 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "40"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:22,375 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:22,376 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:22,376 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:22,376 > request_curl_post_data: {"name": "60 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "60"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:22,384 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:22,385 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:22,385 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:22,386 > request_curl_post_data: {"name": "4 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "4"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:22,391 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:22,391 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:22,391 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:22,391 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:22,394 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:22,394 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:22,394 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:22,394 > request_curl_post_data: {"name": "3 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "3"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:22,398 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:22,398 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:22,399 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:22,399 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:22,406 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:22,406 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:22,407 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:22,407 > request_curl_post_data: {"name": "2 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "2"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:22,411 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:22,411 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:22,411 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:22,412 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:22,417 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:22,418 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:22,419 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:22,419 > request_curl_post_data: {"name": "1 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "1"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:22,423 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:22,423 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:22,423 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:22,424 > request_curl_post_data: {"name": "3 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "3"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:22,427 > {
    "status": "Entry pushed"
}
[INFO|SFCManager.py:575] 2015-12-29 00:49:28,499 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 00:49:28,500 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-29 00:49:28,501 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 00:49:28,502 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 00:49:28,502 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 00:49:28,503 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:49:28,505 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 00:49:28,508 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-29 00:49:28,513 > load ns entry (bypass)
[DEBUG|SFCManager.py:701] 2015-12-29 00:49:28,514 > load tenant entry (bypass)
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:28,517 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:28,517 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:28,518 > request_curl_post_data: {"name": "bypass_default_0", "actions": "output=3", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 1}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:28,523 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:28,523 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:28,523 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:28,523 > request_curl_post_data: {"name": "bypass_default_0_reverse", "actions": "output=1", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:28,526 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:28,527 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:28,527 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:28,528 > request_curl_post_data: {"name": "bypass_default_1", "actions": "output=8", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 9}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:28,532 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:28,532 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:28,532 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:28,533 > request_curl_post_data: {"name": "bypass_default_1_reverse", "actions": "output=9", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 8}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:28,538 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:28,538 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:28,539 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:28,539 > request_curl_post_data: {"name": "bypass_default_2", "actions": "output=4", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:28,541 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:28,542 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:28,542 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:28,542 > request_curl_post_data: {"name": "bypass_default_2_reverse", "actions": "output=3", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 4}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:28,544 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-29 00:49:28,545 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:49:28,545 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 00:49:28,549 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "bypass_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035999402694763",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "4 port drop rule": {
                "command": "ADD",
                "cookie": "45035999682764009",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_2": {
                "command": "ADD",
                "cookie": "45035996931004888",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "bypass_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035997862698537",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "1 port drop rule": {
                "command": "ADD",
                "cookie": "45035997137007768",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_0": {
                "command": "ADD",
                "cookie": "45035996931004886",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "3 port drop rule": {
                "command": "ADD",
                "cookie": "45035997402522830",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [
        {
            "2 port drop rule": {
                "command": "ADD",
                "cookie": "45035999417248947",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "2"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "54 port drop rule": {
                "command": "ADD",
                "cookie": "45035999813688220",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "54"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "39 port drop rule": {
                "command": "ADD",
                "cookie": "45035998140888993",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "55 port drop rule": {
                "command": "ADD",
                "cookie": "45035997798962103",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "55"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035996485213002",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "9"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "62 port drop rule": {
                "command": "ADD",
                "cookie": "45035999642724775",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "62"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "7 port drop rule": {
                "command": "ADD",
                "cookie": "45035997933552954",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "9 port drop rule": {
                "command": "ADD",
                "cookie": "45035998199068016",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "25 port drop rule": {
                "command": "ADD",
                "cookie": "45035997515307252",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "25"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "37 port drop rule": {
                "command": "ADD",
                "cookie": "45035997875373931",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "37"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "8 port drop rule": {
                "command": "ADD",
                "cookie": "45036000213794133",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "63 port drop rule": {
                "command": "ADD",
                "cookie": "45035997627998658",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "10 port drop rule": {
                "command": "ADD",
                "cookie": "45035998904451628",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "10"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "40 port drop rule": {
                "command": "ADD",
                "cookie": "45035999188106479",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "40"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "38 port drop rule": {
                "command": "ADD",
                "cookie": "45036000155615110",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "38"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_1": {
                "command": "ADD",
                "cookie": "45035996931004887",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "36 port drop rule": {
                "command": "ADD",
                "cookie": "45035999890100048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "61 port drop rule": {
                "command": "ADD",
                "cookie": "45035997362483596",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "61"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "60 port drop rule": {
                "command": "ADD",
                "cookie": "45035999377209713",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "64 port drop rule": {
                "command": "ADD",
                "cookie": "45035999908239837",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "64"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "56 port drop rule": {
                "command": "ADD",
                "cookie": "45036000079203282",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "56"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "6 port drop rule": {
                "command": "ADD",
                "cookie": "45035999948279071",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "6"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "57 port drop rule": {
                "command": "ADD",
                "cookie": "45035998064477165",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "57"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-29 00:49:33,134 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:49:33,135 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 00:49:33,141 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "bypass_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035999402694763",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "4 port drop rule": {
                "command": "ADD",
                "cookie": "45035999682764009",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_2": {
                "command": "ADD",
                "cookie": "45035996931004888",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "bypass_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035997862698537",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "1 port drop rule": {
                "command": "ADD",
                "cookie": "45035997137007768",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_0": {
                "command": "ADD",
                "cookie": "45035996931004886",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "3 port drop rule": {
                "command": "ADD",
                "cookie": "45035997402522830",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [
        {
            "2 port drop rule": {
                "command": "ADD",
                "cookie": "45035999417248947",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "2"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "54 port drop rule": {
                "command": "ADD",
                "cookie": "45035999813688220",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "54"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "39 port drop rule": {
                "command": "ADD",
                "cookie": "45035998140888993",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "55 port drop rule": {
                "command": "ADD",
                "cookie": "45035997798962103",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "55"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035996485213002",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "9"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "62 port drop rule": {
                "command": "ADD",
                "cookie": "45035999642724775",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "62"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "7 port drop rule": {
                "command": "ADD",
                "cookie": "45035997933552954",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "9 port drop rule": {
                "command": "ADD",
                "cookie": "45035998199068016",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "25 port drop rule": {
                "command": "ADD",
                "cookie": "45035997515307252",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "25"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "37 port drop rule": {
                "command": "ADD",
                "cookie": "45035997875373931",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "37"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "8 port drop rule": {
                "command": "ADD",
                "cookie": "45036000213794133",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "63 port drop rule": {
                "command": "ADD",
                "cookie": "45035997627998658",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "10 port drop rule": {
                "command": "ADD",
                "cookie": "45035998904451628",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "10"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "40 port drop rule": {
                "command": "ADD",
                "cookie": "45035999188106479",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "40"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "38 port drop rule": {
                "command": "ADD",
                "cookie": "45036000155615110",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "38"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_1": {
                "command": "ADD",
                "cookie": "45035996931004887",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "36 port drop rule": {
                "command": "ADD",
                "cookie": "45035999890100048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "61 port drop rule": {
                "command": "ADD",
                "cookie": "45035997362483596",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "61"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "60 port drop rule": {
                "command": "ADD",
                "cookie": "45035999377209713",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "64 port drop rule": {
                "command": "ADD",
                "cookie": "45035999908239837",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "64"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "56 port drop rule": {
                "command": "ADD",
                "cookie": "45036000079203282",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "56"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "6 port drop rule": {
                "command": "ADD",
                "cookie": "45035999948279071",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "6"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "57 port drop rule": {
                "command": "ADD",
                "cookie": "45035998064477165",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "57"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-29 00:49:33,148 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:49:33,150 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 00:49:33,155 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-29 00:49:33,155 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:49:33,156 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 00:49:33,158 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:165] 2015-12-29 00:49:36,922 > get_switch_port
[INFO|OpenflowHandler.py:131] 2015-12-29 00:49:36,922 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:49:36,924 > request_curl_url: http://192.168.17.179:8080/wm/core/switch/all/port/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 00:49:37,934 > {
    "00:00:00:0c:29:7d:49:ec": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "467000000",
                "durationSec": "24692",
                "portNumber": "4",
                "receiveBytes": "813916",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "6843",
                "transmitBytes": "3708377",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "68329"
            },
            {
                "collisions": "0",
                "durationNsec": "345000000",
                "durationSec": "39273",
                "portNumber": "local",
                "receiveBytes": "2698812",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58911",
                "transmitBytes": "3663328",
                "transmitDropped": "1218",
                "transmitErrors": "0",
                "transmitPackets": "61830"
            },
            {
                "collisions": "0",
                "durationNsec": "672000000",
                "durationSec": "39235",
                "portNumber": "3",
                "receiveBytes": "6009957",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "83713",
                "transmitBytes": "3486711",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "66881"
            }
        ],
        "version": "OF_13"
    },
    "00:00:00:0c:29:7d:49:f6": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "173000000",
                "durationSec": "39273",
                "portNumber": "local",
                "receiveBytes": "2430572",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57666",
                "transmitBytes": "2996701",
                "transmitDropped": "2728",
                "transmitErrors": "0",
                "transmitPackets": "61664"
            },
            {
                "collisions": "0",
                "durationNsec": "177000000",
                "durationSec": "39273",
                "portNumber": "1",
                "receiveBytes": "364298",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "2274",
                "transmitBytes": "3297441",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "65527"
            },
            {
                "collisions": "0",
                "durationNsec": "763000000",
                "durationSec": "39234",
                "portNumber": "3",
                "receiveBytes": "4728321",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "77265",
                "transmitBytes": "2884532",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "61435"
            }
        ],
        "version": "OF_13"
    },
    "00:00:4a:72:d4:24:ae:41": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "177000000",
                "durationSec": "39273",
                "portNumber": "local",
                "receiveBytes": "2454591",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57994",
                "transmitBytes": "3080867",
                "transmitDropped": "84",
                "transmitErrors": "0",
                "transmitPackets": "62293"
            },
            {
                "collisions": "0",
                "durationNsec": "300000000",
                "durationSec": "39238",
                "portNumber": "2",
                "receiveBytes": "4997195",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "77499",
                "transmitBytes": "2546148",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "59491"
            }
        ],
        "version": "OF_13"
    },
    "00:00:ee:42:21:d6:e1:44": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "546000000",
                "durationSec": "30117",
                "portNumber": "56",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "3188416",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "62946"
            },
            {
                "collisions": "0",
                "durationNsec": "314000000",
                "durationSec": "39273",
                "portNumber": "local",
                "receiveBytes": "2434447",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57684",
                "transmitBytes": "3909811",
                "transmitDropped": "7551",
                "transmitErrors": "0",
                "transmitPackets": "68602"
            },
            {
                "collisions": "0",
                "durationNsec": "813000000",
                "durationSec": "39235",
                "portNumber": "8",
                "receiveBytes": "3486711",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "66881",
                "transmitBytes": "6009957",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "83713"
            },
            {
                "collisions": "0",
                "durationNsec": "969000000",
                "durationSec": "39233",
                "portNumber": "10",
                "receiveBytes": "1251049",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "9293",
                "transmitBytes": "3876502",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "69955"
            },
            {
                "collisions": "0",
                "durationNsec": "348000000",
                "durationSec": "32661",
                "portNumber": "37",
                "receiveBytes": "2451337",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57853",
                "transmitBytes": "3316358",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "65605"
            },
            {
                "collisions": "0",
                "durationNsec": "215000000",
                "durationSec": "32662",
                "portNumber": "36",
                "receiveBytes": "2996507",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "59019",
                "transmitBytes": "5115335",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "105530"
            },
            {
                "collisions": "0",
                "durationNsec": "273000000",
                "durationSec": "39273",
                "portNumber": "25",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "3068526",
                "transmitDropped": "29",
                "transmitErrors": "0",
                "transmitPackets": "62233"
            },
            {
                "collisions": "0",
                "durationNsec": "855000000",
                "durationSec": "22936",
                "portNumber": "63",
                "receiveBytes": "2435498",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57727",
                "transmitBytes": "3236146",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "64937"
            },
            {
                "collisions": "0",
                "durationNsec": "122000000",
                "durationSec": "22938",
                "portNumber": "62",
                "receiveBytes": "2429828",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57658",
                "transmitBytes": "3218351",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "64805"
            },
            {
                "collisions": "0",
                "durationNsec": "414000000",
                "durationSec": "30104",
                "portNumber": "57",
                "receiveBytes": "6308",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "50",
                "transmitBytes": "3101557",
                "transmitDropped": "1",
                "transmitErrors": "0",
                "transmitPackets": "62733"
            },
            {
                "collisions": "0",
                "durationNsec": "141000000",
                "durationSec": "30140",
                "portNumber": "54",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "3322808",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "64008"
            },
            {
                "collisions": "0",
                "durationNsec": "426000000",
                "durationSec": "32660",
                "portNumber": "38",
                "receiveBytes": "2448724",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57827",
                "transmitBytes": "3254955",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "65046"
            },
            {
                "collisions": "0",
                "durationNsec": "923000000",
                "durationSec": "39234",
                "portNumber": "9",
                "receiveBytes": "2884532",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "61435",
                "transmitBytes": "4728321",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "77265"
            },
            {
                "collisions": "0",
                "durationNsec": "69000000",
                "durationSec": "30129",
                "portNumber": "55",
                "receiveBytes": "690",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "9",
                "transmitBytes": "3082992",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "62420"
            },
            {
                "collisions": "0",
                "durationNsec": "594000000",
                "durationSec": "32659",
                "portNumber": "39",
                "receiveBytes": "2462798",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58141",
                "transmitBytes": "29407012",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "684187"
            },
            {
                "collisions": "0",
                "durationNsec": "255000000",
                "durationSec": "22935",
                "portNumber": "64",
                "receiveBytes": "2431231",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57669",
                "transmitBytes": "3242581",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "64934"
            },
            {
                "collisions": "0",
                "durationNsec": "351000000",
                "durationSec": "22939",
                "portNumber": "61",
                "receiveBytes": "2430908",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57671",
                "transmitBytes": "3220537",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "64828"
            },
            {
                "collisions": "0",
                "durationNsec": "509000000",
                "durationSec": "39238",
                "portNumber": "6",
                "receiveBytes": "2546148",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "59491",
                "transmitBytes": "4997195",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "77499"
            },
            {
                "collisions": "0",
                "durationNsec": "474000000",
                "durationSec": "39237",
                "portNumber": "7",
                "receiveBytes": "0",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "0",
                "transmitBytes": "5119756",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "79218"
            },
            {
                "collisions": "0",
                "durationNsec": "738000000",
                "durationSec": "32658",
                "portNumber": "40",
                "receiveBytes": "2448081",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57815",
                "transmitBytes": "3603136",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "67588"
            },
            {
                "collisions": "0",
                "durationNsec": "255000000",
                "durationSec": "22940",
                "portNumber": "60",
                "receiveBytes": "3097983",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "64255",
                "transmitBytes": "3907285",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "72042"
            }
        ],
        "version": "OF_13"
    }
}
[INFO|OpenflowHandler.py:131] 2015-12-29 00:49:37,937 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:49:37,937 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 00:49:37,940 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-29 00:49:37,940 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:49:37,940 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 00:49:37,942 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-29 00:49:37,942 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:49:37,942 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 00:49:37,944 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:37,944 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:37,944 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:37,944 > request_curl_post_data: {"name": "56 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "56"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:37,949 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:37,949 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:37,949 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:37,949 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:37,954 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:37,956 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:37,956 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:37,956 > request_curl_post_data: {"name": "8 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "8"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:37,960 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:37,960 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:37,960 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:37,960 > request_curl_post_data: {"name": "10 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "10"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:37,964 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:37,965 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:37,965 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:37,965 > request_curl_post_data: {"name": "37 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "37"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:37,969 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:37,970 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:37,970 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:37,970 > request_curl_post_data: {"name": "36 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "36"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:37,974 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:37,974 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:37,975 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:37,975 > request_curl_post_data: {"name": "25 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "25"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:37,979 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:37,979 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:37,980 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:37,980 > request_curl_post_data: {"name": "63 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "63"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:37,982 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:37,982 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:37,983 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:37,983 > request_curl_post_data: {"name": "62 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "62"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:37,986 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:37,986 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:37,986 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:37,986 > request_curl_post_data: {"name": "57 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "57"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:37,989 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:37,989 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:37,989 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:37,989 > request_curl_post_data: {"name": "54 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "54"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:37,992 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:37,992 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:37,993 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:37,993 > request_curl_post_data: {"name": "38 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "38"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:37,995 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:37,996 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:37,996 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:37,996 > request_curl_post_data: {"name": "9 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "9"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:37,999 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:38,000 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:38,000 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:38,000 > request_curl_post_data: {"name": "55 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "55"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:38,005 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:38,005 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:38,005 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:38,006 > request_curl_post_data: {"name": "39 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "39"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:38,011 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:38,011 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:38,012 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:38,013 > request_curl_post_data: {"name": "64 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "64"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:38,018 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:38,018 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:38,019 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:38,019 > request_curl_post_data: {"name": "61 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "61"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:38,021 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:38,022 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:38,022 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:38,022 > request_curl_post_data: {"name": "6 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "6"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:38,025 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:38,025 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:38,025 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:38,025 > request_curl_post_data: {"name": "7 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "7"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:38,028 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:38,028 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:38,029 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:38,029 > request_curl_post_data: {"name": "40 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "40"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:38,031 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:38,032 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:38,032 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:38,032 > request_curl_post_data: {"name": "60 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "60"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:38,039 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:38,039 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:38,039 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:38,039 > request_curl_post_data: {"name": "4 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "4"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:38,043 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:38,043 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:38,043 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:38,043 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:38,049 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:38,050 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:38,050 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:38,050 > request_curl_post_data: {"name": "3 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "3"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:38,053 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:38,054 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:38,054 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:38,054 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:38,058 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:38,058 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:38,058 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:38,058 > request_curl_post_data: {"name": "2 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "2"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:38,063 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:38,064 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:38,064 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:38,065 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:38,068 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:38,068 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:38,068 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:38,069 > request_curl_post_data: {"name": "1 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "1"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:38,074 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:38,075 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:38,075 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:38,077 > request_curl_post_data: {"name": "3 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "3"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:38,082 > {
    "status": "Entry pushed"
}
[INFO|SFCManager.py:575] 2015-12-29 00:49:43,499 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 00:49:43,500 > load ns entry (testing)
[INFO|SFCManager.py:602] 2015-12-29 00:49:43,501 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 00:49:43,502 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 00:49:43,502 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 00:49:43,505 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:49:43,507 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 00:49:43,512 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 63,
            "shortPortNumber": 63
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-29 00:49:43,513 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:49:43,514 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/60/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 00:49:43,517 > [
    {
        "port": {
            "length": 4,
            "portNumber": 60,
            "shortPortNumber": 60
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-29 00:49:43,522 > load ns entry (testing)
[DEBUG|SFCManager.py:701] 2015-12-29 00:49:43,524 > load tenant entry (testing)
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:43,527 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:43,527 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:43,528 > request_curl_post_data: {"name": "testing_default_0", "actions": "output=3", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 1}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:43,532 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:43,532 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:43,533 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:43,533 > request_curl_post_data: {"name": "testing_default_0_reverse", "actions": "output=1", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:43,539 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:43,540 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:43,540 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:43,541 > request_curl_post_data: {"name": "testing_default_1", "actions": "output=63", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 9}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:43,545 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:43,545 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:43,545 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:43,545 > request_curl_post_data: {"name": "testing_default_1_reverse", "actions": "output=9", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 63}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:43,548 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:43,549 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:43,549 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:43,550 > request_curl_post_data: {"name": "testing_default_2", "actions": "output=8", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 60}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:43,554 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:43,554 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:43,555 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:43,555 > request_curl_post_data: {"name": "testing_default_2_reverse", "actions": "output=60", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 8}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:43,557 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:43,558 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:43,558 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:43,558 > request_curl_post_data: {"name": "testing_default_3", "actions": "output=4", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:43,561 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 00:49:43,562 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 00:49:43,562 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 00:49:43,562 > request_curl_post_data: {"name": "testing_default_3_reverse", "actions": "output=3", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 4}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 00:49:43,565 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-29 00:49:43,566 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 00:49:43,566 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 00:49:43,573 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "4 port drop rule": {
                "command": "ADD",
                "cookie": "45035999682764009",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "testing_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035997551865418",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_3": {
                "command": "ADD",
                "cookie": "45035998866574551",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "1 port drop rule": {
                "command": "ADD",
                "cookie": "45035997137007768",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "testing_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035997389354727",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "3 port drop rule": {
                "command": "ADD",
                "cookie": "45035997402522830",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "testing_default_0": {
                "command": "ADD",
                "cookie": "45035998866574548",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [
        {
            "2 port drop rule": {
                "command": "ADD",
                "cookie": "45035999417248947",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "2"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "54 port drop rule": {
                "command": "ADD",
                "cookie": "45035999813688220",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "54"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "testing_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035998929350953",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "60"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "39 port drop rule": {
                "command": "ADD",
                "cookie": "45035998140888993",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "55 port drop rule": {
                "command": "ADD",
                "cookie": "45035997798962103",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "55"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "62 port drop rule": {
                "command": "ADD",
                "cookie": "45035999642724775",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "62"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "7 port drop rule": {
                "command": "ADD",
                "cookie": "45035997933552954",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "9 port drop rule": {
                "command": "ADD",
                "cookie": "45035998199068016",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "25 port drop rule": {
                "command": "ADD",
                "cookie": "45035997515307252",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "25"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "37 port drop rule": {
                "command": "ADD",
                "cookie": "45035997875373931",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "37"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "8 port drop rule": {
                "command": "ADD",
                "cookie": "45036000213794133",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "63 port drop rule": {
                "command": "ADD",
                "cookie": "45035997627998658",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "testing_default_1": {
                "command": "ADD",
                "cookie": "45035998866574549",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "63"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "10 port drop rule": {
                "command": "ADD",
                "cookie": "45035998904451628",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "10"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "testing_default_2": {
                "command": "ADD",
                "cookie": "45035998866574550",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "40 port drop rule": {
                "command": "ADD",
                "cookie": "45035999188106479",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "40"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "38 port drop rule": {
                "command": "ADD",
                "cookie": "45036000155615110",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "38"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "testing_default_1_reverse": {
                "command": "ADD",
                "cookie": "45036000306836488",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "9"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "36 port drop rule": {
                "command": "ADD",
                "cookie": "45035999890100048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "61 port drop rule": {
                "command": "ADD",
                "cookie": "45035997362483596",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "61"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "60 port drop rule": {
                "command": "ADD",
                "cookie": "45035999377209713",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "64 port drop rule": {
                "command": "ADD",
                "cookie": "45035999908239837",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "64"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "56 port drop rule": {
                "command": "ADD",
                "cookie": "45036000079203282",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "56"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "6 port drop rule": {
                "command": "ADD",
                "cookie": "45035999948279071",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "6"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "57 port drop rule": {
                "command": "ADD",
                "cookie": "45035998064477165",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "57"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-29 16:34:50,612 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 16:34:50,614 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 16:34:50,648 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "4 port drop rule": {
                "command": "ADD",
                "cookie": "45035999682764009",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "testing_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035997551865418",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_3": {
                "command": "ADD",
                "cookie": "45035998866574551",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "1 port drop rule": {
                "command": "ADD",
                "cookie": "45035997137007768",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "testing_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035997389354727",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "3 port drop rule": {
                "command": "ADD",
                "cookie": "45035997402522830",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "testing_default_0": {
                "command": "ADD",
                "cookie": "45035998866574548",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [
        {
            "2 port drop rule": {
                "command": "ADD",
                "cookie": "45035999417248947",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "2"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "54 port drop rule": {
                "command": "ADD",
                "cookie": "45035999813688220",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "54"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "testing_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035998929350953",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "60"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "39 port drop rule": {
                "command": "ADD",
                "cookie": "45035998140888993",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "55 port drop rule": {
                "command": "ADD",
                "cookie": "45035997798962103",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "55"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "62 port drop rule": {
                "command": "ADD",
                "cookie": "45035999642724775",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "62"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "7 port drop rule": {
                "command": "ADD",
                "cookie": "45035997933552954",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "9 port drop rule": {
                "command": "ADD",
                "cookie": "45035998199068016",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "25 port drop rule": {
                "command": "ADD",
                "cookie": "45035997515307252",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "25"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "37 port drop rule": {
                "command": "ADD",
                "cookie": "45035997875373931",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "37"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "8 port drop rule": {
                "command": "ADD",
                "cookie": "45036000213794133",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "63 port drop rule": {
                "command": "ADD",
                "cookie": "45035997627998658",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "testing_default_1": {
                "command": "ADD",
                "cookie": "45035998866574549",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "63"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "10 port drop rule": {
                "command": "ADD",
                "cookie": "45035998904451628",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "10"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "testing_default_2": {
                "command": "ADD",
                "cookie": "45035998866574550",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "40 port drop rule": {
                "command": "ADD",
                "cookie": "45035999188106479",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "40"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "38 port drop rule": {
                "command": "ADD",
                "cookie": "45036000155615110",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "38"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "testing_default_1_reverse": {
                "command": "ADD",
                "cookie": "45036000306836488",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "9"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "36 port drop rule": {
                "command": "ADD",
                "cookie": "45035999890100048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "61 port drop rule": {
                "command": "ADD",
                "cookie": "45035997362483596",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "61"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "60 port drop rule": {
                "command": "ADD",
                "cookie": "45035999377209713",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "64 port drop rule": {
                "command": "ADD",
                "cookie": "45035999908239837",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "64"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "56 port drop rule": {
                "command": "ADD",
                "cookie": "45036000079203282",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "56"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "6 port drop rule": {
                "command": "ADD",
                "cookie": "45035999948279071",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "6"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "57 port drop rule": {
                "command": "ADD",
                "cookie": "45035998064477165",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "57"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-29 16:34:50,653 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 16:34:50,653 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 16:34:50,663 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-29 16:34:50,664 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 16:34:50,664 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 16:34:50,666 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:165] 2015-12-29 16:53:11,365 > get_switch_port
[INFO|OpenflowHandler.py:131] 2015-12-29 16:53:11,365 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 16:53:11,367 > request_curl_url: http://192.168.17.179:8080/wm/core/switch/all/port/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 16:53:22,431 > {
    "00:00:00:0c:29:7d:49:ec": {
        "ERROR": {
            "   ": "An error has occurred while proccesing your request,",
            "  *": "which might be due to one or more of the following:",
            " * ": "-- An invalid DPID and/or stats/features request.",
            " **": "-- The switch is not connected to the controller.",
            "*  ": "-- The request specified is not supported by the switch's OpenFlow version."
        },
        "Valid statistics and features strings are:": {
            "1)": "aggregate",
            "2)": "desc",
            "3)": "experimenter",
            "4)": "features",
            "5)": "flow",
            "6)": "group",
            "7)": "group-desc",
            "8)": "group-features",
            "9)": "meter",
            "A)": "meter-config",
            "B)": "meter-features",
            "C)": "port",
            "D)": "port-desc",
            "E)": "queue",
            "F)": "table",
            "G)": "table-features"
        }
    },
    "00:00:00:0c:29:7d:49:f6": {
        "ERROR": {
            "   ": "An error has occurred while proccesing your request,",
            "  *": "which might be due to one or more of the following:",
            " * ": "-- An invalid DPID and/or stats/features request.",
            " **": "-- The switch is not connected to the controller.",
            "*  ": "-- The request specified is not supported by the switch's OpenFlow version."
        },
        "Valid statistics and features strings are:": {
            "1)": "aggregate",
            "2)": "desc",
            "3)": "experimenter",
            "4)": "features",
            "5)": "flow",
            "6)": "group",
            "7)": "group-desc",
            "8)": "group-features",
            "9)": "meter",
            "A)": "meter-config",
            "B)": "meter-features",
            "C)": "port",
            "D)": "port-desc",
            "E)": "queue",
            "F)": "table",
            "G)": "table-features"
        }
    },
    "00:00:4a:72:d4:24:ae:41": {
        "ERROR": {
            "   ": "An error has occurred while proccesing your request,",
            "  *": "which might be due to one or more of the following:",
            " * ": "-- An invalid DPID and/or stats/features request.",
            " **": "-- The switch is not connected to the controller.",
            "*  ": "-- The request specified is not supported by the switch's OpenFlow version."
        },
        "Valid statistics and features strings are:": {
            "1)": "aggregate",
            "2)": "desc",
            "3)": "experimenter",
            "4)": "features",
            "5)": "flow",
            "6)": "group",
            "7)": "group-desc",
            "8)": "group-features",
            "9)": "meter",
            "A)": "meter-config",
            "B)": "meter-features",
            "C)": "port",
            "D)": "port-desc",
            "E)": "queue",
            "F)": "table",
            "G)": "table-features"
        }
    },
    "00:00:ee:42:21:d6:e1:44": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "944000000",
                "durationSec": "37009",
                "portNumber": "56",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "139065780",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3297997"
            },
            {
                "collisions": "0",
                "durationNsec": "712000000",
                "durationSec": "46165",
                "portNumber": "local",
                "receiveBytes": "2435577",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57696",
                "transmitBytes": "139786045",
                "transmitDropped": "7551",
                "transmitErrors": "0",
                "transmitPackets": "3303641"
            },
            {
                "collisions": "0",
                "durationNsec": "211000000",
                "durationSec": "46128",
                "portNumber": "8",
                "receiveBytes": "3704064",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "71348",
                "transmitBytes": "143088631",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3346898"
            },
            {
                "collisions": "0",
                "durationNsec": "367000000",
                "durationSec": "46126",
                "portNumber": "10",
                "receiveBytes": "1269624",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "9422",
                "transmitBytes": "139813536",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3305924"
            },
            {
                "collisions": "0",
                "durationNsec": "746000000",
                "durationSec": "39553",
                "portNumber": "37",
                "receiveBytes": "2454533",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57889",
                "transmitBytes": "139253814",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3301578"
            },
            {
                "collisions": "0",
                "durationNsec": "613000000",
                "durationSec": "39554",
                "portNumber": "36",
                "receiveBytes": "72548172",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "1714717",
                "transmitBytes": "72031190",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "1698126"
            },
            {
                "collisions": "0",
                "durationNsec": "671000000",
                "durationSec": "46165",
                "portNumber": "25",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "138945890",
                "transmitDropped": "29",
                "transmitErrors": "0",
                "transmitPackets": "3297284"
            },
            {
                "collisions": "0",
                "durationNsec": "253000000",
                "durationSec": "29829",
                "portNumber": "63",
                "receiveBytes": "2437544",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57749",
                "transmitBytes": "139517008",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3306567"
            },
            {
                "collisions": "0",
                "durationNsec": "520000000",
                "durationSec": "29830",
                "portNumber": "62",
                "receiveBytes": "2431767",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57679",
                "transmitBytes": "139155700",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3300777"
            },
            {
                "collisions": "0",
                "durationNsec": "811000000",
                "durationSec": "36996",
                "portNumber": "57",
                "receiveBytes": "6308",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "50",
                "transmitBytes": "138978921",
                "transmitDropped": "1",
                "transmitErrors": "0",
                "transmitPackets": "3297784"
            },
            {
                "collisions": "0",
                "durationNsec": "538000000",
                "durationSec": "37032",
                "portNumber": "54",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "139200172",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3299059"
            },
            {
                "collisions": "0",
                "durationNsec": "823000000",
                "durationSec": "39552",
                "portNumber": "38",
                "receiveBytes": "2451920",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57863",
                "transmitBytes": "139192411",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3301019"
            },
            {
                "collisions": "0",
                "durationNsec": "320000000",
                "durationSec": "46127",
                "portNumber": "9",
                "receiveBytes": "3233325",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "67177",
                "transmitBytes": "140660951",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3313166"
            },
            {
                "collisions": "0",
                "durationNsec": "466000000",
                "durationSec": "37021",
                "portNumber": "55",
                "receiveBytes": "690",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "9",
                "transmitBytes": "138960356",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3297471"
            },
            {
                "collisions": "0",
                "durationNsec": "991000000",
                "durationSec": "39551",
                "portNumber": "39",
                "receiveBytes": "69990651",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "1665653",
                "transmitBytes": "98503927",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "2328741"
            },
            {
                "collisions": "0",
                "durationNsec": "652000000",
                "durationSec": "29827",
                "portNumber": "64",
                "receiveBytes": "2433277",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57691",
                "transmitBytes": "139179930",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3300906"
            },
            {
                "collisions": "0",
                "durationNsec": "747000000",
                "durationSec": "29831",
                "portNumber": "61",
                "receiveBytes": "2432954",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57693",
                "transmitBytes": "139157886",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3300800"
            },
            {
                "collisions": "0",
                "durationNsec": "905000000",
                "durationSec": "46130",
                "portNumber": "6",
                "receiveBytes": "2602783",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "60360",
                "transmitBytes": "140928487",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3313386"
            },
            {
                "collisions": "0",
                "durationNsec": "870000000",
                "durationSec": "46129",
                "portNumber": "7",
                "receiveBytes": "0",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "0",
                "transmitBytes": "141056790",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3315187"
            },
            {
                "collisions": "0",
                "durationNsec": "134000000",
                "durationSec": "39551",
                "portNumber": "40",
                "receiveBytes": "2486521",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58689",
                "transmitBytes": "139532780",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3303375"
            },
            {
                "collisions": "0",
                "durationNsec": "652000000",
                "durationSec": "29832",
                "portNumber": "60",
                "receiveBytes": "3100029",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "64277",
                "transmitBytes": "140054049",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3312367"
            }
        ],
        "version": "OF_13"
    }
}
[INFO|OpenflowHandler.py:131] 2015-12-29 16:53:22,435 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 16:53:22,435 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 16:53:22,480 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-29 16:53:22,480 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 16:53:22,480 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 16:53:22,504 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-29 16:53:22,505 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 16:53:22,505 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 16:53:22,509 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:95] 2015-12-29 16:53:22,510 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 16:53:22,511 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 16:53:22,511 > request_curl_post_data: {"name": "56 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "56"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 16:53:22,549 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 16:53:22,549 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 16:53:22,549 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 16:53:22,550 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 16:53:22,562 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 16:53:22,563 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 16:53:22,563 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 16:53:22,563 > request_curl_post_data: {"name": "8 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "8"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 16:53:22,617 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 16:53:22,617 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 16:53:22,617 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 16:53:22,618 > request_curl_post_data: {"name": "10 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "10"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 16:53:22,624 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 16:53:22,625 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 16:53:22,625 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 16:53:22,626 > request_curl_post_data: {"name": "37 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "37"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 16:53:22,641 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 16:53:22,641 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 16:53:22,641 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 16:53:22,642 > request_curl_post_data: {"name": "36 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "36"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 16:53:22,655 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 16:53:22,655 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 16:53:22,656 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 16:53:22,656 > request_curl_post_data: {"name": "25 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "25"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 16:53:22,710 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 16:53:22,710 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 16:53:22,710 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 16:53:22,711 > request_curl_post_data: {"name": "63 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "63"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 16:53:22,733 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 16:53:22,733 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 16:53:22,734 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 16:53:22,734 > request_curl_post_data: {"name": "62 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "62"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 16:53:22,738 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 16:53:22,738 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 16:53:22,739 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 16:53:22,739 > request_curl_post_data: {"name": "57 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "57"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 16:53:22,797 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 16:53:22,798 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 16:53:22,798 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 16:53:22,798 > request_curl_post_data: {"name": "54 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "54"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 16:53:22,803 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 16:53:22,804 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 16:53:22,804 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 16:53:22,804 > request_curl_post_data: {"name": "38 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "38"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 16:53:22,808 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 16:53:22,808 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 16:53:22,808 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 16:53:22,808 > request_curl_post_data: {"name": "9 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "9"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 16:53:22,829 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 16:53:22,830 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 16:53:22,830 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 16:53:22,830 > request_curl_post_data: {"name": "55 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "55"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 16:53:22,851 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 16:53:22,851 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 16:53:22,851 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 16:53:22,852 > request_curl_post_data: {"name": "39 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "39"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 16:53:22,858 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 16:53:22,859 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 16:53:22,859 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 16:53:22,860 > request_curl_post_data: {"name": "64 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "64"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 16:53:22,872 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 16:53:22,872 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 16:53:22,872 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 16:53:22,872 > request_curl_post_data: {"name": "61 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "61"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 16:53:22,888 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 16:53:22,888 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 16:53:22,889 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 16:53:22,889 > request_curl_post_data: {"name": "6 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "6"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 16:53:22,932 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 16:53:22,933 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 16:53:22,933 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 16:53:22,933 > request_curl_post_data: {"name": "7 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "7"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 16:53:22,936 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 16:53:22,937 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 16:53:22,937 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 16:53:22,937 > request_curl_post_data: {"name": "40 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "40"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 16:53:22,945 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 16:53:22,946 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 16:53:22,946 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 16:53:22,946 > request_curl_post_data: {"name": "60 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "60"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 16:53:22,962 > {
    "status": "Entry pushed"
}
[INFO|SFCManager.py:575] 2015-12-29 16:59:31,766 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 16:59:31,767 > load ns entry (testing)
[INFO|SFCManager.py:602] 2015-12-29 16:59:31,768 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 16:59:31,769 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 16:59:31,769 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 16:59:31,771 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 16:59:31,773 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 16:59:31,814 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-29 16:59:31,814 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 16:59:31,815 > load ns entry (testing)
[DEBUG|SFCManager.py:701] 2015-12-29 16:59:31,817 > load tenant entry (testing)
[INFO|SFCManager.py:575] 2015-12-29 16:59:53,757 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 16:59:53,758 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-29 16:59:53,759 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 16:59:53,760 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 16:59:53,760 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 16:59:53,761 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 16:59:53,763 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 16:59:53,799 > There is no route for request info
[ERROR|SFCManager.py:671] 2015-12-29 16:59:53,800 > service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 16:59:53,801 > load ns entry (bypass)
[DEBUG|SFCManager.py:701] 2015-12-29 16:59:53,802 > load tenant entry (bypass)
[INFO|SFCManager.py:575] 2015-12-29 17:00:01,998 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:00:01,999 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-29 17:00:02,000 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:00:02,001 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:00:02,001 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:00:02,002 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:00:02,005 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 17:00:02,011 > There is no route for request info
[ERROR|SFCManager.py:671] 2015-12-29 17:00:02,012 > service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 17:00:02,013 > load ns entry (bypass)
[DEBUG|SFCManager.py:701] 2015-12-29 17:00:02,015 > load tenant entry (bypass)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:00:17,361 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:00:17,362 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:00:17,366 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "54 port drop rule": {
                "command": "ADD",
                "cookie": "45035999813688220",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "54"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "39 port drop rule": {
                "command": "ADD",
                "cookie": "45035998140888993",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "55 port drop rule": {
                "command": "ADD",
                "cookie": "45035997798962103",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "55"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "62 port drop rule": {
                "command": "ADD",
                "cookie": "45035999642724775",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "62"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "7 port drop rule": {
                "command": "ADD",
                "cookie": "45035997933552954",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "9 port drop rule": {
                "command": "ADD",
                "cookie": "45035998199068016",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "25 port drop rule": {
                "command": "ADD",
                "cookie": "45035997515307252",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "25"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "37 port drop rule": {
                "command": "ADD",
                "cookie": "45035997875373931",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "37"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "8 port drop rule": {
                "command": "ADD",
                "cookie": "45036000213794133",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "63 port drop rule": {
                "command": "ADD",
                "cookie": "45035997627998658",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "10 port drop rule": {
                "command": "ADD",
                "cookie": "45035998904451628",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "10"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "40 port drop rule": {
                "command": "ADD",
                "cookie": "45035999188106479",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "40"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "38 port drop rule": {
                "command": "ADD",
                "cookie": "45036000155615110",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "38"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "36 port drop rule": {
                "command": "ADD",
                "cookie": "45035999890100048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "61 port drop rule": {
                "command": "ADD",
                "cookie": "45035997362483596",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "61"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "60 port drop rule": {
                "command": "ADD",
                "cookie": "45035999377209713",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "64 port drop rule": {
                "command": "ADD",
                "cookie": "45035999908239837",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "64"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "56 port drop rule": {
                "command": "ADD",
                "cookie": "45036000079203282",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "56"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "6 port drop rule": {
                "command": "ADD",
                "cookie": "45035999948279071",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "6"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "57 port drop rule": {
                "command": "ADD",
                "cookie": "45035998064477165",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "57"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:00:17,368 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:00:17,368 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:00:17,373 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:00:17,373 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:00:17,374 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:00:17,378 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|SFCManager.py:575] 2015-12-29 17:00:19,314 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:00:19,315 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-29 17:00:19,317 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:00:19,317 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:00:19,318 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:00:19,318 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:00:19,320 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 17:00:19,354 > There is no route for request info
[ERROR|SFCManager.py:671] 2015-12-29 17:00:19,355 > service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 17:00:19,356 > load ns entry (bypass)
[DEBUG|SFCManager.py:701] 2015-12-29 17:00:19,357 > load tenant entry (bypass)
[INFO|SFCManager.py:575] 2015-12-29 17:00:20,530 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:00:20,531 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-29 17:00:20,532 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:00:20,532 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:00:20,533 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:00:20,534 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:00:20,535 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 17:00:20,544 > There is no route for request info
[ERROR|SFCManager.py:671] 2015-12-29 17:00:20,544 > service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 17:00:20,545 > load ns entry (bypass)
[DEBUG|SFCManager.py:701] 2015-12-29 17:00:20,547 > load tenant entry (bypass)
[INFO|SFCManager.py:575] 2015-12-29 17:00:22,300 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:00:22,301 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-29 17:00:22,303 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:00:22,303 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:00:22,304 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:00:22,305 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:00:22,306 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 17:00:22,325 > There is no route for request info
[ERROR|SFCManager.py:671] 2015-12-29 17:00:22,325 > service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 17:00:22,326 > load ns entry (bypass)
[DEBUG|SFCManager.py:701] 2015-12-29 17:00:22,328 > load tenant entry (bypass)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:00:28,997 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:00:28,999 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:00:29,001 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:00:29,001 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:00:29,002 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:00:29,003 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:00:29,003 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:00:29,004 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:00:29,006 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|SFCManager.py:575] 2015-12-29 17:00:30,985 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:00:30,985 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-29 17:00:30,987 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:00:30,987 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:00:30,988 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:00:30,989 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:00:30,990 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:00:30,993 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-29 17:00:30,997 > load ns entry (bypass)
[DEBUG|SFCManager.py:701] 2015-12-29 17:00:30,999 > load tenant entry (bypass)
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:31,002 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:31,002 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:31,002 > request_curl_post_data: {"name": "bypass_default_0", "actions": "output=3", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 1}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:31,005 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:31,005 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:31,005 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:31,005 > request_curl_post_data: {"name": "bypass_default_0_reverse", "actions": "output=1", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:31,009 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:31,009 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:31,009 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:31,009 > request_curl_post_data: {"name": "bypass_default_1", "actions": "output=8", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 9}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:31,013 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:31,014 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:31,014 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:31,014 > request_curl_post_data: {"name": "bypass_default_1_reverse", "actions": "output=9", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 8}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:31,018 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:31,018 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:31,019 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:31,019 > request_curl_post_data: {"name": "bypass_default_2", "actions": "output=4", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:31,025 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:31,026 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:31,026 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:31,026 > request_curl_post_data: {"name": "bypass_default_2_reverse", "actions": "output=3", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 4}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:31,028 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:00:31,029 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:00:31,029 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:00:31,031 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "bypass_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035999402694763",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_2": {
                "command": "ADD",
                "cookie": "45035996931004888",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "bypass_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035997862698537",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_0": {
                "command": "ADD",
                "cookie": "45035996931004886",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "bypass_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035996485213002",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "9"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_1": {
                "command": "ADD",
                "cookie": "45035996931004887",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:165] 2015-12-29 17:00:44,535 > get_switch_port
[INFO|OpenflowHandler.py:131] 2015-12-29 17:00:44,535 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:00:44,536 > request_curl_url: http://192.168.17.179:8080/wm/core/switch/all/port/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:00:45,542 > {
    "00:00:00:0c:29:7d:49:ec": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "995000000",
                "durationSec": "32037",
                "portNumber": "4",
                "receiveBytes": "839561",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "7270",
                "transmitBytes": "137946214",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3263317"
            },
            {
                "collisions": "0",
                "durationNsec": "873000000",
                "durationSec": "46618",
                "portNumber": "local",
                "receiveBytes": "2842232",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "62231",
                "transmitBytes": "137644836",
                "transmitDropped": "1218",
                "transmitErrors": "0",
                "transmitPackets": "3251759"
            },
            {
                "collisions": "0",
                "durationNsec": "200000000",
                "durationSec": "46581",
                "portNumber": "3",
                "receiveBytes": "144633277",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "3383656",
                "transmitBytes": "3712613",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "71508"
            }
        ],
        "version": "OF_13"
    },
    "00:00:00:0c:29:7d:49:f6": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "707000000",
                "durationSec": "46618",
                "portNumber": "local",
                "receiveBytes": "2432650",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57694",
                "transmitBytes": "130740831",
                "transmitDropped": "2728",
                "transmitErrors": "0",
                "transmitPackets": "3103084"
            },
            {
                "collisions": "0",
                "durationNsec": "711000000",
                "durationSec": "46618",
                "portNumber": "1",
                "receiveBytes": "656643",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "7146",
                "transmitBytes": "131161993",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3108772"
            },
            {
                "collisions": "0",
                "durationNsec": "298000000",
                "durationSec": "46580",
                "portNumber": "3",
                "receiveBytes": "142201705",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "3349814",
                "transmitBytes": "3235224",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "67208"
            }
        ],
        "version": "OF_13"
    },
    "00:00:4a:72:d4:24:ae:41": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "710000000",
                "durationSec": "46618",
                "portNumber": "local",
                "receiveBytes": "2456524",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58017",
                "transmitBytes": "136915794",
                "transmitDropped": "84",
                "transmitErrors": "0",
                "transmitPackets": "3248728"
            },
            {
                "collisions": "0",
                "durationNsec": "833000000",
                "durationSec": "46583",
                "portNumber": "2",
                "receiveBytes": "142467768",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "3350018",
                "transmitBytes": "2604613",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "60390"
            }
        ],
        "version": "OF_13"
    },
    "00:00:ee:42:21:d6:e1:44": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "69000000",
                "durationSec": "37463",
                "portNumber": "56",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "140603231",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3334599"
            },
            {
                "collisions": "0",
                "durationNsec": "837000000",
                "durationSec": "46618",
                "portNumber": "local",
                "receiveBytes": "2435577",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57696",
                "transmitBytes": "141323496",
                "transmitDropped": "7551",
                "transmitErrors": "0",
                "transmitPackets": "3340243"
            },
            {
                "collisions": "0",
                "durationNsec": "336000000",
                "durationSec": "46581",
                "portNumber": "8",
                "receiveBytes": "3712613",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "71508",
                "transmitBytes": "144633277",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3383656"
            },
            {
                "collisions": "0",
                "durationNsec": "492000000",
                "durationSec": "46579",
                "portNumber": "10",
                "receiveBytes": "1363903",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "9966",
                "transmitBytes": "141354678",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3342585"
            },
            {
                "collisions": "0",
                "durationNsec": "871000000",
                "durationSec": "40006",
                "portNumber": "37",
                "receiveBytes": "2455329",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57899",
                "transmitBytes": "140795165",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3338240"
            },
            {
                "collisions": "0",
                "durationNsec": "737000000",
                "durationSec": "40007",
                "portNumber": "36",
                "receiveBytes": "73327784",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "1733265",
                "transmitBytes": "72800315",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "1716391"
            },
            {
                "collisions": "0",
                "durationNsec": "796000000",
                "durationSec": "46618",
                "portNumber": "25",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "140483341",
                "transmitDropped": "29",
                "transmitErrors": "0",
                "transmitPackets": "3333886"
            },
            {
                "collisions": "0",
                "durationNsec": "378000000",
                "durationSec": "30282",
                "portNumber": "63",
                "receiveBytes": "2437544",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57749",
                "transmitBytes": "141058359",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3343229"
            },
            {
                "collisions": "0",
                "durationNsec": "645000000",
                "durationSec": "30283",
                "portNumber": "62",
                "receiveBytes": "2431767",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57679",
                "transmitBytes": "140697051",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3337439"
            },
            {
                "collisions": "0",
                "durationNsec": "936000000",
                "durationSec": "37449",
                "portNumber": "57",
                "receiveBytes": "6308",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "50",
                "transmitBytes": "140516372",
                "transmitDropped": "1",
                "transmitErrors": "0",
                "transmitPackets": "3334386"
            },
            {
                "collisions": "0",
                "durationNsec": "663000000",
                "durationSec": "37485",
                "portNumber": "54",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "140737623",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3335661"
            },
            {
                "collisions": "0",
                "durationNsec": "948000000",
                "durationSec": "40005",
                "portNumber": "38",
                "receiveBytes": "2452716",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57873",
                "transmitBytes": "140733762",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3337681"
            },
            {
                "collisions": "0",
                "durationNsec": "445000000",
                "durationSec": "46580",
                "portNumber": "9",
                "receiveBytes": "3235224",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "67208",
                "transmitBytes": "142201705",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3349814"
            },
            {
                "collisions": "0",
                "durationNsec": "591000000",
                "durationSec": "37474",
                "portNumber": "55",
                "receiveBytes": "690",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "9",
                "transmitBytes": "140497807",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3334073"
            },
            {
                "collisions": "0",
                "durationNsec": "116000000",
                "durationSec": "40005",
                "portNumber": "39",
                "receiveBytes": "70758937",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "1683930",
                "transmitBytes": "99281130",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "2347209"
            },
            {
                "collisions": "0",
                "durationNsec": "777000000",
                "durationSec": "30280",
                "portNumber": "64",
                "receiveBytes": "2433277",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57691",
                "transmitBytes": "140721281",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3337568"
            },
            {
                "collisions": "0",
                "durationNsec": "872000000",
                "durationSec": "30284",
                "portNumber": "61",
                "receiveBytes": "2432954",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57693",
                "transmitBytes": "140699237",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3337462"
            },
            {
                "collisions": "0",
                "durationNsec": "30000000",
                "durationSec": "46584",
                "portNumber": "6",
                "receiveBytes": "2604613",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "60390",
                "transmitBytes": "142467768",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3350018"
            },
            {
                "collisions": "0",
                "durationNsec": "995000000",
                "durationSec": "46582",
                "portNumber": "7",
                "receiveBytes": "0",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "0",
                "transmitBytes": "142598141",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3351849"
            },
            {
                "collisions": "0",
                "durationNsec": "259000000",
                "durationSec": "40004",
                "portNumber": "40",
                "receiveBytes": "2488361",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58725",
                "transmitBytes": "141074131",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3340037"
            },
            {
                "collisions": "0",
                "durationNsec": "776000000",
                "durationSec": "30285",
                "portNumber": "60",
                "receiveBytes": "3100029",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "64277",
                "transmitBytes": "141595400",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3349029"
            }
        ],
        "version": "OF_13"
    }
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:00:45,545 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:00:45,545 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:00:45,547 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "bypass_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035999402694763",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_2": {
                "command": "ADD",
                "cookie": "45035996931004888",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "bypass_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035997862698537",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_0": {
                "command": "ADD",
                "cookie": "45035996931004886",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "bypass_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035996485213002",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "9"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_1": {
                "command": "ADD",
                "cookie": "45035996931004887",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:00:45,548 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:00:45,548 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:00:45,551 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:00:45,551 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:00:45,551 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:00:45,553 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:45,553 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:45,553 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:45,554 > request_curl_post_data: {"name": "56 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "56"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:45,557 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:45,557 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:45,557 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:45,557 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:45,562 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:45,562 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:45,563 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:45,563 > request_curl_post_data: {"name": "8 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "8"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:45,565 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:45,565 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:45,565 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:45,566 > request_curl_post_data: {"name": "10 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "10"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:45,568 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:45,568 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:45,568 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:45,568 > request_curl_post_data: {"name": "37 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "37"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:45,572 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:45,572 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:45,572 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:45,572 > request_curl_post_data: {"name": "36 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "36"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:45,576 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:45,577 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:45,577 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:45,577 > request_curl_post_data: {"name": "25 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "25"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:45,582 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:45,583 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:45,583 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:45,583 > request_curl_post_data: {"name": "63 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "63"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:45,587 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:45,587 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:45,587 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:45,587 > request_curl_post_data: {"name": "62 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "62"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:45,590 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:45,590 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:45,591 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:45,591 > request_curl_post_data: {"name": "57 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "57"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:45,593 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:45,594 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:45,594 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:45,594 > request_curl_post_data: {"name": "54 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "54"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:45,596 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:45,597 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:45,597 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:45,597 > request_curl_post_data: {"name": "38 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "38"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:45,599 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:45,600 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:45,600 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:45,600 > request_curl_post_data: {"name": "9 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "9"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:45,603 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:45,603 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:45,603 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:45,603 > request_curl_post_data: {"name": "55 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "55"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:45,606 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:45,606 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:45,606 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:45,607 > request_curl_post_data: {"name": "39 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "39"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:45,609 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:45,610 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:45,610 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:45,610 > request_curl_post_data: {"name": "64 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "64"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:45,615 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:45,616 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:45,616 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:45,616 > request_curl_post_data: {"name": "61 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "61"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:45,623 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:45,624 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:45,624 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:45,624 > request_curl_post_data: {"name": "6 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "6"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:45,626 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:45,626 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:45,627 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:45,627 > request_curl_post_data: {"name": "7 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "7"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:45,629 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:45,629 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:45,629 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:45,630 > request_curl_post_data: {"name": "40 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "40"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:45,632 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:45,632 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:45,632 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:45,632 > request_curl_post_data: {"name": "60 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "60"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:45,635 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:45,635 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:45,635 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:45,635 > request_curl_post_data: {"name": "4 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "4"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:45,638 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:45,638 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:45,638 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:45,638 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:45,642 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:45,643 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:45,643 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:45,643 > request_curl_post_data: {"name": "3 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "3"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:45,647 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:45,647 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:45,648 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:45,648 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:45,653 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:45,654 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:45,654 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:45,654 > request_curl_post_data: {"name": "2 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "2"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:45,657 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:45,657 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:45,657 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:45,657 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:45,660 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:45,660 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:45,660 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:45,660 > request_curl_post_data: {"name": "1 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "1"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:45,662 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:45,663 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:45,663 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:45,663 > request_curl_post_data: {"name": "3 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "3"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:45,666 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:00:48,413 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:00:48,414 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:00:48,418 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "4 port drop rule": {
                "command": "ADD",
                "cookie": "45035999682764009",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "1 port drop rule": {
                "command": "ADD",
                "cookie": "45035997137007768",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "3 port drop rule": {
                "command": "ADD",
                "cookie": "45035997402522830",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [
        {
            "2 port drop rule": {
                "command": "ADD",
                "cookie": "45035999417248947",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "2"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "54 port drop rule": {
                "command": "ADD",
                "cookie": "45035999813688220",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "54"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "39 port drop rule": {
                "command": "ADD",
                "cookie": "45035998140888993",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "55 port drop rule": {
                "command": "ADD",
                "cookie": "45035997798962103",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "55"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "62 port drop rule": {
                "command": "ADD",
                "cookie": "45035999642724775",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "62"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "7 port drop rule": {
                "command": "ADD",
                "cookie": "45035997933552954",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "9 port drop rule": {
                "command": "ADD",
                "cookie": "45035998199068016",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "25 port drop rule": {
                "command": "ADD",
                "cookie": "45035997515307252",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "25"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "37 port drop rule": {
                "command": "ADD",
                "cookie": "45035997875373931",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "37"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "8 port drop rule": {
                "command": "ADD",
                "cookie": "45036000213794133",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "63 port drop rule": {
                "command": "ADD",
                "cookie": "45035997627998658",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "10 port drop rule": {
                "command": "ADD",
                "cookie": "45035998904451628",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "10"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "40 port drop rule": {
                "command": "ADD",
                "cookie": "45035999188106479",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "40"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "38 port drop rule": {
                "command": "ADD",
                "cookie": "45036000155615110",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "38"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "36 port drop rule": {
                "command": "ADD",
                "cookie": "45035999890100048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "61 port drop rule": {
                "command": "ADD",
                "cookie": "45035997362483596",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "61"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "60 port drop rule": {
                "command": "ADD",
                "cookie": "45035999377209713",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "64 port drop rule": {
                "command": "ADD",
                "cookie": "45035999908239837",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "64"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "56 port drop rule": {
                "command": "ADD",
                "cookie": "45036000079203282",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "56"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "6 port drop rule": {
                "command": "ADD",
                "cookie": "45035999948279071",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "6"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "57 port drop rule": {
                "command": "ADD",
                "cookie": "45035998064477165",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "57"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:00:48,421 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:00:48,421 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:00:48,426 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:00:48,426 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:00:48,427 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:00:48,431 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:165] 2015-12-29 17:00:50,088 > get_switch_port
[INFO|OpenflowHandler.py:131] 2015-12-29 17:00:50,088 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:00:50,089 > request_curl_url: http://192.168.17.179:8080/wm/core/switch/all/port/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:00:51,095 > {
    "00:00:00:0c:29:7d:49:ec": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "525000000",
                "durationSec": "32043",
                "portNumber": "4",
                "receiveBytes": "839561",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "7270",
                "transmitBytes": "137946214",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3263317"
            },
            {
                "collisions": "0",
                "durationNsec": "403000000",
                "durationSec": "46624",
                "portNumber": "local",
                "receiveBytes": "2842820",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "62237",
                "transmitBytes": "137644836",
                "transmitDropped": "1218",
                "transmitErrors": "0",
                "transmitPackets": "3251759"
            },
            {
                "collisions": "0",
                "durationNsec": "730000000",
                "durationSec": "46586",
                "portNumber": "3",
                "receiveBytes": "144633277",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "3383656",
                "transmitBytes": "3713201",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "71514"
            }
        ],
        "version": "OF_13"
    },
    "00:00:00:0c:29:7d:49:f6": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "235000000",
                "durationSec": "46624",
                "portNumber": "local",
                "receiveBytes": "2432650",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57694",
                "transmitBytes": "130740831",
                "transmitDropped": "2728",
                "transmitErrors": "0",
                "transmitPackets": "3103084"
            },
            {
                "collisions": "0",
                "durationNsec": "239000000",
                "durationSec": "46624",
                "portNumber": "1",
                "receiveBytes": "656643",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "7146",
                "transmitBytes": "131162091",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3108773"
            },
            {
                "collisions": "0",
                "durationNsec": "825000000",
                "durationSec": "46585",
                "portNumber": "3",
                "receiveBytes": "142201803",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "3349815",
                "transmitBytes": "3235224",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "67208"
            }
        ],
        "version": "OF_13"
    },
    "00:00:4a:72:d4:24:ae:41": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "239000000",
                "durationSec": "46624",
                "portNumber": "local",
                "receiveBytes": "2456524",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58017",
                "transmitBytes": "136915794",
                "transmitDropped": "84",
                "transmitErrors": "0",
                "transmitPackets": "3248728"
            },
            {
                "collisions": "0",
                "durationNsec": "362000000",
                "durationSec": "46589",
                "portNumber": "2",
                "receiveBytes": "142467768",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "3350018",
                "transmitBytes": "2604613",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "60390"
            }
        ],
        "version": "OF_13"
    },
    "00:00:ee:42:21:d6:e1:44": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "599000000",
                "durationSec": "37468",
                "portNumber": "56",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "140603231",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3334599"
            },
            {
                "collisions": "0",
                "durationNsec": "367000000",
                "durationSec": "46624",
                "portNumber": "local",
                "receiveBytes": "2435577",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57696",
                "transmitBytes": "141323496",
                "transmitDropped": "7551",
                "transmitErrors": "0",
                "transmitPackets": "3340243"
            },
            {
                "collisions": "0",
                "durationNsec": "866000000",
                "durationSec": "46586",
                "portNumber": "8",
                "receiveBytes": "3713201",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "71514",
                "transmitBytes": "144633277",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3383656"
            },
            {
                "collisions": "0",
                "durationNsec": "22000000",
                "durationSec": "46585",
                "portNumber": "10",
                "receiveBytes": "1363903",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "9966",
                "transmitBytes": "141354678",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3342585"
            },
            {
                "collisions": "0",
                "durationNsec": "401000000",
                "durationSec": "40012",
                "portNumber": "37",
                "receiveBytes": "2455329",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57899",
                "transmitBytes": "140795165",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3338240"
            },
            {
                "collisions": "0",
                "durationNsec": "267000000",
                "durationSec": "40013",
                "portNumber": "36",
                "receiveBytes": "73327784",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "1733265",
                "transmitBytes": "72800511",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "1716393"
            },
            {
                "collisions": "0",
                "durationNsec": "326000000",
                "durationSec": "46624",
                "portNumber": "25",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "140483341",
                "transmitDropped": "29",
                "transmitErrors": "0",
                "transmitPackets": "3333886"
            },
            {
                "collisions": "0",
                "durationNsec": "908000000",
                "durationSec": "30287",
                "portNumber": "63",
                "receiveBytes": "2437544",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57749",
                "transmitBytes": "141058359",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3343229"
            },
            {
                "collisions": "0",
                "durationNsec": "175000000",
                "durationSec": "30289",
                "portNumber": "62",
                "receiveBytes": "2431767",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57679",
                "transmitBytes": "140697051",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3337439"
            },
            {
                "collisions": "0",
                "durationNsec": "466000000",
                "durationSec": "37455",
                "portNumber": "57",
                "receiveBytes": "6308",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "50",
                "transmitBytes": "140516372",
                "transmitDropped": "1",
                "transmitErrors": "0",
                "transmitPackets": "3334386"
            },
            {
                "collisions": "0",
                "durationNsec": "193000000",
                "durationSec": "37491",
                "portNumber": "54",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "140737623",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3335661"
            },
            {
                "collisions": "0",
                "durationNsec": "478000000",
                "durationSec": "40011",
                "portNumber": "38",
                "receiveBytes": "2452716",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57873",
                "transmitBytes": "140733762",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3337681"
            },
            {
                "collisions": "0",
                "durationNsec": "975000000",
                "durationSec": "46585",
                "portNumber": "9",
                "receiveBytes": "3235224",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "67208",
                "transmitBytes": "142201803",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3349815"
            },
            {
                "collisions": "0",
                "durationNsec": "121000000",
                "durationSec": "37480",
                "portNumber": "55",
                "receiveBytes": "690",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "9",
                "transmitBytes": "140497807",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3334073"
            },
            {
                "collisions": "0",
                "durationNsec": "646000000",
                "durationSec": "40010",
                "portNumber": "39",
                "receiveBytes": "70758937",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "1683930",
                "transmitBytes": "99281130",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "2347209"
            },
            {
                "collisions": "0",
                "durationNsec": "307000000",
                "durationSec": "30286",
                "portNumber": "64",
                "receiveBytes": "2433277",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57691",
                "transmitBytes": "140721281",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3337568"
            },
            {
                "collisions": "0",
                "durationNsec": "402000000",
                "durationSec": "30290",
                "portNumber": "61",
                "receiveBytes": "2432954",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57693",
                "transmitBytes": "140699237",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3337462"
            },
            {
                "collisions": "0",
                "durationNsec": "560000000",
                "durationSec": "46589",
                "portNumber": "6",
                "receiveBytes": "2604613",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "60390",
                "transmitBytes": "142467768",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3350018"
            },
            {
                "collisions": "0",
                "durationNsec": "525000000",
                "durationSec": "46588",
                "portNumber": "7",
                "receiveBytes": "0",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "0",
                "transmitBytes": "142598141",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3351849"
            },
            {
                "collisions": "0",
                "durationNsec": "789000000",
                "durationSec": "40009",
                "portNumber": "40",
                "receiveBytes": "2488361",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58725",
                "transmitBytes": "141074131",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3340037"
            },
            {
                "collisions": "0",
                "durationNsec": "306000000",
                "durationSec": "30291",
                "portNumber": "60",
                "receiveBytes": "3100029",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "64277",
                "transmitBytes": "141595400",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3349029"
            }
        ],
        "version": "OF_13"
    }
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:00:51,098 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:00:51,098 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:00:51,100 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:00:51,100 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:00:51,100 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:00:51,102 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:00:51,102 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:00:51,102 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:00:51,104 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:51,105 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:51,105 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:51,105 > request_curl_post_data: {"name": "56 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "56"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:51,108 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:51,108 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:51,109 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:51,109 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:51,112 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:51,112 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:51,112 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:51,113 > request_curl_post_data: {"name": "8 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "8"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:51,116 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:51,117 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:51,117 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:51,117 > request_curl_post_data: {"name": "10 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "10"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:51,119 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:51,120 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:51,120 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:51,120 > request_curl_post_data: {"name": "37 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "37"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:51,123 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:51,124 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:51,124 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:51,124 > request_curl_post_data: {"name": "36 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "36"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:51,127 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:51,127 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:51,128 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:51,128 > request_curl_post_data: {"name": "25 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "25"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:51,132 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:51,132 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:51,132 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:51,133 > request_curl_post_data: {"name": "63 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "63"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:51,138 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:51,138 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:51,139 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:51,139 > request_curl_post_data: {"name": "62 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "62"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:51,141 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:51,141 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:51,141 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:51,141 > request_curl_post_data: {"name": "57 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "57"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:51,143 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:51,144 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:51,144 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:51,144 > request_curl_post_data: {"name": "54 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "54"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:51,146 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:51,147 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:51,147 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:51,147 > request_curl_post_data: {"name": "38 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "38"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:51,149 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:51,150 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:51,150 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:51,150 > request_curl_post_data: {"name": "9 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "9"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:51,152 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:51,153 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:51,153 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:51,153 > request_curl_post_data: {"name": "55 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "55"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:51,156 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:51,156 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:51,156 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:51,156 > request_curl_post_data: {"name": "39 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "39"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:51,159 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:51,159 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:51,159 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:51,159 > request_curl_post_data: {"name": "64 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "64"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:51,164 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:51,164 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:51,164 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:51,164 > request_curl_post_data: {"name": "61 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "61"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:51,168 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:51,169 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:51,170 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:51,170 > request_curl_post_data: {"name": "6 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "6"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:51,179 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:51,180 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:51,180 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:51,180 > request_curl_post_data: {"name": "7 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "7"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:51,182 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:51,183 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:51,183 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:51,183 > request_curl_post_data: {"name": "40 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "40"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:51,186 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:51,186 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:51,186 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:51,186 > request_curl_post_data: {"name": "60 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "60"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:51,189 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:51,189 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:51,190 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:51,190 > request_curl_post_data: {"name": "4 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "4"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:51,192 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:51,193 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:51,193 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:51,193 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:51,196 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:51,196 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:51,197 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:51,197 > request_curl_post_data: {"name": "3 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "3"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:51,200 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:51,201 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:51,201 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:51,201 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:51,207 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:51,207 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:51,208 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:51,208 > request_curl_post_data: {"name": "2 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "2"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:51,212 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:51,212 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:51,212 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:51,212 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:51,214 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:51,215 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:51,215 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:51,215 > request_curl_post_data: {"name": "1 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "1"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:51,218 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:51,218 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:51,218 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:51,218 > request_curl_post_data: {"name": "3 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "3"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:51,221 > {
    "status": "Entry pushed"
}
[INFO|SFCManager.py:575] 2015-12-29 17:00:53,416 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:00:53,417 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-29 17:00:53,418 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:00:53,419 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:00:53,419 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:00:53,420 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:00:53,422 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:00:53,450 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-29 17:00:53,455 > load ns entry (bypass)
[DEBUG|SFCManager.py:701] 2015-12-29 17:00:53,456 > load tenant entry (bypass)
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:53,459 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:53,459 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:53,459 > request_curl_post_data: {"name": "bypass_default_0", "actions": "output=3", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 1}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:53,462 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:53,462 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:53,462 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:53,462 > request_curl_post_data: {"name": "bypass_default_0_reverse", "actions": "output=1", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:53,465 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:53,465 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:53,465 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:53,465 > request_curl_post_data: {"name": "bypass_default_1", "actions": "output=8", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 9}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:53,468 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:53,468 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:53,468 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:53,468 > request_curl_post_data: {"name": "bypass_default_1_reverse", "actions": "output=9", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 8}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:53,471 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:53,471 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:53,471 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:53,472 > request_curl_post_data: {"name": "bypass_default_2", "actions": "output=4", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:53,474 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:00:53,474 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:00:53,475 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:00:53,475 > request_curl_post_data: {"name": "bypass_default_2_reverse", "actions": "output=3", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 4}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:00:53,477 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:00:53,478 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:00:53,478 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:00:53,485 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "bypass_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035999402694763",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "4 port drop rule": {
                "command": "ADD",
                "cookie": "45035999682764009",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_2": {
                "command": "ADD",
                "cookie": "45035996931004888",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "bypass_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035997862698537",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "1 port drop rule": {
                "command": "ADD",
                "cookie": "45035997137007768",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_0": {
                "command": "ADD",
                "cookie": "45035996931004886",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "3 port drop rule": {
                "command": "ADD",
                "cookie": "45035997402522830",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [
        {
            "2 port drop rule": {
                "command": "ADD",
                "cookie": "45035999417248947",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "2"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "54 port drop rule": {
                "command": "ADD",
                "cookie": "45035999813688220",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "54"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "39 port drop rule": {
                "command": "ADD",
                "cookie": "45035998140888993",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "55 port drop rule": {
                "command": "ADD",
                "cookie": "45035997798962103",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "55"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035996485213002",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "9"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "62 port drop rule": {
                "command": "ADD",
                "cookie": "45035999642724775",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "62"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "7 port drop rule": {
                "command": "ADD",
                "cookie": "45035997933552954",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "9 port drop rule": {
                "command": "ADD",
                "cookie": "45035998199068016",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "25 port drop rule": {
                "command": "ADD",
                "cookie": "45035997515307252",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "25"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "37 port drop rule": {
                "command": "ADD",
                "cookie": "45035997875373931",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "37"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "8 port drop rule": {
                "command": "ADD",
                "cookie": "45036000213794133",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "63 port drop rule": {
                "command": "ADD",
                "cookie": "45035997627998658",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "10 port drop rule": {
                "command": "ADD",
                "cookie": "45035998904451628",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "10"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "40 port drop rule": {
                "command": "ADD",
                "cookie": "45035999188106479",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "40"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "38 port drop rule": {
                "command": "ADD",
                "cookie": "45036000155615110",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "38"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_1": {
                "command": "ADD",
                "cookie": "45035996931004887",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "36 port drop rule": {
                "command": "ADD",
                "cookie": "45035999890100048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "61 port drop rule": {
                "command": "ADD",
                "cookie": "45035997362483596",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "61"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "60 port drop rule": {
                "command": "ADD",
                "cookie": "45035999377209713",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "64 port drop rule": {
                "command": "ADD",
                "cookie": "45035999908239837",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "64"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "56 port drop rule": {
                "command": "ADD",
                "cookie": "45036000079203282",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "56"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "6 port drop rule": {
                "command": "ADD",
                "cookie": "45035999948279071",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "6"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "57 port drop rule": {
                "command": "ADD",
                "cookie": "45035998064477165",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "57"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:05:05,427 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:05:05,428 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:05:05,433 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "bypass_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035999402694763",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "4 port drop rule": {
                "command": "ADD",
                "cookie": "45035999682764009",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_2": {
                "command": "ADD",
                "cookie": "45035996931004888",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "bypass_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035997862698537",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "1 port drop rule": {
                "command": "ADD",
                "cookie": "45035997137007768",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_0": {
                "command": "ADD",
                "cookie": "45035996931004886",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "3 port drop rule": {
                "command": "ADD",
                "cookie": "45035997402522830",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [
        {
            "2 port drop rule": {
                "command": "ADD",
                "cookie": "45035999417248947",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "2"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "54 port drop rule": {
                "command": "ADD",
                "cookie": "45035999813688220",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "54"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "39 port drop rule": {
                "command": "ADD",
                "cookie": "45035998140888993",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "55 port drop rule": {
                "command": "ADD",
                "cookie": "45035997798962103",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "55"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035996485213002",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "9"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "62 port drop rule": {
                "command": "ADD",
                "cookie": "45035999642724775",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "62"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "7 port drop rule": {
                "command": "ADD",
                "cookie": "45035997933552954",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "9 port drop rule": {
                "command": "ADD",
                "cookie": "45035998199068016",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "25 port drop rule": {
                "command": "ADD",
                "cookie": "45035997515307252",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "25"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "37 port drop rule": {
                "command": "ADD",
                "cookie": "45035997875373931",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "37"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "8 port drop rule": {
                "command": "ADD",
                "cookie": "45036000213794133",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "63 port drop rule": {
                "command": "ADD",
                "cookie": "45035997627998658",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "10 port drop rule": {
                "command": "ADD",
                "cookie": "45035998904451628",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "10"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "40 port drop rule": {
                "command": "ADD",
                "cookie": "45035999188106479",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "40"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "38 port drop rule": {
                "command": "ADD",
                "cookie": "45036000155615110",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "38"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_1": {
                "command": "ADD",
                "cookie": "45035996931004887",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "36 port drop rule": {
                "command": "ADD",
                "cookie": "45035999890100048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "61 port drop rule": {
                "command": "ADD",
                "cookie": "45035997362483596",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "61"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "60 port drop rule": {
                "command": "ADD",
                "cookie": "45035999377209713",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "64 port drop rule": {
                "command": "ADD",
                "cookie": "45035999908239837",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "64"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "56 port drop rule": {
                "command": "ADD",
                "cookie": "45036000079203282",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "56"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "6 port drop rule": {
                "command": "ADD",
                "cookie": "45035999948279071",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "6"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "57 port drop rule": {
                "command": "ADD",
                "cookie": "45035998064477165",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "57"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:05:05,437 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:05:05,438 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:05:05,444 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:05:05,445 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:05:05,445 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:05:05,481 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:165] 2015-12-29 17:05:07,543 > get_switch_port
[INFO|OpenflowHandler.py:131] 2015-12-29 17:05:07,543 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:05:07,544 > request_curl_url: http://192.168.17.179:8080/wm/core/switch/all/port/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:05:08,549 > {
    "00:00:00:0c:29:7d:49:ec": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "970000000",
                "durationSec": "32300",
                "portNumber": "4",
                "receiveBytes": "839561",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "7270",
                "transmitBytes": "137956025",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3263468"
            },
            {
                "collisions": "0",
                "durationNsec": "848000000",
                "durationSec": "46881",
                "portNumber": "local",
                "receiveBytes": "2845660",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "62283",
                "transmitBytes": "137645045",
                "transmitDropped": "1218",
                "transmitErrors": "0",
                "transmitPackets": "3251760"
            },
            {
                "collisions": "0",
                "durationNsec": "175000000",
                "durationSec": "46844",
                "portNumber": "3",
                "receiveBytes": "144638888",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "3383737",
                "transmitBytes": "3718251",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "71594"
            }
        ],
        "version": "OF_13"
    },
    "00:00:00:0c:29:7d:49:f6": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "682000000",
                "durationSec": "46881",
                "portNumber": "local",
                "receiveBytes": "2433278",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57702",
                "transmitBytes": "130741040",
                "transmitDropped": "2728",
                "transmitErrors": "0",
                "transmitPackets": "3103085"
            },
            {
                "collisions": "0",
                "durationNsec": "686000000",
                "durationSec": "46881",
                "portNumber": "1",
                "receiveBytes": "656643",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "7146",
                "transmitBytes": "131172812",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3108935"
            },
            {
                "collisions": "0",
                "durationNsec": "272000000",
                "durationSec": "46843",
                "portNumber": "3",
                "receiveBytes": "142209332",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "3349931",
                "transmitBytes": "3238062",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "67250"
            }
        ],
        "version": "OF_13"
    },
    "00:00:4a:72:d4:24:ae:41": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "684000000",
                "durationSec": "46881",
                "portNumber": "local",
                "receiveBytes": "2457152",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58025",
                "transmitBytes": "136916003",
                "transmitDropped": "84",
                "transmitErrors": "0",
                "transmitPackets": "3248729"
            },
            {
                "collisions": "0",
                "durationNsec": "807000000",
                "durationSec": "46846",
                "portNumber": "2",
                "receiveBytes": "142470541",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "3350057",
                "transmitBytes": "2607451",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "60432"
            }
        ],
        "version": "OF_13"
    },
    "00:00:ee:42:21:d6:e1:44": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "44000000",
                "durationSec": "37726",
                "portNumber": "56",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "140603794",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3334604"
            },
            {
                "collisions": "0",
                "durationNsec": "813000000",
                "durationSec": "46881",
                "portNumber": "local",
                "receiveBytes": "2435931",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57700",
                "transmitBytes": "141323705",
                "transmitDropped": "7551",
                "transmitErrors": "0",
                "transmitPackets": "3340244"
            },
            {
                "collisions": "0",
                "durationNsec": "312000000",
                "durationSec": "46844",
                "portNumber": "8",
                "receiveBytes": "3718251",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "71594",
                "transmitBytes": "144638888",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3383737"
            },
            {
                "collisions": "0",
                "durationNsec": "468000000",
                "durationSec": "46842",
                "portNumber": "10",
                "receiveBytes": "1371261",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "10003",
                "transmitBytes": "141357242",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3342623"
            },
            {
                "collisions": "0",
                "durationNsec": "847000000",
                "durationSec": "40269",
                "portNumber": "37",
                "receiveBytes": "2456037",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57907",
                "transmitBytes": "140798292",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3338283"
            },
            {
                "collisions": "0",
                "durationNsec": "713000000",
                "durationSec": "40270",
                "portNumber": "36",
                "receiveBytes": "73328618",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "1733276",
                "transmitBytes": "72803932",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "1716439"
            },
            {
                "collisions": "0",
                "durationNsec": "771000000",
                "durationSec": "46881",
                "portNumber": "25",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "140483904",
                "transmitDropped": "29",
                "transmitErrors": "0",
                "transmitPackets": "3333891"
            },
            {
                "collisions": "0",
                "durationNsec": "353000000",
                "durationSec": "30545",
                "portNumber": "63",
                "receiveBytes": "2438378",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57760",
                "transmitBytes": "141061486",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3343272"
            },
            {
                "collisions": "0",
                "durationNsec": "620000000",
                "durationSec": "30546",
                "portNumber": "62",
                "receiveBytes": "2432475",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57687",
                "transmitBytes": "140700178",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3337482"
            },
            {
                "collisions": "0",
                "durationNsec": "911000000",
                "durationSec": "37712",
                "portNumber": "57",
                "receiveBytes": "6308",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "50",
                "transmitBytes": "140516935",
                "transmitDropped": "1",
                "transmitErrors": "0",
                "transmitPackets": "3334391"
            },
            {
                "collisions": "0",
                "durationNsec": "638000000",
                "durationSec": "37748",
                "portNumber": "54",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "140738186",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3335666"
            },
            {
                "collisions": "0",
                "durationNsec": "923000000",
                "durationSec": "40268",
                "portNumber": "38",
                "receiveBytes": "2453424",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57881",
                "transmitBytes": "140736889",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3337724"
            },
            {
                "collisions": "0",
                "durationNsec": "420000000",
                "durationSec": "46843",
                "portNumber": "9",
                "receiveBytes": "3238062",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "67250",
                "transmitBytes": "142209332",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3349931"
            },
            {
                "collisions": "0",
                "durationNsec": "566000000",
                "durationSec": "37737",
                "portNumber": "55",
                "receiveBytes": "690",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "9",
                "transmitBytes": "140498370",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3334078"
            },
            {
                "collisions": "0",
                "durationNsec": "91000000",
                "durationSec": "40268",
                "portNumber": "39",
                "receiveBytes": "70759645",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "1683938",
                "transmitBytes": "99284257",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "2347252"
            },
            {
                "collisions": "0",
                "durationNsec": "752000000",
                "durationSec": "30543",
                "portNumber": "64",
                "receiveBytes": "2433985",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57699",
                "transmitBytes": "140724408",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3337611"
            },
            {
                "collisions": "0",
                "durationNsec": "847000000",
                "durationSec": "30547",
                "portNumber": "61",
                "receiveBytes": "2433662",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57701",
                "transmitBytes": "140702364",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3337505"
            },
            {
                "collisions": "0",
                "durationNsec": "5000000",
                "durationSec": "46847",
                "portNumber": "6",
                "receiveBytes": "2607451",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "60432",
                "transmitBytes": "142470541",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3350057"
            },
            {
                "collisions": "0",
                "durationNsec": "970000000",
                "durationSec": "46845",
                "portNumber": "7",
                "receiveBytes": "0",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "0",
                "transmitBytes": "142600914",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3351888"
            },
            {
                "collisions": "0",
                "durationNsec": "234000000",
                "durationSec": "40267",
                "portNumber": "40",
                "receiveBytes": "2489069",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58733",
                "transmitBytes": "141077258",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3340080"
            },
            {
                "collisions": "0",
                "durationNsec": "751000000",
                "durationSec": "30548",
                "portNumber": "60",
                "receiveBytes": "3100989",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "64291",
                "transmitBytes": "141598527",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3349072"
            }
        ],
        "version": "OF_13"
    }
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:05:08,552 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:05:08,552 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:05:08,554 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:05:08,555 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:05:08,555 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:05:08,556 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:05:08,557 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:05:08,557 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:05:08,559 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:08,559 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:08,559 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:08,559 > request_curl_post_data: {"name": "56 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "56"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:08,562 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:08,563 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:08,563 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:08,563 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:08,566 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:08,567 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:08,567 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:08,567 > request_curl_post_data: {"name": "8 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "8"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:08,572 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:08,573 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:08,573 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:08,573 > request_curl_post_data: {"name": "10 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "10"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:08,575 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:08,575 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:08,575 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:08,576 > request_curl_post_data: {"name": "37 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "37"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:08,578 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:08,578 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:08,578 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:08,578 > request_curl_post_data: {"name": "36 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "36"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:08,582 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:08,583 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:08,583 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:08,583 > request_curl_post_data: {"name": "25 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "25"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:08,587 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:08,587 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:08,588 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:08,588 > request_curl_post_data: {"name": "63 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "63"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:08,593 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:08,593 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:08,594 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:08,594 > request_curl_post_data: {"name": "62 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "62"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:08,599 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:08,599 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:08,599 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:08,599 > request_curl_post_data: {"name": "57 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "57"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:08,602 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:08,602 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:08,602 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:08,602 > request_curl_post_data: {"name": "54 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "54"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:08,605 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:08,605 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:08,605 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:08,605 > request_curl_post_data: {"name": "38 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "38"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:08,608 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:08,608 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:08,608 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:08,608 > request_curl_post_data: {"name": "9 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "9"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:08,611 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:08,612 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:08,612 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:08,612 > request_curl_post_data: {"name": "55 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "55"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:08,615 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:08,615 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:08,615 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:08,616 > request_curl_post_data: {"name": "39 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "39"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:08,619 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:08,619 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:08,619 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:08,619 > request_curl_post_data: {"name": "64 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "64"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:08,623 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:08,623 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:08,623 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:08,623 > request_curl_post_data: {"name": "61 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "61"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:08,626 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:08,626 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:08,627 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:08,627 > request_curl_post_data: {"name": "6 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "6"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:08,631 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:08,632 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:08,632 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:08,633 > request_curl_post_data: {"name": "7 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "7"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:08,638 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:08,638 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:08,638 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:08,638 > request_curl_post_data: {"name": "40 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "40"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:08,643 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:08,643 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:08,643 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:08,643 > request_curl_post_data: {"name": "60 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "60"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:08,646 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:08,646 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:08,646 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:08,646 > request_curl_post_data: {"name": "4 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "4"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:08,649 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:08,650 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:08,650 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:08,650 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:08,653 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:08,653 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:08,654 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:08,654 > request_curl_post_data: {"name": "3 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "3"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:08,656 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:08,657 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:08,657 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:08,657 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:08,661 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:08,661 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:08,662 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:08,662 > request_curl_post_data: {"name": "2 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "2"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:08,668 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:08,668 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:08,668 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:08,668 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:08,671 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:08,671 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:08,671 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:08,671 > request_curl_post_data: {"name": "1 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "1"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:08,673 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:08,674 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:08,674 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:08,674 > request_curl_post_data: {"name": "3 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "3"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:08,677 > {
    "status": "Entry pushed"
}
[INFO|SFCManager.py:575] 2015-12-29 17:05:19,011 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:05:19,012 > load ns entry (testing)
[INFO|SFCManager.py:602] 2015-12-29 17:05:19,013 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:05:19,014 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:05:19,014 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:05:19,016 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:05:19,018 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 17:05:19,025 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-29 17:05:19,025 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 17:05:19,026 > load ns entry (testing)
[DEBUG|SFCManager.py:701] 2015-12-29 17:05:19,027 > load tenant entry (testing)
[INFO|SFCManager.py:575] 2015-12-29 17:05:20,369 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:05:20,370 > load ns entry (testing)
[INFO|SFCManager.py:602] 2015-12-29 17:05:20,372 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:05:20,372 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:05:20,373 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:05:20,376 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:05:20,377 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 17:05:20,407 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-29 17:05:20,407 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 17:05:20,408 > load ns entry (testing)
[DEBUG|SFCManager.py:701] 2015-12-29 17:05:20,409 > load tenant entry (testing)
[INFO|SFCManager.py:575] 2015-12-29 17:05:21,344 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:05:21,345 > load ns entry (testing)
[INFO|SFCManager.py:602] 2015-12-29 17:05:21,347 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:05:21,347 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:05:21,348 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:05:21,350 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:05:21,352 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 17:05:21,359 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-29 17:05:21,359 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 17:05:21,360 > load ns entry (testing)
[DEBUG|SFCManager.py:701] 2015-12-29 17:05:21,362 > load tenant entry (testing)
[INFO|SFCManager.py:575] 2015-12-29 17:05:26,824 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:05:26,825 > load ns entry (testing)
[INFO|SFCManager.py:602] 2015-12-29 17:05:26,827 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:05:26,827 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:05:26,828 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:05:26,829 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:05:26,832 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 17:05:26,835 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-29 17:05:26,836 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 17:05:26,839 > load ns entry (testing)
[DEBUG|SFCManager.py:701] 2015-12-29 17:05:26,840 > load tenant entry (testing)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:05:30,712 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:05:30,713 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:05:30,717 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "4 port drop rule": {
                "command": "ADD",
                "cookie": "45035999682764009",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "1 port drop rule": {
                "command": "ADD",
                "cookie": "45035997137007768",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "3 port drop rule": {
                "command": "ADD",
                "cookie": "45035997402522830",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [
        {
            "2 port drop rule": {
                "command": "ADD",
                "cookie": "45035999417248947",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "2"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "54 port drop rule": {
                "command": "ADD",
                "cookie": "45035999813688220",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "54"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "39 port drop rule": {
                "command": "ADD",
                "cookie": "45035998140888993",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "55 port drop rule": {
                "command": "ADD",
                "cookie": "45035997798962103",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "55"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "62 port drop rule": {
                "command": "ADD",
                "cookie": "45035999642724775",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "62"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "7 port drop rule": {
                "command": "ADD",
                "cookie": "45035997933552954",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "9 port drop rule": {
                "command": "ADD",
                "cookie": "45035998199068016",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "25 port drop rule": {
                "command": "ADD",
                "cookie": "45035997515307252",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "25"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "37 port drop rule": {
                "command": "ADD",
                "cookie": "45035997875373931",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "37"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "8 port drop rule": {
                "command": "ADD",
                "cookie": "45036000213794133",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "63 port drop rule": {
                "command": "ADD",
                "cookie": "45035997627998658",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "10 port drop rule": {
                "command": "ADD",
                "cookie": "45035998904451628",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "10"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "40 port drop rule": {
                "command": "ADD",
                "cookie": "45035999188106479",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "40"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "38 port drop rule": {
                "command": "ADD",
                "cookie": "45036000155615110",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "38"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "36 port drop rule": {
                "command": "ADD",
                "cookie": "45035999890100048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "61 port drop rule": {
                "command": "ADD",
                "cookie": "45035997362483596",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "61"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "60 port drop rule": {
                "command": "ADD",
                "cookie": "45035999377209713",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "64 port drop rule": {
                "command": "ADD",
                "cookie": "45035999908239837",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "64"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "56 port drop rule": {
                "command": "ADD",
                "cookie": "45036000079203282",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "56"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "6 port drop rule": {
                "command": "ADD",
                "cookie": "45035999948279071",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "6"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "57 port drop rule": {
                "command": "ADD",
                "cookie": "45035998064477165",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "57"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:05:30,720 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:05:30,720 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:05:30,724 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:05:30,725 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:05:30,725 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:05:30,731 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:165] 2015-12-29 17:05:33,237 > get_switch_port
[INFO|OpenflowHandler.py:131] 2015-12-29 17:05:33,237 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:05:33,238 > request_curl_url: http://192.168.17.179:8080/wm/core/switch/all/port/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:05:34,244 > {
    "00:00:00:0c:29:7d:49:ec": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "663000000",
                "durationSec": "32326",
                "portNumber": "4",
                "receiveBytes": "839561",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "7270",
                "transmitBytes": "137956285",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3263472"
            },
            {
                "collisions": "0",
                "durationNsec": "541000000",
                "durationSec": "46907",
                "portNumber": "local",
                "receiveBytes": "2845660",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "62283",
                "transmitBytes": "137645045",
                "transmitDropped": "1218",
                "transmitErrors": "0",
                "transmitPackets": "3251760"
            },
            {
                "collisions": "0",
                "durationNsec": "868000000",
                "durationSec": "46869",
                "portNumber": "3",
                "receiveBytes": "144639010",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "3383739",
                "transmitBytes": "3718434",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "71597"
            }
        ],
        "version": "OF_13"
    },
    "00:00:00:0c:29:7d:49:f6": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "373000000",
                "durationSec": "46907",
                "portNumber": "local",
                "receiveBytes": "2433278",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57702",
                "transmitBytes": "130741040",
                "transmitDropped": "2728",
                "transmitErrors": "0",
                "transmitPackets": "3103085"
            },
            {
                "collisions": "0",
                "durationNsec": "377000000",
                "durationSec": "46907",
                "portNumber": "1",
                "receiveBytes": "656643",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "7146",
                "transmitBytes": "131173072",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3108939"
            },
            {
                "collisions": "0",
                "durationNsec": "963000000",
                "durationSec": "46868",
                "portNumber": "3",
                "receiveBytes": "142209592",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "3349935",
                "transmitBytes": "3238322",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "67254"
            }
        ],
        "version": "OF_13"
    },
    "00:00:4a:72:d4:24:ae:41": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "376000000",
                "durationSec": "46907",
                "portNumber": "local",
                "receiveBytes": "2457152",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58025",
                "transmitBytes": "136916003",
                "transmitDropped": "84",
                "transmitErrors": "0",
                "transmitPackets": "3248729"
            },
            {
                "collisions": "0",
                "durationNsec": "500000000",
                "durationSec": "46872",
                "portNumber": "2",
                "receiveBytes": "142470801",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "3350061",
                "transmitBytes": "2607711",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "60436"
            }
        ],
        "version": "OF_13"
    },
    "00:00:ee:42:21:d6:e1:44": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "738000000",
                "durationSec": "37751",
                "portNumber": "56",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "140603794",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3334604"
            },
            {
                "collisions": "0",
                "durationNsec": "506000000",
                "durationSec": "46907",
                "portNumber": "local",
                "receiveBytes": "2435931",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57700",
                "transmitBytes": "141323705",
                "transmitDropped": "7551",
                "transmitErrors": "0",
                "transmitPackets": "3340244"
            },
            {
                "collisions": "0",
                "durationNsec": "5000000",
                "durationSec": "46870",
                "portNumber": "8",
                "receiveBytes": "3718434",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "71597",
                "transmitBytes": "144639010",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3383739"
            },
            {
                "collisions": "0",
                "durationNsec": "161000000",
                "durationSec": "46868",
                "portNumber": "10",
                "receiveBytes": "1371261",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "10003",
                "transmitBytes": "141357502",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3342627"
            },
            {
                "collisions": "0",
                "durationNsec": "540000000",
                "durationSec": "40295",
                "portNumber": "37",
                "receiveBytes": "2456037",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57907",
                "transmitBytes": "140798552",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3338287"
            },
            {
                "collisions": "0",
                "durationNsec": "407000000",
                "durationSec": "40296",
                "portNumber": "36",
                "receiveBytes": "73328618",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "1733276",
                "transmitBytes": "72804192",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "1716443"
            },
            {
                "collisions": "0",
                "durationNsec": "465000000",
                "durationSec": "46907",
                "portNumber": "25",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "140483904",
                "transmitDropped": "29",
                "transmitErrors": "0",
                "transmitPackets": "3333891"
            },
            {
                "collisions": "0",
                "durationNsec": "47000000",
                "durationSec": "30571",
                "portNumber": "63",
                "receiveBytes": "2438378",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57760",
                "transmitBytes": "141061746",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3343276"
            },
            {
                "collisions": "0",
                "durationNsec": "314000000",
                "durationSec": "30572",
                "portNumber": "62",
                "receiveBytes": "2432475",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57687",
                "transmitBytes": "140700438",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3337486"
            },
            {
                "collisions": "0",
                "durationNsec": "605000000",
                "durationSec": "37738",
                "portNumber": "57",
                "receiveBytes": "6308",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "50",
                "transmitBytes": "140516935",
                "transmitDropped": "1",
                "transmitErrors": "0",
                "transmitPackets": "3334391"
            },
            {
                "collisions": "0",
                "durationNsec": "332000000",
                "durationSec": "37774",
                "portNumber": "54",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "140738186",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3335666"
            },
            {
                "collisions": "0",
                "durationNsec": "617000000",
                "durationSec": "40294",
                "portNumber": "38",
                "receiveBytes": "2453424",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57881",
                "transmitBytes": "140737149",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3337728"
            },
            {
                "collisions": "0",
                "durationNsec": "114000000",
                "durationSec": "46869",
                "portNumber": "9",
                "receiveBytes": "3238322",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "67254",
                "transmitBytes": "142209592",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3349935"
            },
            {
                "collisions": "0",
                "durationNsec": "260000000",
                "durationSec": "37763",
                "portNumber": "55",
                "receiveBytes": "690",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "9",
                "transmitBytes": "140498370",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3334078"
            },
            {
                "collisions": "0",
                "durationNsec": "785000000",
                "durationSec": "40293",
                "portNumber": "39",
                "receiveBytes": "70759645",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "1683938",
                "transmitBytes": "99284517",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "2347256"
            },
            {
                "collisions": "0",
                "durationNsec": "446000000",
                "durationSec": "30569",
                "portNumber": "64",
                "receiveBytes": "2433985",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57699",
                "transmitBytes": "140724668",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3337615"
            },
            {
                "collisions": "0",
                "durationNsec": "541000000",
                "durationSec": "30573",
                "portNumber": "61",
                "receiveBytes": "2433662",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57701",
                "transmitBytes": "140702624",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3337509"
            },
            {
                "collisions": "0",
                "durationNsec": "700000000",
                "durationSec": "46872",
                "portNumber": "6",
                "receiveBytes": "2607711",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "60436",
                "transmitBytes": "142470801",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3350061"
            },
            {
                "collisions": "0",
                "durationNsec": "665000000",
                "durationSec": "46871",
                "portNumber": "7",
                "receiveBytes": "0",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "0",
                "transmitBytes": "142601174",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3351892"
            },
            {
                "collisions": "0",
                "durationNsec": "929000000",
                "durationSec": "40292",
                "portNumber": "40",
                "receiveBytes": "2489069",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58733",
                "transmitBytes": "141077518",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3340084"
            },
            {
                "collisions": "0",
                "durationNsec": "446000000",
                "durationSec": "30574",
                "portNumber": "60",
                "receiveBytes": "3100989",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "64291",
                "transmitBytes": "141598787",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3349076"
            }
        ],
        "version": "OF_13"
    }
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:05:34,248 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:05:34,248 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:05:34,250 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:05:34,250 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:05:34,250 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:05:34,251 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:05:34,252 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:05:34,252 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:05:34,253 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:34,253 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:34,254 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:34,254 > request_curl_post_data: {"name": "56 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "56"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:34,256 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:34,257 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:34,257 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:34,257 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:34,260 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:34,261 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:34,261 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:34,261 > request_curl_post_data: {"name": "8 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "8"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:34,265 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:34,266 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:34,266 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:34,266 > request_curl_post_data: {"name": "10 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "10"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:34,268 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:34,269 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:34,269 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:34,269 > request_curl_post_data: {"name": "37 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "37"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:34,272 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:34,272 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:34,272 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:34,272 > request_curl_post_data: {"name": "36 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "36"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:34,275 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:34,275 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:34,276 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:34,276 > request_curl_post_data: {"name": "25 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "25"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:34,280 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:34,280 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:34,281 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:34,281 > request_curl_post_data: {"name": "63 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "63"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:34,286 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:34,287 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:34,287 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:34,287 > request_curl_post_data: {"name": "62 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "62"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:34,290 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:34,290 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:34,290 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:34,290 > request_curl_post_data: {"name": "57 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "57"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:34,293 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:34,293 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:34,293 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:34,293 > request_curl_post_data: {"name": "54 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "54"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:34,296 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:34,296 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:34,296 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:34,296 > request_curl_post_data: {"name": "38 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "38"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:34,299 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:34,299 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:34,299 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:34,299 > request_curl_post_data: {"name": "9 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "9"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:34,302 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:34,302 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:34,302 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:34,302 > request_curl_post_data: {"name": "55 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "55"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:34,305 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:34,305 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:34,305 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:34,305 > request_curl_post_data: {"name": "39 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "39"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:34,308 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:34,308 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:34,308 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:34,308 > request_curl_post_data: {"name": "64 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "64"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:34,311 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:34,312 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:34,312 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:34,312 > request_curl_post_data: {"name": "61 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "61"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:34,315 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:34,315 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:34,316 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:34,316 > request_curl_post_data: {"name": "6 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "6"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:34,321 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:34,322 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:34,322 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:34,322 > request_curl_post_data: {"name": "7 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "7"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:34,325 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:34,326 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:34,326 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:34,326 > request_curl_post_data: {"name": "40 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "40"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:34,329 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:34,329 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:34,329 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:34,329 > request_curl_post_data: {"name": "60 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "60"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:34,332 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:34,332 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:34,332 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:34,332 > request_curl_post_data: {"name": "4 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "4"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:34,335 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:34,335 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:34,335 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:34,336 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:34,338 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:34,338 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:34,338 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:34,338 > request_curl_post_data: {"name": "3 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "3"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:34,342 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:34,342 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:34,342 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:34,342 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:34,348 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:34,349 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:34,349 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:34,349 > request_curl_post_data: {"name": "2 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "2"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:34,355 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:34,355 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:34,355 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:34,355 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:34,358 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:34,358 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:34,358 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:34,358 > request_curl_post_data: {"name": "1 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "1"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:34,361 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:34,362 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:34,362 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:34,362 > request_curl_post_data: {"name": "3 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "3"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:34,365 > {
    "status": "Entry pushed"
}
[INFO|SFCManager.py:575] 2015-12-29 17:05:36,760 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:05:36,761 > load ns entry (testing)
[INFO|SFCManager.py:602] 2015-12-29 17:05:36,763 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:05:36,763 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:05:36,764 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:05:36,767 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:05:36,769 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 17:05:36,772 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-29 17:05:36,772 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 17:05:36,774 > load ns entry (testing)
[DEBUG|SFCManager.py:701] 2015-12-29 17:05:36,776 > load tenant entry (testing)
[INFO|OpenflowHandler.py:165] 2015-12-29 17:05:38,874 > get_switch_port
[INFO|OpenflowHandler.py:131] 2015-12-29 17:05:38,874 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:05:38,876 > request_curl_url: http://192.168.17.179:8080/wm/core/switch/all/port/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:05:39,880 > {
    "00:00:00:0c:29:7d:49:ec": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "300000000",
                "durationSec": "32332",
                "portNumber": "4",
                "receiveBytes": "839561",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "7270",
                "transmitBytes": "137956346",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3263473"
            },
            {
                "collisions": "0",
                "durationNsec": "178000000",
                "durationSec": "46913",
                "portNumber": "local",
                "receiveBytes": "2845660",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "62283",
                "transmitBytes": "137645045",
                "transmitDropped": "1218",
                "transmitErrors": "0",
                "transmitPackets": "3251760"
            },
            {
                "collisions": "0",
                "durationNsec": "505000000",
                "durationSec": "46875",
                "portNumber": "3",
                "receiveBytes": "144639071",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "3383740",
                "transmitBytes": "3718495",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "71598"
            }
        ],
        "version": "OF_13"
    },
    "00:00:00:0c:29:7d:49:f6": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "10000000",
                "durationSec": "46913",
                "portNumber": "local",
                "receiveBytes": "2433278",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57702",
                "transmitBytes": "130741040",
                "transmitDropped": "2728",
                "transmitErrors": "0",
                "transmitPackets": "3103085"
            },
            {
                "collisions": "0",
                "durationNsec": "14000000",
                "durationSec": "46913",
                "portNumber": "1",
                "receiveBytes": "656643",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "7146",
                "transmitBytes": "131173133",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3108940"
            },
            {
                "collisions": "0",
                "durationNsec": "600000000",
                "durationSec": "46874",
                "portNumber": "3",
                "receiveBytes": "142209653",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "3349936",
                "transmitBytes": "3238383",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "67255"
            }
        ],
        "version": "OF_13"
    },
    "00:00:4a:72:d4:24:ae:41": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "14000000",
                "durationSec": "46913",
                "portNumber": "local",
                "receiveBytes": "2457152",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58025",
                "transmitBytes": "136916003",
                "transmitDropped": "84",
                "transmitErrors": "0",
                "transmitPackets": "3248729"
            },
            {
                "collisions": "0",
                "durationNsec": "137000000",
                "durationSec": "46878",
                "portNumber": "2",
                "receiveBytes": "142470862",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "3350062",
                "transmitBytes": "2607772",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "60437"
            }
        ],
        "version": "OF_13"
    },
    "00:00:ee:42:21:d6:e1:44": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "374000000",
                "durationSec": "37757",
                "portNumber": "56",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "140603794",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3334604"
            },
            {
                "collisions": "0",
                "durationNsec": "142000000",
                "durationSec": "46913",
                "portNumber": "local",
                "receiveBytes": "2435931",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57700",
                "transmitBytes": "141323705",
                "transmitDropped": "7551",
                "transmitErrors": "0",
                "transmitPackets": "3340244"
            },
            {
                "collisions": "0",
                "durationNsec": "641000000",
                "durationSec": "46875",
                "portNumber": "8",
                "receiveBytes": "3718495",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "71598",
                "transmitBytes": "144639071",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3383740"
            },
            {
                "collisions": "0",
                "durationNsec": "797000000",
                "durationSec": "46873",
                "portNumber": "10",
                "receiveBytes": "1371470",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "10004",
                "transmitBytes": "141357563",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3342628"
            },
            {
                "collisions": "0",
                "durationNsec": "176000000",
                "durationSec": "40301",
                "portNumber": "37",
                "receiveBytes": "2456037",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57907",
                "transmitBytes": "140798613",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3338288"
            },
            {
                "collisions": "0",
                "durationNsec": "42000000",
                "durationSec": "40302",
                "portNumber": "36",
                "receiveBytes": "73328618",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "1733276",
                "transmitBytes": "72804253",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "1716444"
            },
            {
                "collisions": "0",
                "durationNsec": "100000000",
                "durationSec": "46913",
                "portNumber": "25",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "140483904",
                "transmitDropped": "29",
                "transmitErrors": "0",
                "transmitPackets": "3333891"
            },
            {
                "collisions": "0",
                "durationNsec": "682000000",
                "durationSec": "30576",
                "portNumber": "63",
                "receiveBytes": "2438378",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57760",
                "transmitBytes": "141061807",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3343277"
            },
            {
                "collisions": "0",
                "durationNsec": "949000000",
                "durationSec": "30577",
                "portNumber": "62",
                "receiveBytes": "2432475",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57687",
                "transmitBytes": "140700499",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3337487"
            },
            {
                "collisions": "0",
                "durationNsec": "241000000",
                "durationSec": "37744",
                "portNumber": "57",
                "receiveBytes": "6308",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "50",
                "transmitBytes": "140516935",
                "transmitDropped": "1",
                "transmitErrors": "0",
                "transmitPackets": "3334391"
            },
            {
                "collisions": "0",
                "durationNsec": "968000000",
                "durationSec": "37779",
                "portNumber": "54",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "140738186",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3335666"
            },
            {
                "collisions": "0",
                "durationNsec": "253000000",
                "durationSec": "40300",
                "portNumber": "38",
                "receiveBytes": "2453424",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57881",
                "transmitBytes": "140737210",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3337729"
            },
            {
                "collisions": "0",
                "durationNsec": "750000000",
                "durationSec": "46874",
                "portNumber": "9",
                "receiveBytes": "3238383",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "67255",
                "transmitBytes": "142209653",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3349936"
            },
            {
                "collisions": "0",
                "durationNsec": "896000000",
                "durationSec": "37768",
                "portNumber": "55",
                "receiveBytes": "690",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "9",
                "transmitBytes": "140498370",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3334078"
            },
            {
                "collisions": "0",
                "durationNsec": "421000000",
                "durationSec": "40299",
                "portNumber": "39",
                "receiveBytes": "70759645",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "1683938",
                "transmitBytes": "99284578",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "2347257"
            },
            {
                "collisions": "0",
                "durationNsec": "82000000",
                "durationSec": "30575",
                "portNumber": "64",
                "receiveBytes": "2433985",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57699",
                "transmitBytes": "140724729",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3337616"
            },
            {
                "collisions": "0",
                "durationNsec": "177000000",
                "durationSec": "30579",
                "portNumber": "61",
                "receiveBytes": "2433662",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57701",
                "transmitBytes": "140702685",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3337510"
            },
            {
                "collisions": "0",
                "durationNsec": "335000000",
                "durationSec": "46878",
                "portNumber": "6",
                "receiveBytes": "2607772",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "60437",
                "transmitBytes": "142470862",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3350062"
            },
            {
                "collisions": "0",
                "durationNsec": "300000000",
                "durationSec": "46877",
                "portNumber": "7",
                "receiveBytes": "0",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "0",
                "transmitBytes": "142601235",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3351893"
            },
            {
                "collisions": "0",
                "durationNsec": "564000000",
                "durationSec": "40298",
                "portNumber": "40",
                "receiveBytes": "2489069",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58733",
                "transmitBytes": "141077579",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3340085"
            },
            {
                "collisions": "0",
                "durationNsec": "81000000",
                "durationSec": "30580",
                "portNumber": "60",
                "receiveBytes": "3100989",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "64291",
                "transmitBytes": "141598848",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3349077"
            }
        ],
        "version": "OF_13"
    }
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:05:39,883 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:05:39,883 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:05:39,887 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "4 port drop rule": {
                "command": "ADD",
                "cookie": "45035999682764009",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "1 port drop rule": {
                "command": "ADD",
                "cookie": "45035997137007768",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "3 port drop rule": {
                "command": "ADD",
                "cookie": "45035997402522830",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [
        {
            "2 port drop rule": {
                "command": "ADD",
                "cookie": "45035999417248947",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "2"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "54 port drop rule": {
                "command": "ADD",
                "cookie": "45035999813688220",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "54"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "39 port drop rule": {
                "command": "ADD",
                "cookie": "45035998140888993",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "55 port drop rule": {
                "command": "ADD",
                "cookie": "45035997798962103",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "55"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "62 port drop rule": {
                "command": "ADD",
                "cookie": "45035999642724775",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "62"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "7 port drop rule": {
                "command": "ADD",
                "cookie": "45035997933552954",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "9 port drop rule": {
                "command": "ADD",
                "cookie": "45035998199068016",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "25 port drop rule": {
                "command": "ADD",
                "cookie": "45035997515307252",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "25"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "37 port drop rule": {
                "command": "ADD",
                "cookie": "45035997875373931",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "37"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "8 port drop rule": {
                "command": "ADD",
                "cookie": "45036000213794133",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "63 port drop rule": {
                "command": "ADD",
                "cookie": "45035997627998658",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "10 port drop rule": {
                "command": "ADD",
                "cookie": "45035998904451628",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "10"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "40 port drop rule": {
                "command": "ADD",
                "cookie": "45035999188106479",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "40"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "38 port drop rule": {
                "command": "ADD",
                "cookie": "45036000155615110",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "38"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "36 port drop rule": {
                "command": "ADD",
                "cookie": "45035999890100048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "61 port drop rule": {
                "command": "ADD",
                "cookie": "45035997362483596",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "61"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "60 port drop rule": {
                "command": "ADD",
                "cookie": "45035999377209713",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "64 port drop rule": {
                "command": "ADD",
                "cookie": "45035999908239837",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "64"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "56 port drop rule": {
                "command": "ADD",
                "cookie": "45036000079203282",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "56"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "6 port drop rule": {
                "command": "ADD",
                "cookie": "45035999948279071",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "6"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "57 port drop rule": {
                "command": "ADD",
                "cookie": "45035998064477165",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "57"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:05:39,895 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:05:39,896 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:05:39,905 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:05:39,905 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:05:39,905 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:05:39,907 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:39,907 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:39,907 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:39,907 > request_curl_post_data: {"name": "56 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "56"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:39,911 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:39,911 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:39,911 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:39,911 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:39,915 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:39,916 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:39,916 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:39,916 > request_curl_post_data: {"name": "8 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "8"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:39,921 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:39,922 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:39,922 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:39,922 > request_curl_post_data: {"name": "10 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "10"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:39,927 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:39,927 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:39,928 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:39,928 > request_curl_post_data: {"name": "37 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "37"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:39,931 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:39,931 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:39,931 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:39,932 > request_curl_post_data: {"name": "36 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "36"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:39,934 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:39,935 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:39,935 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:39,935 > request_curl_post_data: {"name": "25 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "25"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:39,937 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:39,937 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:39,938 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:39,938 > request_curl_post_data: {"name": "63 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "63"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:39,940 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:39,940 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:39,940 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:39,940 > request_curl_post_data: {"name": "62 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "62"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:39,949 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:39,950 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:39,950 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:39,950 > request_curl_post_data: {"name": "57 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "57"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:39,955 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:39,956 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:39,956 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:39,956 > request_curl_post_data: {"name": "54 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "54"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:39,962 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:39,962 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:39,963 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:39,963 > request_curl_post_data: {"name": "38 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "38"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:39,965 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:39,966 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:39,966 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:39,966 > request_curl_post_data: {"name": "9 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "9"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:39,968 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:39,969 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:39,969 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:39,969 > request_curl_post_data: {"name": "55 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "55"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:39,971 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:39,972 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:39,972 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:39,972 > request_curl_post_data: {"name": "39 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "39"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:39,974 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:39,975 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:39,975 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:39,975 > request_curl_post_data: {"name": "64 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "64"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:39,978 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:39,978 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:39,978 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:39,978 > request_curl_post_data: {"name": "61 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "61"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:39,982 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:39,982 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:39,982 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:39,982 > request_curl_post_data: {"name": "6 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "6"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:39,986 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:39,987 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:39,987 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:39,987 > request_curl_post_data: {"name": "7 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "7"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:39,993 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:39,993 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:39,994 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:39,994 > request_curl_post_data: {"name": "40 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "40"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:39,996 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:39,997 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:39,997 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:39,997 > request_curl_post_data: {"name": "60 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "60"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:39,999 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:40,000 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:40,000 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:40,000 > request_curl_post_data: {"name": "4 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "4"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:40,002 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:40,002 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:40,003 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:40,003 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:40,005 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:40,005 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:40,006 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:40,006 > request_curl_post_data: {"name": "3 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "3"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:40,009 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:40,009 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:40,009 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:40,009 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:40,014 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:40,014 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:40,014 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:40,014 > request_curl_post_data: {"name": "2 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "2"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:40,018 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:40,018 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:40,018 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:40,019 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:40,024 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:40,024 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:40,024 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:40,024 > request_curl_post_data: {"name": "1 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "1"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:40,027 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:05:40,027 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:05:40,027 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:05:40,027 > request_curl_post_data: {"name": "3 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "3"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:05:40,030 > {
    "status": "Entry pushed"
}
[INFO|SFCManager.py:575] 2015-12-29 17:05:41,680 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:05:41,681 > load ns entry (testing)
[INFO|SFCManager.py:602] 2015-12-29 17:05:41,683 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:05:41,684 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:05:41,685 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:05:41,686 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:05:41,688 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 17:05:41,694 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-29 17:05:41,694 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 17:05:41,695 > load ns entry (testing)
[DEBUG|SFCManager.py:701] 2015-12-29 17:05:41,697 > load tenant entry (testing)
[INFO|SFCManager.py:575] 2015-12-29 17:05:48,575 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:05:48,576 > load ns entry (testing)
[INFO|SFCManager.py:602] 2015-12-29 17:05:48,578 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:05:48,578 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:05:48,579 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:05:48,581 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:05:48,582 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 17:05:48,586 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-29 17:05:48,586 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 17:05:48,590 > load ns entry (testing)
[DEBUG|SFCManager.py:701] 2015-12-29 17:05:48,592 > load tenant entry (testing)
[INFO|SFCManager.py:575] 2015-12-29 17:05:54,809 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:05:54,810 > load ns entry (testing)
[INFO|SFCManager.py:602] 2015-12-29 17:05:54,811 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:05:54,812 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:05:54,812 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:05:54,814 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:05:54,816 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 17:05:54,821 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-29 17:05:54,822 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 17:05:54,823 > load ns entry (testing)
[DEBUG|SFCManager.py:701] 2015-12-29 17:05:54,824 > load tenant entry (testing)
[INFO|SFCManager.py:575] 2015-12-29 17:06:03,944 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:06:03,945 > load ns entry (testing)
[INFO|SFCManager.py:602] 2015-12-29 17:06:03,946 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:06:03,947 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:06:03,947 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:06:03,949 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:06:03,951 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 17:06:03,954 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-29 17:06:03,954 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 17:06:03,956 > load ns entry (testing)
[DEBUG|SFCManager.py:701] 2015-12-29 17:06:03,958 > load tenant entry (testing)
[INFO|SFCManager.py:575] 2015-12-29 17:06:07,662 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:06:07,663 > load ns entry (testing)
[INFO|SFCManager.py:602] 2015-12-29 17:06:07,665 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:06:07,666 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:06:07,667 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:06:07,670 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:06:07,671 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 17:06:07,676 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-29 17:06:07,677 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 17:06:07,678 > load ns entry (testing)
[DEBUG|SFCManager.py:701] 2015-12-29 17:06:07,679 > load tenant entry (testing)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:06:14,158 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:06:14,160 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:06:14,164 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "4 port drop rule": {
                "command": "ADD",
                "cookie": "45035999682764009",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "1 port drop rule": {
                "command": "ADD",
                "cookie": "45035997137007768",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "3 port drop rule": {
                "command": "ADD",
                "cookie": "45035997402522830",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [
        {
            "2 port drop rule": {
                "command": "ADD",
                "cookie": "45035999417248947",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "2"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "54 port drop rule": {
                "command": "ADD",
                "cookie": "45035999813688220",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "54"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "39 port drop rule": {
                "command": "ADD",
                "cookie": "45035998140888993",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "55 port drop rule": {
                "command": "ADD",
                "cookie": "45035997798962103",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "55"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "62 port drop rule": {
                "command": "ADD",
                "cookie": "45035999642724775",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "62"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "7 port drop rule": {
                "command": "ADD",
                "cookie": "45035997933552954",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "9 port drop rule": {
                "command": "ADD",
                "cookie": "45035998199068016",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "25 port drop rule": {
                "command": "ADD",
                "cookie": "45035997515307252",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "25"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "37 port drop rule": {
                "command": "ADD",
                "cookie": "45035997875373931",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "37"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "8 port drop rule": {
                "command": "ADD",
                "cookie": "45036000213794133",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "63 port drop rule": {
                "command": "ADD",
                "cookie": "45035997627998658",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "10 port drop rule": {
                "command": "ADD",
                "cookie": "45035998904451628",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "10"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "40 port drop rule": {
                "command": "ADD",
                "cookie": "45035999188106479",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "40"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "38 port drop rule": {
                "command": "ADD",
                "cookie": "45036000155615110",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "38"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "36 port drop rule": {
                "command": "ADD",
                "cookie": "45035999890100048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "61 port drop rule": {
                "command": "ADD",
                "cookie": "45035997362483596",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "61"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "60 port drop rule": {
                "command": "ADD",
                "cookie": "45035999377209713",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "64 port drop rule": {
                "command": "ADD",
                "cookie": "45035999908239837",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "64"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "56 port drop rule": {
                "command": "ADD",
                "cookie": "45036000079203282",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "56"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "6 port drop rule": {
                "command": "ADD",
                "cookie": "45035999948279071",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "6"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "57 port drop rule": {
                "command": "ADD",
                "cookie": "45035998064477165",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "57"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:06:14,166 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:06:14,167 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:06:14,187 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:06:14,187 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:06:14,187 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:06:14,190 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|SFCManager.py:575] 2015-12-29 17:06:16,367 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:06:16,368 > load ns entry (testing)
[INFO|SFCManager.py:602] 2015-12-29 17:06:16,369 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:06:16,370 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:06:16,370 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:06:16,372 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:06:16,374 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 17:06:16,380 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-29 17:06:16,380 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 17:06:16,381 > load ns entry (testing)
[DEBUG|SFCManager.py:701] 2015-12-29 17:06:16,383 > load tenant entry (testing)
[INFO|SFCManager.py:575] 2015-12-29 17:06:22,359 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:06:22,360 > load ns entry (testing)
[INFO|SFCManager.py:602] 2015-12-29 17:06:22,362 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:06:22,362 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:06:22,363 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:06:22,365 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:06:22,367 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 17:06:22,373 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-29 17:06:22,374 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 17:06:22,376 > load ns entry (testing)
[DEBUG|SFCManager.py:701] 2015-12-29 17:06:22,378 > load tenant entry (testing)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:06:26,497 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:06:26,499 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:06:26,501 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:06:26,501 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:06:26,501 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:06:26,530 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:06:26,531 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:06:26,531 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:06:26,535 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|SFCManager.py:575] 2015-12-29 17:06:31,268 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:06:31,269 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-29 17:06:31,270 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:06:31,270 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:06:31,271 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:06:31,272 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:06:31,273 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:06:31,277 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-29 17:06:31,282 > load ns entry (bypass)
[DEBUG|SFCManager.py:701] 2015-12-29 17:06:31,284 > load tenant entry (bypass)
[INFO|OpenflowHandler.py:95] 2015-12-29 17:06:31,287 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:06:31,287 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:06:31,287 > request_curl_post_data: {"name": "bypass_default_0", "actions": "output=3", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 1}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:06:31,290 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:06:31,290 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:06:31,290 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:06:31,290 > request_curl_post_data: {"name": "bypass_default_0_reverse", "actions": "output=1", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:06:31,292 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:06:31,293 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:06:31,293 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:06:31,293 > request_curl_post_data: {"name": "bypass_default_1", "actions": "output=8", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 9}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:06:31,296 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:06:31,296 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:06:31,297 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:06:31,297 > request_curl_post_data: {"name": "bypass_default_1_reverse", "actions": "output=9", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 8}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:06:31,300 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:06:31,300 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:06:31,301 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:06:31,301 > request_curl_post_data: {"name": "bypass_default_2", "actions": "output=4", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:06:31,307 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:06:31,307 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:06:31,308 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:06:31,308 > request_curl_post_data: {"name": "bypass_default_2_reverse", "actions": "output=3", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 4}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:06:31,310 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:06:31,311 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:06:31,311 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:06:31,313 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "bypass_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035999402694763",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_2": {
                "command": "ADD",
                "cookie": "45035996931004888",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "bypass_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035997862698537",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_0": {
                "command": "ADD",
                "cookie": "45035996931004886",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "bypass_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035996485213002",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "9"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_1": {
                "command": "ADD",
                "cookie": "45035996931004887",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:06:33,005 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:06:33,007 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:06:33,010 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "bypass_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035999402694763",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_2": {
                "command": "ADD",
                "cookie": "45035996931004888",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "bypass_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035997862698537",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_0": {
                "command": "ADD",
                "cookie": "45035996931004886",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "bypass_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035996485213002",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "9"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_1": {
                "command": "ADD",
                "cookie": "45035996931004887",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:06:33,011 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:06:33,011 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:06:33,013 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:06:33,014 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:06:33,014 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:06:33,016 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|SFCManager.py:575] 2015-12-29 17:06:35,884 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:06:35,885 > load ns entry (testing)
[INFO|SFCManager.py:602] 2015-12-29 17:06:35,887 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:06:35,887 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:06:35,888 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:06:35,890 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:06:35,891 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:06:35,896 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 63,
            "shortPortNumber": 63
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-29 17:06:35,897 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:06:35,897 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/60/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:06:35,900 > [
    {
        "port": {
            "length": 4,
            "portNumber": 60,
            "shortPortNumber": 60
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-29 17:06:35,902 > load ns entry (testing)
[DEBUG|SFCManager.py:701] 2015-12-29 17:06:35,903 > load tenant entry (testing)
[INFO|OpenflowHandler.py:95] 2015-12-29 17:06:35,907 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:06:35,907 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:06:35,907 > request_curl_post_data: {"name": "testing_default_0", "actions": "output=3", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 1}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:06:35,910 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:06:35,910 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:06:35,911 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:06:35,911 > request_curl_post_data: {"name": "testing_default_0_reverse", "actions": "output=1", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:06:35,914 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:06:35,914 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:06:35,914 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:06:35,914 > request_curl_post_data: {"name": "testing_default_1", "actions": "output=63", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 9}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:06:35,918 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:06:35,919 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:06:35,919 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:06:35,919 > request_curl_post_data: {"name": "testing_default_1_reverse", "actions": "output=9", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 63}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:06:35,924 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:06:35,924 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:06:35,924 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:06:35,924 > request_curl_post_data: {"name": "testing_default_2", "actions": "output=8", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 60}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:06:35,927 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:06:35,927 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:06:35,927 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:06:35,927 > request_curl_post_data: {"name": "testing_default_2_reverse", "actions": "output=60", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 8}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:06:35,930 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:06:35,930 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:06:35,930 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:06:35,930 > request_curl_post_data: {"name": "testing_default_3", "actions": "output=4", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:06:35,933 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:06:35,933 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:06:35,933 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:06:35,933 > request_curl_post_data: {"name": "testing_default_3_reverse", "actions": "output=3", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 4}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:06:35,936 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:06:35,937 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:06:35,937 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:06:35,939 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "testing_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035997551865418",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_3": {
                "command": "ADD",
                "cookie": "45035998866574551",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "testing_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035997389354727",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_0": {
                "command": "ADD",
                "cookie": "45035998866574548",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "testing_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035998929350953",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "60"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_1": {
                "command": "ADD",
                "cookie": "45035998866574549",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "63"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_2": {
                "command": "ADD",
                "cookie": "45035998866574550",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_1_reverse": {
                "command": "ADD",
                "cookie": "45036000306836488",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "9"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:13:02,623 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:13:02,625 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:13:02,628 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "testing_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035997551865418",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_3": {
                "command": "ADD",
                "cookie": "45035998866574551",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "testing_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035997389354727",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_0": {
                "command": "ADD",
                "cookie": "45035998866574548",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "testing_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035998929350953",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "60"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_1": {
                "command": "ADD",
                "cookie": "45035998866574549",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "63"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_2": {
                "command": "ADD",
                "cookie": "45035998866574550",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "testing_default_1_reverse": {
                "command": "ADD",
                "cookie": "45036000306836488",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "9"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:13:02,629 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:13:02,629 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:13:02,632 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:13:02,632 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:13:02,632 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:13:02,635 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|SFCManager.py:575] 2015-12-29 17:13:08,284 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:13:08,285 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-29 17:13:08,287 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:13:08,287 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:13:08,288 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:13:08,290 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:13:08,292 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 17:13:08,296 > There is no route for request info
[ERROR|SFCManager.py:671] 2015-12-29 17:13:08,296 > service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 17:13:08,298 > load ns entry (bypass)
[DEBUG|SFCManager.py:701] 2015-12-29 17:13:08,299 > load tenant entry (bypass)
[INFO|SFCManager.py:575] 2015-12-29 17:13:09,443 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:13:09,444 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-29 17:13:09,446 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:13:09,446 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:13:09,447 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:13:09,448 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:13:09,449 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:13:09,454 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-29 17:13:09,458 > load ns entry (bypass)
[DEBUG|SFCManager.py:701] 2015-12-29 17:13:09,459 > load tenant entry (bypass)
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:09,462 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:09,462 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:09,462 > request_curl_post_data: {"name": "bypass_default_0", "actions": "output=3", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 1}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:09,466 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:09,466 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:09,466 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:09,466 > request_curl_post_data: {"name": "bypass_default_0_reverse", "actions": "output=1", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:09,471 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:09,471 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:09,471 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:09,471 > request_curl_post_data: {"name": "bypass_default_1", "actions": "output=8", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 9}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:09,475 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:09,476 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:09,476 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:09,476 > request_curl_post_data: {"name": "bypass_default_1_reverse", "actions": "output=9", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 8}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:09,480 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:09,481 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:09,481 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:09,481 > request_curl_post_data: {"name": "bypass_default_2", "actions": "output=4", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 3}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:09,486 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:09,486 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:09,486 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:09,486 > request_curl_post_data: {"name": "bypass_default_2_reverse", "actions": "output=3", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 4}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:09,488 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:13:09,489 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:13:09,489 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:13:09,492 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "bypass_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035999402694763",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_2": {
                "command": "ADD",
                "cookie": "45035996931004888",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "bypass_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035997862698537",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_0": {
                "command": "ADD",
                "cookie": "45035996931004886",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "bypass_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035996485213002",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "9"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_1": {
                "command": "ADD",
                "cookie": "45035996931004887",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:13:27,941 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:13:27,943 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:13:27,945 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "bypass_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035999402694763",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_2": {
                "command": "ADD",
                "cookie": "45035996931004888",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "bypass_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035997862698537",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_0": {
                "command": "ADD",
                "cookie": "45035996931004886",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "3"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "bypass_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035996485213002",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "9"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_1": {
                "command": "ADD",
                "cookie": "45035996931004887",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:13:27,946 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:13:27,947 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:13:27,949 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:13:27,949 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:13:27,949 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:13:27,951 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:165] 2015-12-29 17:13:36,729 > get_switch_port
[INFO|OpenflowHandler.py:131] 2015-12-29 17:13:36,729 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:13:36,731 > request_curl_url: http://192.168.17.179:8080/wm/core/switch/all/port/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:13:37,735 > {
    "00:00:00:0c:29:7d:49:ec": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "137000000",
                "durationSec": "32810",
                "portNumber": "4",
                "receiveBytes": "844217",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "7321",
                "transmitBytes": "137976979",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3263676"
            },
            {
                "collisions": "0",
                "durationNsec": "15000000",
                "durationSec": "47391",
                "portNumber": "local",
                "receiveBytes": "2845660",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "62283",
                "transmitBytes": "137645254",
                "transmitDropped": "1218",
                "transmitErrors": "0",
                "transmitPackets": "3251761"
            },
            {
                "collisions": "0",
                "durationNsec": "342000000",
                "durationSec": "47353",
                "portNumber": "3",
                "receiveBytes": "144655910",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "3383885",
                "transmitBytes": "3726905",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "71707"
            }
        ],
        "version": "OF_13"
    },
    "00:00:00:0c:29:7d:49:f6": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "847000000",
                "durationSec": "47390",
                "portNumber": "local",
                "receiveBytes": "2433278",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57702",
                "transmitBytes": "130741249",
                "transmitDropped": "2728",
                "transmitErrors": "0",
                "transmitPackets": "3103086"
            },
            {
                "collisions": "0",
                "durationNsec": "851000000",
                "durationSec": "47390",
                "portNumber": "1",
                "receiveBytes": "660901",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "7191",
                "transmitBytes": "131195834",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3109167"
            },
            {
                "collisions": "0",
                "durationNsec": "437000000",
                "durationSec": "47352",
                "portNumber": "3",
                "receiveBytes": "142228706",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "3350107",
                "transmitBytes": "3246724",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "67363"
            }
        ],
        "version": "OF_13"
    },
    "00:00:4a:72:d4:24:ae:41": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "851000000",
                "durationSec": "47390",
                "portNumber": "local",
                "receiveBytes": "2457152",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58025",
                "transmitBytes": "136925537",
                "transmitDropped": "84",
                "transmitErrors": "0",
                "transmitPackets": "3248777"
            },
            {
                "collisions": "0",
                "durationNsec": "974000000",
                "durationSec": "47355",
                "portNumber": "2",
                "receiveBytes": "142482494",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "3350144",
                "transmitBytes": "2609931",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "60472"
            }
        ],
        "version": "OF_13"
    },
    "00:00:ee:42:21:d6:e1:44": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "212000000",
                "durationSec": "38235",
                "portNumber": "56",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "140613328",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3334652"
            },
            {
                "collisions": "0",
                "durationNsec": "980000000",
                "durationSec": "47390",
                "portNumber": "local",
                "receiveBytes": "2435931",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57700",
                "transmitBytes": "141333239",
                "transmitDropped": "7551",
                "transmitErrors": "0",
                "transmitPackets": "3340292"
            },
            {
                "collisions": "0",
                "durationNsec": "479000000",
                "durationSec": "47353",
                "portNumber": "8",
                "receiveBytes": "3726905",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "71707",
                "transmitBytes": "144655910",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3383885"
            },
            {
                "collisions": "0",
                "durationNsec": "635000000",
                "durationSec": "47351",
                "portNumber": "10",
                "receiveBytes": "1381213",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "10053",
                "transmitBytes": "141361662",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3342691"
            },
            {
                "collisions": "0",
                "durationNsec": "14000000",
                "durationSec": "40779",
                "portNumber": "37",
                "receiveBytes": "2456037",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57907",
                "transmitBytes": "140812246",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3338399"
            },
            {
                "collisions": "0",
                "durationNsec": "880000000",
                "durationSec": "40779",
                "portNumber": "36",
                "receiveBytes": "73328618",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "1733276",
                "transmitBytes": "72817886",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "1716555"
            },
            {
                "collisions": "0",
                "durationNsec": "938000000",
                "durationSec": "47390",
                "portNumber": "25",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "140493438",
                "transmitDropped": "29",
                "transmitErrors": "0",
                "transmitPackets": "3333939"
            },
            {
                "collisions": "0",
                "durationNsec": "520000000",
                "durationSec": "31054",
                "portNumber": "63",
                "receiveBytes": "2442564",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57805",
                "transmitBytes": "141083078",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3343485"
            },
            {
                "collisions": "0",
                "durationNsec": "787000000",
                "durationSec": "31055",
                "portNumber": "62",
                "receiveBytes": "2432475",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57687",
                "transmitBytes": "140714132",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3337598"
            },
            {
                "collisions": "0",
                "durationNsec": "78000000",
                "durationSec": "38222",
                "portNumber": "57",
                "receiveBytes": "6308",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "50",
                "transmitBytes": "140526469",
                "transmitDropped": "1",
                "transmitErrors": "0",
                "transmitPackets": "3334439"
            },
            {
                "collisions": "0",
                "durationNsec": "805000000",
                "durationSec": "38257",
                "portNumber": "54",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "140747720",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3335714"
            },
            {
                "collisions": "0",
                "durationNsec": "90000000",
                "durationSec": "40778",
                "portNumber": "38",
                "receiveBytes": "2453424",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57881",
                "transmitBytes": "140750843",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3337840"
            },
            {
                "collisions": "0",
                "durationNsec": "587000000",
                "durationSec": "47352",
                "portNumber": "9",
                "receiveBytes": "3246724",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "67363",
                "transmitBytes": "142228706",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3350107"
            },
            {
                "collisions": "0",
                "durationNsec": "733000000",
                "durationSec": "38246",
                "portNumber": "55",
                "receiveBytes": "690",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "9",
                "transmitBytes": "140507904",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3334126"
            },
            {
                "collisions": "0",
                "durationNsec": "258000000",
                "durationSec": "40777",
                "portNumber": "39",
                "receiveBytes": "70759645",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "1683938",
                "transmitBytes": "99298211",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "2347368"
            },
            {
                "collisions": "0",
                "durationNsec": "919000000",
                "durationSec": "31052",
                "portNumber": "64",
                "receiveBytes": "2433985",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57699",
                "transmitBytes": "140738362",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3337727"
            },
            {
                "collisions": "0",
                "durationNsec": "14000000",
                "durationSec": "31057",
                "portNumber": "61",
                "receiveBytes": "2433662",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57701",
                "transmitBytes": "140716318",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3337621"
            },
            {
                "collisions": "0",
                "durationNsec": "172000000",
                "durationSec": "47356",
                "portNumber": "6",
                "receiveBytes": "2609931",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "60472",
                "transmitBytes": "142482494",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3350144"
            },
            {
                "collisions": "0",
                "durationNsec": "137000000",
                "durationSec": "47355",
                "portNumber": "7",
                "receiveBytes": "0",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "0",
                "transmitBytes": "142614868",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3352004"
            },
            {
                "collisions": "0",
                "durationNsec": "401000000",
                "durationSec": "40776",
                "portNumber": "40",
                "receiveBytes": "2489069",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58733",
                "transmitBytes": "141091212",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3340196"
            },
            {
                "collisions": "0",
                "durationNsec": "919000000",
                "durationSec": "31057",
                "portNumber": "60",
                "receiveBytes": "3104349",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "64327",
                "transmitBytes": "141619275",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3349276"
            }
        ],
        "version": "OF_13"
    }
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:13:37,738 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:13:37,739 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:13:37,741 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:13:37,741 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:13:37,741 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:13:37,743 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:13:37,743 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:13:37,743 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:13:37,745 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:37,745 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:37,745 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:37,745 > request_curl_post_data: {"name": "56 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "56"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:37,748 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:37,749 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:37,749 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:37,749 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:37,752 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:37,753 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:37,753 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:37,753 > request_curl_post_data: {"name": "8 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "8"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:37,757 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:37,758 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:37,758 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:37,758 > request_curl_post_data: {"name": "10 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "10"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:37,760 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:37,761 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:37,761 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:37,761 > request_curl_post_data: {"name": "37 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "37"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:37,764 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:37,764 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:37,764 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:37,764 > request_curl_post_data: {"name": "36 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "36"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:37,769 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:37,769 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:37,769 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:37,769 > request_curl_post_data: {"name": "25 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "25"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:37,773 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:37,773 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:37,773 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:37,773 > request_curl_post_data: {"name": "63 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "63"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:37,806 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:37,807 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:37,807 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:37,807 > request_curl_post_data: {"name": "62 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "62"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:37,811 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:37,811 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:37,811 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:37,811 > request_curl_post_data: {"name": "57 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "57"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:37,818 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:37,819 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:37,819 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:37,819 > request_curl_post_data: {"name": "54 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "54"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:37,823 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:37,823 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:37,823 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:37,823 > request_curl_post_data: {"name": "38 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "38"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:37,826 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:37,826 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:37,826 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:37,826 > request_curl_post_data: {"name": "9 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "9"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:37,829 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:37,829 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:37,829 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:37,829 > request_curl_post_data: {"name": "55 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "55"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:37,832 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:37,832 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:37,832 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:37,832 > request_curl_post_data: {"name": "39 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "39"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:37,836 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:37,836 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:37,836 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:37,836 > request_curl_post_data: {"name": "64 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "64"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:37,839 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:37,840 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:37,840 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:37,840 > request_curl_post_data: {"name": "61 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "61"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:37,843 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:37,844 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:37,844 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:37,844 > request_curl_post_data: {"name": "6 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "6"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:37,848 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:37,848 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:37,848 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:37,848 > request_curl_post_data: {"name": "7 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "7"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:37,855 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:37,855 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:37,855 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:37,855 > request_curl_post_data: {"name": "40 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "40"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:37,858 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:37,858 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:37,858 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:37,859 > request_curl_post_data: {"name": "60 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "60"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:37,861 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:37,861 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:37,861 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:37,862 > request_curl_post_data: {"name": "4 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "4"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:37,864 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:37,864 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:37,865 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:37,865 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:37,879 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:37,880 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:37,880 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:37,880 > request_curl_post_data: {"name": "3 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "3"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:37,886 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:37,886 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:37,886 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:37,887 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:37,890 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:37,890 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:37,890 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:37,890 > request_curl_post_data: {"name": "2 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "2"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:37,893 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:37,893 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:37,893 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:37,893 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:37,896 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:37,896 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:37,897 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:37,897 > request_curl_post_data: {"name": "1 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "1"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:37,901 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 17:13:37,902 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 17:13:37,902 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 17:13:37,902 > request_curl_post_data: {"name": "3 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "3"}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 17:13:37,906 > {
    "status": "Entry pushed"
}
[DEBUG|SFManager.py:33] 2015-12-29 17:19:05,809 > args ['create-sf', 'eth3', '192.168.1.14/24', 'fa:16:3e:2b:ac:76', 'ingress', 'eth2', '192.168.0.14/24', 'fa:16:3e:c3:18:00', 'egress']
[DEBUG|SFManager.py:41] 2015-12-29 17:19:05,809 > ['eth3']
[DEBUG|SFManager.py:41] 2015-12-29 17:19:05,809 > ['eth3', '192.168.1.14/24']
[DEBUG|SFManager.py:41] 2015-12-29 17:19:05,810 > ['eth3', '192.168.1.14/24', 'fa:16:3e:2b:ac:76']
[DEBUG|SFManager.py:41] 2015-12-29 17:19:05,810 > ['eth3', '192.168.1.14/24', 'fa:16:3e:2b:ac:76', 'ingress']
[DEBUG|SFManager.py:42] 2015-12-29 17:19:05,810 > ['eth3', '192.168.1.14/24', 'fa:16:3e:2b:ac:76', 'ingress']
[DEBUG|SFManager.py:41] 2015-12-29 17:19:05,810 > ['eth2']
[DEBUG|SFManager.py:41] 2015-12-29 17:19:05,810 > ['eth2', '192.168.0.14/24']
[DEBUG|SFManager.py:41] 2015-12-29 17:19:05,810 > ['eth2', '192.168.0.14/24', 'fa:16:3e:c3:18:00']
[DEBUG|SFManager.py:41] 2015-12-29 17:19:05,811 > ['eth2', '192.168.0.14/24', 'fa:16:3e:c3:18:00', 'egress']
[DEBUG|SFManager.py:42] 2015-12-29 17:19:05,811 > ['eth2', '192.168.0.14/24', 'fa:16:3e:c3:18:00', 'egress']
[DEBUG|SFManager.py:45] 2015-12-29 17:19:05,811 > [['eth3', '192.168.1.14/24', 'fa:16:3e:2b:ac:76', 'ingress'], ['eth2', '192.168.0.14/24', 'fa:16:3e:c3:18:00', 'egress']]
[INFO|SFManager.py:49] 2015-12-29 17:19:05,811 > Create a service function [ex: firewall, NAT, DPI]
[DEBUG|SFManager.py:103] 2015-12-29 17:19:05,811 > The SF name is OK (Endian)
[DEBUG|SFManager.py:109] 2015-12-29 17:19:05,811 > The SF Type is OK(UTM)
[DEBUG|SFManager.py:118] 2015-12-29 17:19:05,811 > The interfaces name is OK (eth3)
[DEBUG|SFManager.py:124] 2015-12-29 17:19:05,812 > The interfaces MAC is OK (fa:16:3e:2b:ac:76)
[DEBUG|SFManager.py:118] 2015-12-29 17:19:05,812 > The interfaces name is OK (eth2)
[DEBUG|SFManager.py:124] 2015-12-29 17:19:05,812 > The interfaces MAC is OK (fa:16:3e:c3:18:00)
[DEBUG|SFManager.py:95] 2015-12-29 17:19:05,814 > {'ip': '192.168.0.14/24', 'interfaces': {'eth3': {'ip': '192.168.1.14/24', 'mac': 'fa:16:3e:2b:ac:76', 'type': 'ingress', 'name': 'eth3'}, 'eth2': {'ip': '192.168.0.14/24', 'mac': 'fa:16:3e:c3:18:00', 'type': 'egress', 'name': 'eth2'}}, '_id': ObjectId('568331091d41c88df675998c'), 'type': 'UTM', 'name': 'Endian'}
[INFO|SFManager.py:96] 2015-12-29 17:19:05,814 > The service function insertion is completed
[INFO|SFFManager.py:189] 2015-12-29 17:19:49,842 > delete the service function entrie
[INFO|SFFManager.py:196] 2015-12-29 17:19:49,843 > 1 service entries are deleted
[DEBUG|SFFManager.py:35] 2015-12-29 17:21:40,335 > args ['create-sff', 'Testing', '63', '60', 'Endian', '39', '36']
[DEBUG|SFFManager.py:44] 2015-12-29 17:21:40,336 > ['Testing']
[DEBUG|SFFManager.py:44] 2015-12-29 17:21:40,336 > ['Testing', '63']
[DEBUG|SFFManager.py:44] 2015-12-29 17:21:40,336 > ['Testing', '63', '60']
[DEBUG|SFFManager.py:45] 2015-12-29 17:21:40,336 > ['Testing', '63', '60']
[DEBUG|SFFManager.py:44] 2015-12-29 17:21:40,336 > ['Endian']
[DEBUG|SFFManager.py:44] 2015-12-29 17:21:40,336 > ['Endian', '39']
[DEBUG|SFFManager.py:44] 2015-12-29 17:21:40,337 > ['Endian', '39', '36']
[DEBUG|SFFManager.py:45] 2015-12-29 17:21:40,337 > ['Endian', '39', '36']
[DEBUG|SFFManager.py:48] 2015-12-29 17:21:40,337 > [['Testing', '63', '60'], ['Endian', '39', '36']]
[INFO|SFFManager.py:54] 2015-12-29 17:21:40,337 > Create a service function forwarder
[INFO|SFFManager.py:104] 2015-12-29 17:21:40,337 > validate entry
[DEBUG|SFFManager.py:107] 2015-12-29 17:21:40,337 > SFF name is OK
[DEBUG|SFFManager.py:113] 2015-12-29 17:21:40,337 > SFF type is OK
[DEBUG|SFFManager.py:119] 2015-12-29 17:21:40,337 > SFF dpid is OK(00:00:ee:42:21:d6:e1:44)
[DEBUG|SFFManager.py:127] 2015-12-29 17:21:40,338 > connected_sf's name is OK (Testing)
[DEBUG|SFFManager.py:133] 2015-12-29 17:21:40,338 > connected_sf's ingress_port is OK (63)
[DEBUG|SFFManager.py:139] 2015-12-29 17:21:40,338 > connected_sf's egress_port is OK (60)
[DEBUG|SFFManager.py:127] 2015-12-29 17:21:40,338 > connected_sf's name is OK (Endian)
[DEBUG|SFFManager.py:133] 2015-12-29 17:21:40,338 > connected_sf's ingress_port is OK (39)
[DEBUG|SFFManager.py:139] 2015-12-29 17:21:40,338 > connected_sf's egress_port is OK (36)
[DEBUG|SFFManager.py:99] 2015-12-29 17:21:40,340 > {'_id': ObjectId('568331a41d41c88e6ceaceb7'), 'connected_sf': {'Testing': {'egress_port': '60', 'name': 'Testing', 'ingress_port': '63'}, 'Endian': {'egress_port': '36', 'name': 'Endian', 'ingress_port': '39'}}, 'type': 'general', 'name': 'one-box-br-int', 'dpid': '00:00:ee:42:21:d6:e1:44'}
[INFO|SFFManager.py:100] 2015-12-29 17:21:40,340 > The service function creation is completed
[INFO|VNFFGManager.py:147] 2015-12-29 17:22:11,543 > delete the end point entrie
[INFO|VNFFGManager.py:153] 2015-12-29 17:22:11,544 > 8 entries are deleted
[INFO|VNFFGManager.py:37] 2015-12-29 17:23:03,619 > create VNFFG [ex: firewall, NAT, DPI]
[DEBUG|VNFFGManager.py:48] 2015-12-29 17:23:03,619 > name is empty
[DEBUG|VNFFGManager.py:92] 2015-12-29 17:23:03,619 > name is OK
[DEBUG|VNFFGManager.py:85] 2015-12-29 17:23:03,621 > {'sf_list': ['Endian'], '_id': ObjectId('568331f71d41c88eb9eed5ad'), 'name': 'Endian'}
[INFO|VNFFGManager.py:86] 2015-12-29 17:23:03,621 > The service function insertion is completed
[INFO|VNFFGManager.py:37] 2015-12-29 17:23:13,373 > create VNFFG [ex: firewall, NAT, DPI]
[DEBUG|VNFFGManager.py:48] 2015-12-29 17:23:13,373 > name is empty
[DEBUG|VNFFGManager.py:92] 2015-12-29 17:23:13,373 > name is OK
[DEBUG|VNFFGManager.py:85] 2015-12-29 17:23:13,375 > {'sf_list': ['Testing'], '_id': ObjectId('568332011d41c88ec5f50557'), 'name': 'Testing'}
[INFO|VNFFGManager.py:86] 2015-12-29 17:23:13,375 > The service function insertion is completed
[INFO|VNFFGManager.py:37] 2015-12-29 17:23:30,989 > create VNFFG [ex: firewall, NAT, DPI]
[DEBUG|VNFFGManager.py:48] 2015-12-29 17:23:30,990 > name is empty
[DEBUG|VNFFGManager.py:92] 2015-12-29 17:23:30,990 > name is OK
[DEBUG|VNFFGManager.py:85] 2015-12-29 17:23:30,992 > {'sf_list': ['Testing', 'Endian'], '_id': ObjectId('568332121d41c88ed6f2048e'), 'name': 'Testing_Endian'}
[INFO|VNFFGManager.py:86] 2015-12-29 17:23:30,992 > The service function insertion is completed
[INFO|NSManager.py:169] 2015-12-29 17:25:35,053 > delete the network serivce entrie
[INFO|NSManager.py:175] 2015-12-29 17:25:35,054 > 1 entries are deleted
[INFO|NSManager.py:40] 2015-12-29 17:26:33,958 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-29 17:26:33,959 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-29 17:26:33,959 > name is ok
[DEBUG|NSManager.py:106] 2015-12-29 17:26:33,959 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-29 17:26:33,959 > egress_endpoint is OK
[DEBUG|NSManager.py:91] 2015-12-29 17:26:33,961 > {'vnffg': 'Testing', 'egress_endpoint': 'br-office-ep', 'name': 'Testing', 'ingress_endpoint': 'br-server-ep', '_id': ObjectId('568332c91d41c88f86156132'), 'tenant': 'default'}
[INFO|NSManager.py:92] 2015-12-29 17:26:33,962 > The network service insertion is completed
[INFO|NSManager.py:40] 2015-12-29 17:27:02,165 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-29 17:27:02,166 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-29 17:27:02,166 > name is ok
[DEBUG|NSManager.py:106] 2015-12-29 17:27:02,166 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-29 17:27:02,166 > egress_endpoint is OK
[DEBUG|NSManager.py:91] 2015-12-29 17:27:02,168 > {'vnffg': 'Endian', 'egress_endpoint': 'br-office-ep', 'name': 'Endian', 'ingress_endpoint': 'br-server-ep', '_id': ObjectId('568332e61d41c88f9bd5176e'), 'tenant': 'default'}
[INFO|NSManager.py:92] 2015-12-29 17:27:02,168 > The network service insertion is completed
[INFO|NSManager.py:40] 2015-12-29 17:27:29,457 > create network service entry [ex: firewall, NAT, DPI]
[INFO|NSManager.py:96] 2015-12-29 17:27:29,457 > validate_entry
[DEBUG|NSManager.py:100] 2015-12-29 17:27:29,458 > name is ok
[DEBUG|NSManager.py:106] 2015-12-29 17:27:29,458 > ingress_endpoint is OK
[DEBUG|NSManager.py:112] 2015-12-29 17:27:29,458 > egress_endpoint is OK
[DEBUG|NSManager.py:91] 2015-12-29 17:27:29,460 > {'vnffg': 'Testing_Endian', 'egress_endpoint': 'br-office-ep', 'name': 'All', 'ingress_endpoint': 'br-server-ep', '_id': ObjectId('568333011d41c88fb80ed671'), 'tenant': 'default'}
[INFO|NSManager.py:92] 2015-12-29 17:27:29,460 > The network service insertion is completed
[INFO|SFCManager.py:575] 2015-12-29 17:27:58,960 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:27:58,961 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-29 17:27:58,963 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:27:58,963 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:27:58,964 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:27:58,965 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:27:58,967 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 17:27:58,972 > There is no route for request info
[ERROR|SFCManager.py:671] 2015-12-29 17:27:58,973 > service_path_entry None
[INFO|SFCManager.py:575] 2015-12-29 17:28:03,745 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:28:03,746 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-29 17:28:03,747 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:28:03,747 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:28:03,748 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:28:03,749 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:28:03,750 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 17:28:03,754 > There is no route for request info
[ERROR|SFCManager.py:671] 2015-12-29 17:28:03,754 > service_path_entry None
[INFO|SFCManager.py:575] 2015-12-29 17:28:04,727 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:28:04,728 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-29 17:28:04,729 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:28:04,730 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:28:04,730 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:28:04,731 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:28:04,733 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 17:28:04,736 > There is no route for request info
[ERROR|SFCManager.py:671] 2015-12-29 17:28:04,736 > service_path_entry None
[INFO|SFCManager.py:575] 2015-12-29 17:28:06,348 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:28:06,349 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-29 17:28:06,350 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:28:06,350 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:28:06,351 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:28:06,352 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:28:06,353 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 17:28:06,385 > There is no route for request info
[ERROR|SFCManager.py:671] 2015-12-29 17:28:06,386 > service_path_entry None
[INFO|SFCManager.py:575] 2015-12-29 17:28:08,022 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:28:08,023 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-29 17:28:08,024 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:28:08,025 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:28:08,025 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:28:08,026 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:28:08,028 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 17:28:08,031 > There is no route for request info
[ERROR|SFCManager.py:671] 2015-12-29 17:28:08,032 > service_path_entry None
[INFO|SFCManager.py:575] 2015-12-29 17:28:09,658 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:28:09,659 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-29 17:28:09,660 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:28:09,661 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:28:09,661 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:28:09,662 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:28:09,664 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 17:28:09,670 > There is no route for request info
[ERROR|SFCManager.py:671] 2015-12-29 17:28:09,671 > service_path_entry None
[INFO|SFCManager.py:575] 2015-12-29 17:28:11,551 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:28:11,551 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-29 17:28:11,553 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:28:11,553 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:28:11,554 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:28:11,555 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:28:11,556 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 17:28:11,560 > There is no route for request info
[ERROR|SFCManager.py:671] 2015-12-29 17:28:11,560 > service_path_entry None
[INFO|SFCManager.py:575] 2015-12-29 17:28:13,071 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:28:13,072 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-29 17:28:13,073 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:28:13,074 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:28:13,074 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:28:13,075 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:28:13,077 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 17:28:13,081 > There is no route for request info
[ERROR|SFCManager.py:671] 2015-12-29 17:28:13,081 > service_path_entry None
[INFO|SFCManager.py:575] 2015-12-29 17:28:14,367 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:28:14,368 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-29 17:28:14,369 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:28:14,370 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:28:14,370 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:28:14,371 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:28:14,373 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 17:28:14,376 > There is no route for request info
[ERROR|SFCManager.py:671] 2015-12-29 17:28:14,377 > service_path_entry None
[INFO|SFCManager.py:575] 2015-12-29 17:28:15,908 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:28:15,909 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-29 17:28:15,910 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:28:15,911 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:28:15,911 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:28:15,912 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:28:15,914 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 17:28:15,917 > There is no route for request info
[ERROR|SFCManager.py:671] 2015-12-29 17:28:15,917 > service_path_entry None
[INFO|OpenflowHandler.py:131] 2015-12-29 17:28:21,906 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:28:21,908 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:28:21,911 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "4 port drop rule": {
                "command": "ADD",
                "cookie": "45035999682764009",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "1 port drop rule": {
                "command": "ADD",
                "cookie": "45035997137007768",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "3 port drop rule": {
                "command": "ADD",
                "cookie": "45035997402522830",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [
        {
            "2 port drop rule": {
                "command": "ADD",
                "cookie": "45035999417248947",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "2"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "54 port drop rule": {
                "command": "ADD",
                "cookie": "45035999813688220",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "54"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "39 port drop rule": {
                "command": "ADD",
                "cookie": "45035998140888993",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "55 port drop rule": {
                "command": "ADD",
                "cookie": "45035997798962103",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "55"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "62 port drop rule": {
                "command": "ADD",
                "cookie": "45035999642724775",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "62"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "7 port drop rule": {
                "command": "ADD",
                "cookie": "45035997933552954",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "9 port drop rule": {
                "command": "ADD",
                "cookie": "45035998199068016",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "9"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "25 port drop rule": {
                "command": "ADD",
                "cookie": "45035997515307252",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "25"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "37 port drop rule": {
                "command": "ADD",
                "cookie": "45035997875373931",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "37"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "8 port drop rule": {
                "command": "ADD",
                "cookie": "45036000213794133",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "63 port drop rule": {
                "command": "ADD",
                "cookie": "45035997627998658",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "10 port drop rule": {
                "command": "ADD",
                "cookie": "45035998904451628",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "10"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "40 port drop rule": {
                "command": "ADD",
                "cookie": "45035999188106479",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "40"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "38 port drop rule": {
                "command": "ADD",
                "cookie": "45036000155615110",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "38"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "36 port drop rule": {
                "command": "ADD",
                "cookie": "45035999890100048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "61 port drop rule": {
                "command": "ADD",
                "cookie": "45035997362483596",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "61"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "60 port drop rule": {
                "command": "ADD",
                "cookie": "45035999377209713",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "64 port drop rule": {
                "command": "ADD",
                "cookie": "45035999908239837",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "64"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "56 port drop rule": {
                "command": "ADD",
                "cookie": "45036000079203282",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "56"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "6 port drop rule": {
                "command": "ADD",
                "cookie": "45035999948279071",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "6"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "57 port drop rule": {
                "command": "ADD",
                "cookie": "45035998064477165",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "57"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:28:21,914 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:28:21,915 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:28:21,923 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:28:21,924 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:28:21,924 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:28:21,926 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|SFCManager.py:575] 2015-12-29 17:28:24,300 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:28:24,301 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-29 17:28:24,303 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:28:24,303 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:28:24,304 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:28:24,305 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:28:24,308 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 17:28:24,313 > There is no route for request info
[ERROR|SFCManager.py:671] 2015-12-29 17:28:24,314 > service_path_entry None
[INFO|SFCManager.py:575] 2015-12-29 17:28:25,590 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:28:25,591 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-29 17:28:25,592 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:28:25,592 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:28:25,593 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:28:25,594 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:28:25,595 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:28:25,600 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-29 17:28:39,123 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:28:39,124 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:28:39,127 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:28:39,127 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:28:39,127 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:28:39,129 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-29 17:28:39,130 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:28:39,130 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:28:39,133 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|SFCManager.py:575] 2015-12-29 17:28:40,690 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:28:40,691 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-29 17:28:40,693 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:28:40,693 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:28:40,694 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:28:40,695 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:28:40,696 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:28:40,699 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[INFO|SFCManager.py:575] 2015-12-29 17:28:42,806 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:28:42,807 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-29 17:28:42,809 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:28:42,809 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:28:42,809 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:28:42,810 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:28:42,812 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:28:42,817 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[INFO|SFCManager.py:575] 2015-12-29 17:28:51,830 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:28:51,833 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-29 17:28:51,839 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:28:51,840 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:28:51,840 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:28:51,843 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:28:51,846 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:28:51,849 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-29 17:28:51,851 > load ns entry (bypass)
[DEBUG|SFCManager.py:701] 2015-12-29 17:28:51,852 > load tenant entry (bypass)
[INFO|SFCManager.py:575] 2015-12-29 17:29:04,075 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:29:04,076 > load ns entry (Testing)
[INFO|SFCManager.py:602] 2015-12-29 17:29:04,078 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:29:04,079 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:29:04,079 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:29:04,081 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:29:04,083 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:29:04,086 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 63,
            "shortPortNumber": 63
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-29 17:29:04,087 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:29:04,088 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/60/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:29:04,092 > [
    {
        "port": {
            "length": 4,
            "portNumber": 60,
            "shortPortNumber": 60
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-29 17:29:04,094 > load ns entry (Testing)
[DEBUG|SFCManager.py:701] 2015-12-29 17:29:04,095 > load tenant entry (Testing)
[INFO|SFCManager.py:575] 2015-12-29 17:29:11,180 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:29:11,181 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-29 17:29:11,182 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:29:11,183 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:29:11,183 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:29:11,186 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:29:11,188 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:29:11,193 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 39,
            "shortPortNumber": 39
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-29 17:29:11,193 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:29:11,194 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/36/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:29:11,196 > [
    {
        "port": {
            "length": 4,
            "portNumber": 36,
            "shortPortNumber": 36
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-29 17:29:11,198 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-29 17:29:11,199 > load tenant entry (Endian)
[INFO|SFCManager.py:575] 2015-12-29 17:29:17,910 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:29:17,911 > load ns entry (All)
[INFO|SFCManager.py:602] 2015-12-29 17:29:17,912 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:29:17,913 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:29:17,913 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:29:17,915 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:29:17,917 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:29:17,921 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 63,
            "shortPortNumber": 63
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-29 17:29:17,924 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:29:17,924 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/60/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:29:17,926 > [
    {
        "port": {
            "length": 4,
            "portNumber": 60,
            "shortPortNumber": 60
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 39,
            "shortPortNumber": 39
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-29 17:29:17,927 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:29:17,927 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/36/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:29:17,929 > [
    {
        "port": {
            "length": 4,
            "portNumber": 36,
            "shortPortNumber": 36
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-29 17:29:17,931 > load ns entry (All)
[DEBUG|SFCManager.py:701] 2015-12-29 17:29:17,932 > load tenant entry (All)
[INFO|SFCManager.py:575] 2015-12-29 17:30:35,535 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:30:35,536 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-29 17:30:35,538 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:30:35,538 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:30:35,539 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:30:35,540 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:30:35,543 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:30:35,549 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 39,
            "shortPortNumber": 39
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-29 17:30:35,550 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:30:35,550 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/36/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:30:35,552 > [
    {
        "port": {
            "length": 4,
            "portNumber": 36,
            "shortPortNumber": 36
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-29 17:30:35,554 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-29 17:30:35,556 > load tenant entry (Endian)
[INFO|SFCManager.py:575] 2015-12-29 17:31:32,567 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:31:32,568 > load ns entry (Testing)
[INFO|SFCManager.py:602] 2015-12-29 17:31:32,569 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:31:32,570 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:31:32,571 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:31:32,573 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:31:32,575 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:31:32,582 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 63,
            "shortPortNumber": 63
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-29 17:31:32,583 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:31:32,583 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/60/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:31:32,587 > [
    {
        "port": {
            "length": 4,
            "portNumber": 60,
            "shortPortNumber": 60
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-29 17:31:32,589 > load ns entry (Testing)
[DEBUG|SFCManager.py:701] 2015-12-29 17:31:32,590 > load tenant entry (Testing)
[INFO|SFCManager.py:575] 2015-12-29 17:32:11,910 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 17:32:11,911 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-29 17:32:11,912 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 17:32:11,913 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 17:32:11,913 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 17:32:11,914 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 17:32:11,916 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 17:32:11,920 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-29 17:32:11,923 > load ns entry (bypass)
[DEBUG|SFCManager.py:701] 2015-12-29 17:32:11,924 > load tenant entry (bypass)
[INFO|SFFManager.py:189] 2015-12-29 18:38:42,016 > delete the service function entrie
[INFO|SFFManager.py:196] 2015-12-29 18:38:42,017 > 0 service entries are deleted
[INFO|SFFManager.py:189] 2015-12-29 18:38:46,332 > delete the service function entrie
[INFO|SFFManager.py:196] 2015-12-29 18:38:46,334 > 1 service entries are deleted
[DEBUG|SFFManager.py:35] 2015-12-29 18:39:06,959 > args ['create-sff', 'Endian', '63', '60', 'Testing', '39', '36']
[DEBUG|SFFManager.py:44] 2015-12-29 18:39:06,960 > ['Endian']
[DEBUG|SFFManager.py:44] 2015-12-29 18:39:06,960 > ['Endian', '63']
[DEBUG|SFFManager.py:44] 2015-12-29 18:39:06,960 > ['Endian', '63', '60']
[DEBUG|SFFManager.py:45] 2015-12-29 18:39:06,960 > ['Endian', '63', '60']
[DEBUG|SFFManager.py:44] 2015-12-29 18:39:06,960 > ['Testing']
[DEBUG|SFFManager.py:44] 2015-12-29 18:39:06,961 > ['Testing', '39']
[DEBUG|SFFManager.py:44] 2015-12-29 18:39:06,961 > ['Testing', '39', '36']
[DEBUG|SFFManager.py:45] 2015-12-29 18:39:06,961 > ['Testing', '39', '36']
[DEBUG|SFFManager.py:48] 2015-12-29 18:39:06,961 > [['Endian', '63', '60'], ['Testing', '39', '36']]
[INFO|SFFManager.py:54] 2015-12-29 18:39:06,961 > Create a service function forwarder
[INFO|SFFManager.py:104] 2015-12-29 18:39:06,961 > validate entry
[DEBUG|SFFManager.py:107] 2015-12-29 18:39:06,961 > SFF name is OK
[DEBUG|SFFManager.py:113] 2015-12-29 18:39:06,962 > SFF type is OK
[DEBUG|SFFManager.py:119] 2015-12-29 18:39:06,962 > SFF dpid is OK(00:00:ee:42:21:d6:e1:44)
[DEBUG|SFFManager.py:127] 2015-12-29 18:39:06,962 > connected_sf's name is OK (Testing)
[DEBUG|SFFManager.py:133] 2015-12-29 18:39:06,962 > connected_sf's ingress_port is OK (39)
[DEBUG|SFFManager.py:139] 2015-12-29 18:39:06,962 > connected_sf's egress_port is OK (36)
[DEBUG|SFFManager.py:127] 2015-12-29 18:39:06,962 > connected_sf's name is OK (Endian)
[DEBUG|SFFManager.py:133] 2015-12-29 18:39:06,962 > connected_sf's ingress_port is OK (63)
[DEBUG|SFFManager.py:139] 2015-12-29 18:39:06,962 > connected_sf's egress_port is OK (60)
[DEBUG|SFFManager.py:99] 2015-12-29 18:39:06,964 > {'_id': ObjectId('568343ca1d41c89980bb5760'), 'connected_sf': {'Testing': {'egress_port': '36', 'name': 'Testing', 'ingress_port': '39'}, 'Endian': {'egress_port': '60', 'name': 'Endian', 'ingress_port': '63'}}, 'type': 'general', 'name': 'one-box-br-int', 'dpid': '00:00:ee:42:21:d6:e1:44'}
[INFO|SFFManager.py:100] 2015-12-29 18:39:06,965 > The service function creation is completed
[INFO|SFCManager.py:575] 2015-12-29 18:39:19,470 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 18:39:19,471 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-29 18:39:19,473 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 18:39:19,473 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 18:39:19,474 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 18:39:19,475 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 18:39:19,477 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 18:39:19,481 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-29 18:39:19,484 > load ns entry (bypass)
[DEBUG|SFCManager.py:701] 2015-12-29 18:39:19,485 > load tenant entry (bypass)
[INFO|SFCManager.py:575] 2015-12-29 18:39:23,267 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 18:39:23,268 > load ns entry (Testing)
[INFO|SFCManager.py:602] 2015-12-29 18:39:23,270 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 18:39:23,270 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 18:39:23,271 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 18:39:23,272 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 18:39:23,274 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 18:39:23,278 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 39,
            "shortPortNumber": 39
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-29 18:39:23,279 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 18:39:23,279 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/36/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 18:39:23,282 > [
    {
        "port": {
            "length": 4,
            "portNumber": 36,
            "shortPortNumber": 36
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-29 18:39:23,284 > load ns entry (Testing)
[DEBUG|SFCManager.py:701] 2015-12-29 18:39:23,285 > load tenant entry (Testing)
[INFO|SFCManager.py:575] 2015-12-29 18:39:28,013 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 18:39:28,014 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-29 18:39:28,017 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 18:39:28,018 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 18:39:28,019 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 18:39:28,023 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 18:39:28,025 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 18:39:28,030 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 63,
            "shortPortNumber": 63
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-29 18:39:28,030 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 18:39:28,031 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/60/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 18:39:28,033 > [
    {
        "port": {
            "length": 4,
            "portNumber": 60,
            "shortPortNumber": 60
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-29 18:39:28,035 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-29 18:39:28,037 > load tenant entry (Endian)
[INFO|SFCManager.py:575] 2015-12-29 18:39:32,399 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 18:39:32,400 > load ns entry (All)
[INFO|SFCManager.py:602] 2015-12-29 18:39:32,402 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 18:39:32,402 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 18:39:32,403 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 18:39:32,405 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 18:39:32,407 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 18:39:32,413 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 39,
            "shortPortNumber": 39
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-29 18:39:32,414 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 18:39:32,415 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/36/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 18:39:32,417 > [
    {
        "port": {
            "length": 4,
            "portNumber": 36,
            "shortPortNumber": 36
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 63,
            "shortPortNumber": 63
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-29 18:39:32,418 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 18:39:32,418 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/60/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 18:39:32,420 > [
    {
        "port": {
            "length": 4,
            "portNumber": 60,
            "shortPortNumber": 60
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-29 18:39:32,424 > load ns entry (All)
[DEBUG|SFCManager.py:701] 2015-12-29 18:39:32,426 > load tenant entry (All)
[INFO|SFCManager.py:575] 2015-12-29 18:42:36,028 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 18:42:36,028 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-29 18:42:36,030 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 18:42:36,030 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 18:42:36,031 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 18:42:36,033 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 18:42:36,037 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 18:42:36,043 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-29 18:42:36,046 > load ns entry (bypass)
[DEBUG|SFCManager.py:701] 2015-12-29 18:42:36,047 > load tenant entry (bypass)
[INFO|SFCManager.py:575] 2015-12-29 18:42:42,651 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 18:42:42,652 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-29 18:42:42,654 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 18:42:42,654 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 18:42:42,654 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 18:42:42,657 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 18:42:42,658 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 18:42:42,663 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 63,
            "shortPortNumber": 63
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-29 18:42:42,663 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 18:42:42,664 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/60/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 18:42:42,667 > [
    {
        "port": {
            "length": 4,
            "portNumber": 60,
            "shortPortNumber": 60
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-29 18:42:42,669 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-29 18:42:42,670 > load tenant entry (Endian)
[INFO|SFCManager.py:575] 2015-12-29 18:43:06,337 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 18:43:06,338 > load ns entry (Testing)
[INFO|SFCManager.py:602] 2015-12-29 18:43:06,339 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 18:43:06,339 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 18:43:06,340 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 18:43:06,342 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 18:43:06,344 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 18:43:06,348 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 39,
            "shortPortNumber": 39
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-29 18:43:06,348 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 18:43:06,349 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/36/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 18:43:06,351 > [
    {
        "port": {
            "length": 4,
            "portNumber": 36,
            "shortPortNumber": 36
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-29 18:43:06,354 > load ns entry (Testing)
[DEBUG|SFCManager.py:701] 2015-12-29 18:43:06,355 > load tenant entry (Testing)
[INFO|SFCManager.py:575] 2015-12-29 18:43:30,578 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 18:43:30,579 > load ns entry (All)
[INFO|SFCManager.py:602] 2015-12-29 18:43:30,580 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 18:43:30,581 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 18:43:30,581 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 18:43:30,584 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 18:43:30,586 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 18:43:30,590 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 39,
            "shortPortNumber": 39
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-29 18:43:30,591 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 18:43:30,592 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/36/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 18:43:30,594 > [
    {
        "port": {
            "length": 4,
            "portNumber": 36,
            "shortPortNumber": 36
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 63,
            "shortPortNumber": 63
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-29 18:43:30,594 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 18:43:30,594 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/60/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 18:43:30,597 > [
    {
        "port": {
            "length": 4,
            "portNumber": 60,
            "shortPortNumber": 60
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-29 18:43:30,599 > load ns entry (All)
[DEBUG|SFCManager.py:701] 2015-12-29 18:43:30,600 > load tenant entry (All)
[INFO|SFCManager.py:575] 2015-12-29 18:43:53,658 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 18:43:53,659 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-29 18:43:53,661 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 18:43:53,661 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 18:43:53,662 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 18:43:53,663 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 18:43:53,664 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 18:43:53,667 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 9,
            "shortPortNumber": 9
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 3,
            "shortPortNumber": 3
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-29 18:43:53,671 > load ns entry (bypass)
[DEBUG|SFCManager.py:701] 2015-12-29 18:43:53,673 > load tenant entry (bypass)
[INFO|OpenflowHandler.py:131] 2015-12-29 20:11:04,975 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 20:11:04,977 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 20:11:04,980 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-29 20:11:04,980 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 20:11:04,980 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 20:11:04,982 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-29 20:11:04,983 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 20:11:04,983 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 20:11:04,986 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-29 22:25:13,874 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:25:13,877 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:25:13,985 > {}
[INFO|OpenflowHandler.py:131] 2015-12-29 22:25:13,985 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:25:13,985 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:25:13,996 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-29 22:25:13,997 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:25:13,997 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:25:14,018 > {}
[INFO|SFCManager.py:575] 2015-12-29 22:25:20,008 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 22:25:20,009 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-29 22:25:20,011 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 22:25:20,011 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 22:25:20,012 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 22:25:20,013 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:25:20,015 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:25:20,058 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 5,
            "shortPortNumber": 5
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 73,
            "shortPortNumber": 73
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 63,
            "shortPortNumber": 63
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-29 22:25:20,059 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:25:20,060 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/60/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:25:20,076 > [
    {
        "port": {
            "length": 4,
            "portNumber": 60,
            "shortPortNumber": 60
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 72,
            "shortPortNumber": 72
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 6,
            "shortPortNumber": 6
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-29 22:25:20,084 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-29 22:25:20,086 > load tenant entry (Endian)
[INFO|SFCManager.py:575] 2015-12-29 22:25:28,645 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 22:25:28,646 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-29 22:25:28,648 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 22:25:28,648 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 22:25:28,649 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 22:25:28,651 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:25:28,653 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:25:28,663 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 5,
            "shortPortNumber": 5
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 73,
            "shortPortNumber": 73
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 63,
            "shortPortNumber": 63
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-29 22:25:28,664 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:25:28,664 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/60/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:25:28,675 > [
    {
        "port": {
            "length": 4,
            "portNumber": 60,
            "shortPortNumber": 60
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 72,
            "shortPortNumber": 72
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 6,
            "shortPortNumber": 6
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-29 22:25:28,684 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-29 22:25:28,686 > load tenant entry (Endian)
[INFO|OpenflowHandler.py:95] 2015-12-29 22:25:28,689 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:25:28,690 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:25:28,690 > request_curl_post_data: {"name": "Endian_default_0", "actions": "output=5", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 1}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:25:28,730 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 22:25:28,731 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:25:28,731 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:25:28,731 > request_curl_post_data: {"name": "Endian_default_0_reverse", "actions": "output=1", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 5}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:25:28,742 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 22:25:28,742 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:25:28,743 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:25:28,743 > request_curl_post_data: {"name": "Endian_default_1", "actions": "output=63", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 73}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:25:28,756 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 22:25:28,756 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:25:28,757 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:25:28,757 > request_curl_post_data: {"name": "Endian_default_1_reverse", "actions": "output=73", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 63}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:25:28,763 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 22:25:28,763 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:25:28,764 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:25:28,764 > request_curl_post_data: {"name": "Endian_default_2", "actions": "output=72", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 60}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:25:28,772 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 22:25:28,772 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:25:28,773 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:25:28,774 > request_curl_post_data: {"name": "Endian_default_2_reverse", "actions": "output=60", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 72}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:25:28,788 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 22:25:28,789 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:25:28,789 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:25:28,789 > request_curl_post_data: {"name": "Endian_default_3", "actions": "output=4", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 6}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:25:28,799 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 22:25:28,799 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:25:28,799 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:25:28,799 > request_curl_post_data: {"name": "Endian_default_3_reverse", "actions": "output=6", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 4}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:25:28,809 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-29 22:25:28,810 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:25:28,810 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:25:28,850 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "Endian_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035999249648123",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "6"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_3": {
                "command": "ADD",
                "cookie": "45035997699443048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "6"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "Endian_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035999087137432",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "5"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_0": {
                "command": "ADD",
                "cookie": "45035997699443045",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "5"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "Endian_default_1": {
                "command": "ADD",
                "cookie": "45035997699443046",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "63"
                    }
                },
                "match": {
                    "in_port": "73"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035996332166362",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "60"
                    }
                },
                "match": {
                    "in_port": "72"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2": {
                "command": "ADD",
                "cookie": "45035997699443047",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "72"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035997709651897",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "73"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-29 22:25:55,792 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:25:55,794 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:25:55,799 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "Endian_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035999249648123",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "6"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_3": {
                "command": "ADD",
                "cookie": "45035997699443048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "6"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "Endian_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035999087137432",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "5"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_0": {
                "command": "ADD",
                "cookie": "45035997699443045",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "5"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "Endian_default_1": {
                "command": "ADD",
                "cookie": "45035997699443046",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "63"
                    }
                },
                "match": {
                    "in_port": "73"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035996332166362",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "60"
                    }
                },
                "match": {
                    "in_port": "72"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2": {
                "command": "ADD",
                "cookie": "45035997699443047",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "72"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035997709651897",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "73"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-29 22:25:55,802 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:25:55,802 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:25:55,813 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-29 22:25:55,813 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:25:55,813 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:25:55,820 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|SFCManager.py:575] 2015-12-29 22:26:24,278 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 22:26:24,279 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-29 22:26:24,280 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 22:26:24,281 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 22:26:24,282 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 22:26:24,283 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:26:24,288 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:26:24,298 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 5,
            "shortPortNumber": 5
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 73,
            "shortPortNumber": 73
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 63,
            "shortPortNumber": 63
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-29 22:26:24,299 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:26:24,299 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/60/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:26:24,308 > [
    {
        "port": {
            "length": 4,
            "portNumber": 60,
            "shortPortNumber": 60
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 72,
            "shortPortNumber": 72
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 6,
            "shortPortNumber": 6
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-29 22:26:24,315 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-29 22:26:24,322 > load tenant entry (Endian)
[INFO|OpenflowHandler.py:95] 2015-12-29 22:26:24,325 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:26:24,325 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:26:24,325 > request_curl_post_data: {"name": "Endian_default_0", "actions": "output=5", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 1}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:26:24,332 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 22:26:24,333 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:26:24,333 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:26:24,333 > request_curl_post_data: {"name": "Endian_default_0_reverse", "actions": "output=1", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 5}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:26:24,343 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 22:26:24,344 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:26:24,344 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:26:24,344 > request_curl_post_data: {"name": "Endian_default_1", "actions": "output=63", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 73}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:26:24,351 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 22:26:24,352 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:26:24,352 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:26:24,352 > request_curl_post_data: {"name": "Endian_default_1_reverse", "actions": "output=73", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 63}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:26:24,361 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 22:26:24,361 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:26:24,361 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:26:24,362 > request_curl_post_data: {"name": "Endian_default_2", "actions": "output=72", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 60}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:26:24,366 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 22:26:24,367 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:26:24,367 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:26:24,367 > request_curl_post_data: {"name": "Endian_default_2_reverse", "actions": "output=60", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 72}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:26:24,381 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 22:26:24,381 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:26:24,381 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:26:24,382 > request_curl_post_data: {"name": "Endian_default_3", "actions": "output=4", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 6}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:26:24,387 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 22:26:24,388 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:26:24,388 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:26:24,389 > request_curl_post_data: {"name": "Endian_default_3_reverse", "actions": "output=6", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 4}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:26:24,398 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-29 22:26:24,398 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:26:24,398 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:26:24,403 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "Endian_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035999249648123",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "6"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_3": {
                "command": "ADD",
                "cookie": "45035997699443048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "6"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "Endian_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035999087137432",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "5"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_0": {
                "command": "ADD",
                "cookie": "45035997699443045",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "5"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "Endian_default_1": {
                "command": "ADD",
                "cookie": "45035997699443046",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "63"
                    }
                },
                "match": {
                    "in_port": "73"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035996332166362",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "60"
                    }
                },
                "match": {
                    "in_port": "72"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2": {
                "command": "ADD",
                "cookie": "45035997699443047",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "72"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035997709651897",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "73"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-29 22:27:00,358 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:27:00,359 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:27:00,364 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "Endian_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035999249648123",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "6"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_3": {
                "command": "ADD",
                "cookie": "45035997699443048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "6"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "Endian_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035999087137432",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "5"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_0": {
                "command": "ADD",
                "cookie": "45035997699443045",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "5"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "Endian_default_1": {
                "command": "ADD",
                "cookie": "45035997699443046",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "63"
                    }
                },
                "match": {
                    "in_port": "73"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035996332166362",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "60"
                    }
                },
                "match": {
                    "in_port": "72"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2": {
                "command": "ADD",
                "cookie": "45035997699443047",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "72"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035997709651897",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "73"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-29 22:27:00,365 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:27:00,366 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:27:00,375 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-29 22:27:00,375 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:27:00,375 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:27:00,382 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|SFCManager.py:575] 2015-12-29 22:27:15,969 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 22:27:15,970 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-29 22:27:15,971 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 22:27:15,971 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 22:27:15,972 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 22:27:15,974 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:27:15,976 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/63/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:27:15,986 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 5,
            "shortPortNumber": 5
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 73,
            "shortPortNumber": 73
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 63,
            "shortPortNumber": 63
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-29 22:27:15,987 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:27:15,987 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/60/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:27:15,995 > [
    {
        "port": {
            "length": 4,
            "portNumber": 60,
            "shortPortNumber": 60
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 72,
            "shortPortNumber": 72
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 6,
            "shortPortNumber": 6
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-29 22:27:15,998 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-29 22:27:16,001 > load tenant entry (Endian)
[INFO|OpenflowHandler.py:95] 2015-12-29 22:27:16,011 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:27:16,011 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:27:16,012 > request_curl_post_data: {"name": "Endian_default_0", "actions": "output=5", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 1}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:27:16,017 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 22:27:16,017 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:27:16,017 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:27:16,017 > request_curl_post_data: {"name": "Endian_default_0_reverse", "actions": "output=1", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 5}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:27:16,024 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 22:27:16,024 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:27:16,024 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:27:16,024 > request_curl_post_data: {"name": "Endian_default_1", "actions": "output=63", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 73}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:27:16,035 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 22:27:16,036 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:27:16,036 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:27:16,036 > request_curl_post_data: {"name": "Endian_default_1_reverse", "actions": "output=73", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 63}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:27:16,045 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 22:27:16,046 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:27:16,047 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:27:16,047 > request_curl_post_data: {"name": "Endian_default_2", "actions": "output=72", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 60}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:27:16,054 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 22:27:16,054 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:27:16,055 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:27:16,055 > request_curl_post_data: {"name": "Endian_default_2_reverse", "actions": "output=60", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 72}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:27:16,061 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 22:27:16,061 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:27:16,061 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:27:16,061 > request_curl_post_data: {"name": "Endian_default_3", "actions": "output=4", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 6}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:27:16,068 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 22:27:16,068 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:27:16,069 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:27:16,069 > request_curl_post_data: {"name": "Endian_default_3_reverse", "actions": "output=6", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 4}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:27:16,086 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-29 22:27:16,086 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:27:16,087 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:27:16,099 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "Endian_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035999249648123",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "6"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_3": {
                "command": "ADD",
                "cookie": "45035997699443048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "6"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "Endian_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035999087137432",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "5"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_0": {
                "command": "ADD",
                "cookie": "45035997699443045",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "5"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "Endian_default_1": {
                "command": "ADD",
                "cookie": "45035997699443046",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "63"
                    }
                },
                "match": {
                    "in_port": "73"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035996332166362",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "60"
                    }
                },
                "match": {
                    "in_port": "72"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2": {
                "command": "ADD",
                "cookie": "45035997699443047",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "72"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035997709651897",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "73"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-29 22:27:58,943 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:27:58,945 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:27:58,949 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "Endian_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035999249648123",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "6"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_3": {
                "command": "ADD",
                "cookie": "45035997699443048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "6"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "Endian_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035999087137432",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "5"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_0": {
                "command": "ADD",
                "cookie": "45035997699443045",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "5"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "Endian_default_1": {
                "command": "ADD",
                "cookie": "45035997699443046",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "63"
                    }
                },
                "match": {
                    "in_port": "73"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035996332166362",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "60"
                    }
                },
                "match": {
                    "in_port": "72"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2": {
                "command": "ADD",
                "cookie": "45035997699443047",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "72"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035997709651897",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "73"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-29 22:27:58,951 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:27:58,951 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:27:58,964 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-29 22:27:58,965 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:27:58,965 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:27:58,973 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-29 22:43:58,639 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:43:58,640 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:43:58,645 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-29 22:43:58,645 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:43:58,645 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:43:58,649 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-29 22:43:58,649 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:43:58,650 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:43:58,657 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|SFFManager.py:189] 2015-12-29 22:49:14,261 > delete the service function entrie
[INFO|SFFManager.py:196] 2015-12-29 22:49:14,263 > 1 service entries are deleted
[DEBUG|SFFManager.py:35] 2015-12-29 22:49:52,173 > args ['create-sff', 'Endian', '39', '36', 'Testing', '63', '60']
[DEBUG|SFFManager.py:44] 2015-12-29 22:49:52,173 > ['Endian']
[DEBUG|SFFManager.py:44] 2015-12-29 22:49:52,173 > ['Endian', '39']
[DEBUG|SFFManager.py:44] 2015-12-29 22:49:52,173 > ['Endian', '39', '36']
[DEBUG|SFFManager.py:45] 2015-12-29 22:49:52,173 > ['Endian', '39', '36']
[DEBUG|SFFManager.py:44] 2015-12-29 22:49:52,173 > ['Testing']
[DEBUG|SFFManager.py:44] 2015-12-29 22:49:52,174 > ['Testing', '63']
[DEBUG|SFFManager.py:44] 2015-12-29 22:49:52,174 > ['Testing', '63', '60']
[DEBUG|SFFManager.py:45] 2015-12-29 22:49:52,174 > ['Testing', '63', '60']
[DEBUG|SFFManager.py:48] 2015-12-29 22:49:52,174 > [['Endian', '39', '36'], ['Testing', '63', '60']]
[INFO|SFFManager.py:54] 2015-12-29 22:49:52,174 > Create a service function forwarder
[INFO|SFFManager.py:104] 2015-12-29 22:49:52,174 > validate entry
[DEBUG|SFFManager.py:107] 2015-12-29 22:49:52,174 > SFF name is OK
[DEBUG|SFFManager.py:113] 2015-12-29 22:49:52,175 > SFF type is OK
[DEBUG|SFFManager.py:119] 2015-12-29 22:49:52,175 > SFF dpid is OK(00:00:ee:42:21:d6:e1:44)
[DEBUG|SFFManager.py:127] 2015-12-29 22:49:52,175 > connected_sf's name is OK (Testing)
[DEBUG|SFFManager.py:133] 2015-12-29 22:49:52,175 > connected_sf's ingress_port is OK (63)
[DEBUG|SFFManager.py:139] 2015-12-29 22:49:52,175 > connected_sf's egress_port is OK (60)
[DEBUG|SFFManager.py:127] 2015-12-29 22:49:52,175 > connected_sf's name is OK (Endian)
[DEBUG|SFFManager.py:133] 2015-12-29 22:49:52,175 > connected_sf's ingress_port is OK (39)
[DEBUG|SFFManager.py:139] 2015-12-29 22:49:52,175 > connected_sf's egress_port is OK (36)
[DEBUG|SFFManager.py:99] 2015-12-29 22:49:52,177 > {'_id': ObjectId('56837e901d41c8b55b1417bb'), 'connected_sf': {'Testing': {'egress_port': '60', 'name': 'Testing', 'ingress_port': '63'}, 'Endian': {'egress_port': '36', 'name': 'Endian', 'ingress_port': '39'}}, 'type': 'general', 'name': 'one-box-br-int', 'dpid': '00:00:ee:42:21:d6:e1:44'}
[INFO|SFFManager.py:100] 2015-12-29 22:49:52,178 > The service function creation is completed
[INFO|SFCManager.py:575] 2015-12-29 22:50:06,474 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 22:50:06,475 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-29 22:50:06,479 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 22:50:06,480 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 22:50:06,480 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 22:50:06,482 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:50:06,487 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[CRITICAL|OpenflowHandler.py:142] 2015-12-29 22:50:06,488 > couldn't connect to host
[ERROR|SFCManager.py:653] 2015-12-29 22:50:06,488 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 22:50:06,489 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-29 22:50:06,491 > load tenant entry (Endian)
[INFO|SFCManager.py:575] 2015-12-29 22:50:08,623 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 22:50:08,624 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-29 22:50:08,626 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 22:50:08,626 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 22:50:08,627 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 22:50:08,629 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:50:08,630 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[CRITICAL|OpenflowHandler.py:142] 2015-12-29 22:50:08,631 > couldn't connect to host
[ERROR|SFCManager.py:653] 2015-12-29 22:50:08,631 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 22:50:08,632 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-29 22:50:08,635 > load tenant entry (Endian)
[INFO|SFCManager.py:575] 2015-12-29 22:52:08,475 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 22:52:08,476 > load ns entry (bypass)
[INFO|SFCManager.py:602] 2015-12-29 22:52:08,478 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 22:52:08,478 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 22:52:08,478 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 22:52:08,479 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:52:08,481 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:52:08,597 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 7,
            "shortPortNumber": 7
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 83,
            "shortPortNumber": 83
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 82,
            "shortPortNumber": 82
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-29 22:52:08,600 > load ns entry (bypass)
[DEBUG|SFCManager.py:701] 2015-12-29 22:52:08,602 > load tenant entry (bypass)
[INFO|OpenflowHandler.py:95] 2015-12-29 22:52:08,605 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:52:08,605 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:52:08,605 > request_curl_post_data: {"name": "bypass_default_0", "actions": "output=7", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 1}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:52:08,667 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 22:52:08,668 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:52:08,668 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:52:08,668 > request_curl_post_data: {"name": "bypass_default_0_reverse", "actions": "output=1", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 7}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:52:08,697 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 22:52:08,698 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:52:08,698 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:52:08,698 > request_curl_post_data: {"name": "bypass_default_1", "actions": "output=82", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 83}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:52:08,728 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 22:52:08,728 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:52:08,728 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:52:08,728 > request_curl_post_data: {"name": "bypass_default_1_reverse", "actions": "output=83", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 82}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:52:08,740 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 22:52:08,741 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:52:08,741 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:52:08,741 > request_curl_post_data: {"name": "bypass_default_2", "actions": "output=4", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 8}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:52:08,763 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 22:52:08,763 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:52:08,763 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:52:08,764 > request_curl_post_data: {"name": "bypass_default_2_reverse", "actions": "output=8", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 4}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:52:08,781 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-29 22:52:08,781 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:52:08,782 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:52:08,822 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "bypass_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035999402694763",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_2": {
                "command": "ADD",
                "cookie": "45035996931004888",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "bypass_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035997862698537",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_0": {
                "command": "ADD",
                "cookie": "45035996931004886",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "7"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "bypass_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035996485213002",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "83"
                    }
                },
                "match": {
                    "in_port": "82"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_1": {
                "command": "ADD",
                "cookie": "45035996931004887",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "82"
                    }
                },
                "match": {
                    "in_port": "83"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|SFCManager.py:575] 2015-12-29 22:54:26,914 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 22:54:26,915 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-29 22:54:26,917 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 22:54:26,917 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 22:54:26,918 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 22:54:26,920 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:54:26,922 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 22:54:26,935 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-29 22:54:26,935 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 22:54:26,938 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-29 22:54:26,940 > load tenant entry (Endian)
[INFO|SFCManager.py:575] 2015-12-29 22:54:28,159 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 22:54:28,160 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-29 22:54:28,162 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 22:54:28,162 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 22:54:28,162 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 22:54:28,164 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:54:28,167 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 22:54:28,180 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-29 22:54:28,180 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 22:54:28,182 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-29 22:54:28,184 > load tenant entry (Endian)
[INFO|OpenflowHandler.py:131] 2015-12-29 22:54:34,042 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:54:34,044 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:54:34,054 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "bypass_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035999402694763",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_2": {
                "command": "ADD",
                "cookie": "45035996931004888",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "bypass_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035997862698537",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_0": {
                "command": "ADD",
                "cookie": "45035996931004886",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "7"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "bypass_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035996485213002",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "83"
                    }
                },
                "match": {
                    "in_port": "82"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "bypass_default_1": {
                "command": "ADD",
                "cookie": "45035996931004887",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "82"
                    }
                },
                "match": {
                    "in_port": "83"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-29 22:54:34,055 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:54:34,056 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:54:34,075 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-29 22:54:34,076 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:54:34,077 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:54:34,094 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|SFCManager.py:575] 2015-12-29 22:54:36,033 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 22:54:36,034 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-29 22:54:36,036 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 22:54:36,036 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 22:54:36,037 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 22:54:36,039 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:54:36,041 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 22:54:36,058 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-29 22:54:36,059 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 22:54:36,061 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-29 22:54:36,065 > load tenant entry (Endian)
[INFO|SFCManager.py:575] 2015-12-29 22:54:39,187 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 22:54:39,188 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-29 22:54:39,189 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 22:54:39,190 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 22:54:39,190 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 22:54:39,192 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:54:39,194 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 22:54:39,206 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-29 22:54:39,207 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 22:54:39,208 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-29 22:54:39,209 > load tenant entry (Endian)
[INFO|SFCManager.py:575] 2015-12-29 22:54:41,371 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 22:54:41,372 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-29 22:54:41,373 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 22:54:41,374 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 22:54:41,374 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 22:54:41,376 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:54:41,378 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 22:54:41,389 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-29 22:54:41,390 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 22:54:41,391 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-29 22:54:41,393 > load tenant entry (Endian)
[INFO|SFCManager.py:575] 2015-12-29 22:54:42,712 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 22:54:42,713 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-29 22:54:42,714 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 22:54:42,715 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 22:54:42,715 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 22:54:42,717 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:54:42,719 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-29 22:54:42,730 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-29 22:54:42,731 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-29 22:54:42,732 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-29 22:54:42,734 > load tenant entry (Endian)
[INFO|SFCManager.py:575] 2015-12-29 22:54:57,290 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-29 22:54:57,290 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-29 22:54:57,292 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-29 22:54:57,292 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-29 22:54:57,293 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-29 22:54:57,300 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:54:57,301 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:54:57,324 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 7,
            "shortPortNumber": 7
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 83,
            "shortPortNumber": 83
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 39,
            "shortPortNumber": 39
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-29 22:54:57,328 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:54:57,329 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/36/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:54:57,352 > [
    {
        "port": {
            "length": 4,
            "portNumber": 36,
            "shortPortNumber": 36
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 82,
            "shortPortNumber": 82
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-29 22:54:57,354 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-29 22:54:57,355 > load tenant entry (Endian)
[INFO|OpenflowHandler.py:95] 2015-12-29 22:54:57,360 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:54:57,360 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:54:57,360 > request_curl_post_data: {"name": "Endian_default_0", "actions": "output=7", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 1}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:54:57,378 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 22:54:57,379 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:54:57,379 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:54:57,379 > request_curl_post_data: {"name": "Endian_default_0_reverse", "actions": "output=1", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 7}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:54:57,391 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 22:54:57,392 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:54:57,392 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:54:57,392 > request_curl_post_data: {"name": "Endian_default_1", "actions": "output=39", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 83}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:54:57,409 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 22:54:57,409 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:54:57,409 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:54:57,409 > request_curl_post_data: {"name": "Endian_default_1_reverse", "actions": "output=83", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 39}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:54:57,422 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 22:54:57,422 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:54:57,423 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:54:57,423 > request_curl_post_data: {"name": "Endian_default_2", "actions": "output=82", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 36}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:54:57,446 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 22:54:57,446 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:54:57,447 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:54:57,447 > request_curl_post_data: {"name": "Endian_default_2_reverse", "actions": "output=36", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 82}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:54:57,466 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 22:54:57,470 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:54:57,470 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:54:57,471 > request_curl_post_data: {"name": "Endian_default_3", "actions": "output=4", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 8}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:54:57,488 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-29 22:54:57,489 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-29 22:54:57,489 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-29 22:54:57,489 > request_curl_post_data: {"name": "Endian_default_3_reverse", "actions": "output=8", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 4}
[DEBUG|OpenflowHandler.py:126] 2015-12-29 22:54:57,508 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-29 22:54:57,508 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-29 22:54:57,508 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-29 22:54:57,526 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "Endian_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035999249648123",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_3": {
                "command": "ADD",
                "cookie": "45035997699443048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "Endian_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035999087137432",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_0": {
                "command": "ADD",
                "cookie": "45035997699443045",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "7"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "Endian_default_1": {
                "command": "ADD",
                "cookie": "45035997699443046",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "39"
                    }
                },
                "match": {
                    "in_port": "83"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035996332166362",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "36"
                    }
                },
                "match": {
                    "in_port": "82"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2": {
                "command": "ADD",
                "cookie": "45035997699443047",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "82"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035997709651897",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "83"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-30 00:23:36,266 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:23:36,267 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 00:23:36,277 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "Endian_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035999249648123",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_3": {
                "command": "ADD",
                "cookie": "45035997699443048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "Endian_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035999087137432",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_0": {
                "command": "ADD",
                "cookie": "45035997699443045",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "7"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "Endian_default_1": {
                "command": "ADD",
                "cookie": "45035997699443046",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "39"
                    }
                },
                "match": {
                    "in_port": "83"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035996332166362",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "36"
                    }
                },
                "match": {
                    "in_port": "82"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2": {
                "command": "ADD",
                "cookie": "45035997699443047",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "82"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035997709651897",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "83"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-30 00:23:36,278 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:23:36,278 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 00:23:36,290 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-30 00:23:36,290 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:23:36,290 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 00:23:36,299 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|SFCManager.py:575] 2015-12-30 00:23:39,311 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 00:23:39,311 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 00:23:39,313 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 00:23:39,313 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 00:23:39,314 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 00:23:39,316 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:23:39,317 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 00:23:39,330 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 7,
            "shortPortNumber": 7
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 83,
            "shortPortNumber": 83
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 39,
            "shortPortNumber": 39
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-30 00:23:39,331 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:23:39,331 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/36/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 00:23:39,348 > [
    {
        "port": {
            "length": 4,
            "portNumber": 36,
            "shortPortNumber": 36
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 82,
            "shortPortNumber": 82
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-30 00:23:39,354 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 00:23:39,357 > load tenant entry (Endian)
[INFO|OpenflowHandler.py:95] 2015-12-30 00:23:39,361 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:23:39,362 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:23:39,362 > request_curl_post_data: {"name": "Endian_default_0", "actions": "output=7", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 1}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:23:39,370 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:23:39,370 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:23:39,370 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:23:39,370 > request_curl_post_data: {"name": "Endian_default_0_reverse", "actions": "output=1", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 7}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:23:39,379 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:23:39,380 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:23:39,380 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:23:39,380 > request_curl_post_data: {"name": "Endian_default_1", "actions": "output=39", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 83}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:23:39,392 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:23:39,393 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:23:39,395 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:23:39,397 > request_curl_post_data: {"name": "Endian_default_1_reverse", "actions": "output=83", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 39}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:23:39,407 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:23:39,408 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:23:39,408 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:23:39,408 > request_curl_post_data: {"name": "Endian_default_2", "actions": "output=82", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 36}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:23:39,416 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:23:39,416 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:23:39,417 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:23:39,417 > request_curl_post_data: {"name": "Endian_default_2_reverse", "actions": "output=36", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 82}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:23:39,433 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:23:39,433 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:23:39,434 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:23:39,434 > request_curl_post_data: {"name": "Endian_default_3", "actions": "output=4", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 8}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:23:39,448 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:23:39,449 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:23:39,449 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:23:39,449 > request_curl_post_data: {"name": "Endian_default_3_reverse", "actions": "output=8", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 4}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:23:39,461 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-30 00:23:39,464 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:23:39,464 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 00:23:39,484 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "Endian_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035999249648123",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_3": {
                "command": "ADD",
                "cookie": "45035997699443048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "Endian_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035999087137432",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_0": {
                "command": "ADD",
                "cookie": "45035997699443045",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "7"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "Endian_default_1": {
                "command": "ADD",
                "cookie": "45035997699443046",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "39"
                    }
                },
                "match": {
                    "in_port": "83"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035996332166362",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "36"
                    }
                },
                "match": {
                    "in_port": "82"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2": {
                "command": "ADD",
                "cookie": "45035997699443047",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "82"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035997709651897",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "83"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-30 00:24:56,300 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:24:56,302 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 00:24:56,309 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "Endian_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035999249648123",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_3": {
                "command": "ADD",
                "cookie": "45035997699443048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "Endian_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035999087137432",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_0": {
                "command": "ADD",
                "cookie": "45035997699443045",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "7"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "Endian_default_1": {
                "command": "ADD",
                "cookie": "45035997699443046",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "39"
                    }
                },
                "match": {
                    "in_port": "83"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035996332166362",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "36"
                    }
                },
                "match": {
                    "in_port": "82"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2": {
                "command": "ADD",
                "cookie": "45035997699443047",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "82"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035997709651897",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "83"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-30 00:24:56,310 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:24:56,310 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 00:24:56,321 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-30 00:24:56,321 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:24:56,321 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 00:24:56,332 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:165] 2015-12-30 00:25:18,084 > get_switch_port
[INFO|OpenflowHandler.py:131] 2015-12-30 00:25:18,084 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:25:18,086 > request_curl_url: http://192.168.17.179:8080/wm/core/switch/all/port/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 00:25:19,198 > {
    "00:00:00:0c:29:7d:49:d8": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "401000000",
                "durationSec": "5983",
                "portNumber": "7",
                "receiveBytes": "1106762",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "26112",
                "transmitBytes": "147653",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "1370"
            },
            {
                "collisions": "0",
                "durationNsec": "630000000",
                "durationSec": "69925",
                "portNumber": "local",
                "receiveBytes": "354547",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "2103",
                "transmitBytes": "2186366",
                "transmitDropped": "10952",
                "transmitErrors": "0",
                "transmitPackets": "32164"
            },
            {
                "collisions": "0",
                "durationNsec": "650000000",
                "durationSec": "18764",
                "portNumber": "3",
                "receiveBytes": "293119083",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "252552",
                "transmitBytes": "7855469",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "103127"
            }
        ],
        "version": "OF_13"
    },
    "00:00:00:0c:29:7d:49:ec": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "950000000",
                "durationSec": "5984",
                "portNumber": "8",
                "receiveBytes": "1333534",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "28870",
                "transmitBytes": "603635",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "6539"
            },
            {
                "collisions": "0",
                "durationNsec": "919000000",
                "durationSec": "55344",
                "portNumber": "4",
                "receiveBytes": "1409946",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "13283",
                "transmitBytes": "140246921",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3302533"
            },
            {
                "collisions": "0",
                "durationNsec": "798000000",
                "durationSec": "69925",
                "portNumber": "local",
                "receiveBytes": "2948220",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "64130",
                "transmitBytes": "139425784",
                "transmitDropped": "1218",
                "transmitErrors": "0",
                "transmitPackets": "3283281"
            }
        ],
        "version": "OF_13"
    },
    "00:00:00:0c:29:7d:49:f6": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "174000000",
                "durationSec": "5984",
                "portNumber": "7",
                "receiveBytes": "1321948",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "28585",
                "transmitBytes": "50045",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "771"
            },
            {
                "collisions": "0",
                "durationNsec": "623000000",
                "durationSec": "69925",
                "portNumber": "local",
                "receiveBytes": "2495330",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58411",
                "transmitBytes": "132510151",
                "transmitDropped": "2728",
                "transmitErrors": "0",
                "transmitPackets": "3134506"
            },
            {
                "collisions": "0",
                "durationNsec": "627000000",
                "durationSec": "69925",
                "portNumber": "1",
                "receiveBytes": "662660",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "7212",
                "transmitBytes": "133399136",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3146455"
            }
        ],
        "version": "OF_13"
    },
    "00:00:4a:72:d4:24:ae:41": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "632000000",
                "durationSec": "5986",
                "portNumber": "6",
                "receiveBytes": "1228037",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "27076",
                "transmitBytes": "24135",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "395"
            },
            {
                "collisions": "0",
                "durationNsec": "636000000",
                "durationSec": "69925",
                "portNumber": "local",
                "receiveBytes": "2470458",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58144",
                "transmitBytes": "138865962",
                "transmitDropped": "84",
                "transmitErrors": "0",
                "transmitPackets": "3281866"
            }
        ],
        "version": "OF_13"
    },
    "00:00:ee:42:21:d6:e1:44": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "994000000",
                "durationSec": "60769",
                "portNumber": "56",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "142317756",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3364911"
            },
            {
                "collisions": "0",
                "durationNsec": "762000000",
                "durationSec": "69925",
                "portNumber": "local",
                "receiveBytes": "2442820",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57764",
                "transmitBytes": "143301964",
                "transmitDropped": "7551",
                "transmitErrors": "0",
                "transmitPackets": "3373644"
            },
            {
                "collisions": "0",
                "durationNsec": "796000000",
                "durationSec": "63313",
                "portNumber": "37",
                "receiveBytes": "2471697",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58044",
                "transmitBytes": "142659947",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3370854"
            },
            {
                "collisions": "0",
                "durationNsec": "859000000",
                "durationSec": "5985",
                "portNumber": "81",
                "receiveBytes": "0",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "0",
                "transmitBytes": "1253300",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "27431"
            },
            {
                "collisions": "0",
                "durationNsec": "767000000",
                "durationSec": "5986",
                "portNumber": "80",
                "receiveBytes": "24135",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "395",
                "transmitBytes": "1227029",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "27052"
            },
            {
                "collisions": "0",
                "durationNsec": "662000000",
                "durationSec": "63314",
                "portNumber": "36",
                "receiveBytes": "74063013",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "1749747",
                "transmitBytes": "74791368",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "1743787"
            },
            {
                "collisions": "0",
                "durationNsec": "720000000",
                "durationSec": "69925",
                "portNumber": "25",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "142189870",
                "transmitDropped": "29",
                "transmitErrors": "0",
                "transmitPackets": "3364037"
            },
            {
                "collisions": "0",
                "durationNsec": "553000000",
                "durationSec": "5983",
                "portNumber": "84",
                "receiveBytes": "147653",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "1370",
                "transmitBytes": "1106804",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "26113"
            },
            {
                "collisions": "0",
                "durationNsec": "302000000",
                "durationSec": "53589",
                "portNumber": "63",
                "receiveBytes": "2455554",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57911",
                "transmitBytes": "142941933",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3376143"
            },
            {
                "collisions": "0",
                "durationNsec": "569000000",
                "durationSec": "53590",
                "portNumber": "62",
                "receiveBytes": "2445045",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57783",
                "transmitBytes": "142562997",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3370066"
            },
            {
                "collisions": "0",
                "durationNsec": "860000000",
                "durationSec": "60756",
                "portNumber": "57",
                "receiveBytes": "7453",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "55",
                "transmitBytes": "142284364",
                "transmitDropped": "1",
                "transmitErrors": "0",
                "transmitPackets": "3365953"
            },
            {
                "collisions": "0",
                "durationNsec": "587000000",
                "durationSec": "60792",
                "portNumber": "54",
                "receiveBytes": "2013",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "17",
                "transmitBytes": "142625499",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3367211"
            },
            {
                "collisions": "0",
                "durationNsec": "872000000",
                "durationSec": "63312",
                "portNumber": "38",
                "receiveBytes": "2468718",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58013",
                "transmitBytes": "142596404",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3370268"
            },
            {
                "collisions": "0",
                "durationNsec": "315000000",
                "durationSec": "5984",
                "portNumber": "83",
                "receiveBytes": "50045",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "771",
                "transmitBytes": "1321990",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "28586"
            },
            {
                "collisions": "0",
                "durationNsec": "515000000",
                "durationSec": "60781",
                "portNumber": "55",
                "receiveBytes": "690",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "9",
                "transmitBytes": "142205618",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3364240"
            },
            {
                "collisions": "0",
                "durationNsec": "75000000",
                "durationSec": "5985",
                "portNumber": "82",
                "receiveBytes": "603635",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "6539",
                "transmitBytes": "1333534",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "28870"
            },
            {
                "collisions": "0",
                "durationNsec": "40000000",
                "durationSec": "63312",
                "portNumber": "39",
                "receiveBytes": "71342353",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "1696993",
                "transmitBytes": "100753825",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "2369475"
            },
            {
                "collisions": "0",
                "durationNsec": "701000000",
                "durationSec": "53587",
                "portNumber": "64",
                "receiveBytes": "2446759",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57801",
                "transmitBytes": "142779705",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3371632"
            },
            {
                "collisions": "0",
                "durationNsec": "796000000",
                "durationSec": "53591",
                "portNumber": "61",
                "receiveBytes": "2446274",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57798",
                "transmitBytes": "142566329",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3370103"
            },
            {
                "collisions": "0",
                "durationNsec": "184000000",
                "durationSec": "63311",
                "portNumber": "40",
                "receiveBytes": "2542276",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "59709",
                "transmitBytes": "143082830",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3373201"
            },
            {
                "collisions": "0",
                "durationNsec": "701000000",
                "durationSec": "53592",
                "portNumber": "60",
                "receiveBytes": "3118593",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "64443",
                "transmitBytes": "143532206",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3383195"
            }
        ],
        "version": "OF_13"
    }
}
[INFO|OpenflowHandler.py:131] 2015-12-30 00:25:19,202 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:25:19,202 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 00:25:19,230 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-30 00:25:19,230 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:25:19,231 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 00:25:19,258 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-30 00:25:19,258 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:25:19,258 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 00:25:19,294 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:25:19,294 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:25:19,294 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:25:19,294 > request_curl_post_data: {"name": "56 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "56"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:25:19,306 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:25:19,306 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:25:19,306 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:25:19,306 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:25:19,367 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:25:19,368 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:25:19,368 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:25:19,369 > request_curl_post_data: {"name": "37 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "37"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:25:19,435 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:25:19,435 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:25:19,436 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:25:19,436 > request_curl_post_data: {"name": "81 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "81"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:25:19,464 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:25:19,465 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:25:19,465 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:25:19,466 > request_curl_post_data: {"name": "80 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "80"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:25:19,509 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:25:19,510 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:25:19,510 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:25:19,510 > request_curl_post_data: {"name": "36 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "36"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:25:19,636 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:25:19,637 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:25:19,637 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:25:19,637 > request_curl_post_data: {"name": "25 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "25"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:25:19,693 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:25:19,694 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:25:19,694 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:25:19,694 > request_curl_post_data: {"name": "84 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "84"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:25:19,720 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:25:19,720 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:25:19,721 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:25:19,721 > request_curl_post_data: {"name": "63 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "63"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:25:19,754 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:25:19,755 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:25:19,755 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:25:19,756 > request_curl_post_data: {"name": "62 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "62"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:25:19,786 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:25:19,787 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:25:19,787 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:25:19,788 > request_curl_post_data: {"name": "57 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "57"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:25:19,812 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:25:19,812 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:25:19,812 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:25:19,812 > request_curl_post_data: {"name": "54 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "54"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:25:19,842 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:25:19,843 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:25:19,843 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:25:19,843 > request_curl_post_data: {"name": "38 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "38"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:25:19,860 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:25:19,860 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:25:19,861 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:25:19,861 > request_curl_post_data: {"name": "83 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "83"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:25:19,885 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:25:19,886 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:25:19,886 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:25:19,887 > request_curl_post_data: {"name": "55 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "55"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:25:19,912 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:25:19,912 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:25:19,913 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:25:19,913 > request_curl_post_data: {"name": "82 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "82"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:25:19,944 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:25:19,944 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:25:19,945 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:25:19,945 > request_curl_post_data: {"name": "39 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "39"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:25:19,977 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:25:19,985 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:25:19,985 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:25:19,985 > request_curl_post_data: {"name": "64 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "64"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:25:20,004 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:25:20,005 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:25:20,005 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:25:20,005 > request_curl_post_data: {"name": "61 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "61"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:25:20,020 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:25:20,022 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:25:20,023 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:25:20,024 > request_curl_post_data: {"name": "40 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "40"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:25:20,038 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:25:20,038 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:25:20,039 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:25:20,039 > request_curl_post_data: {"name": "60 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "60"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:25:20,066 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:25:20,066 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:25:20,066 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:25:20,066 > request_curl_post_data: {"name": "8 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "8"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:25:20,077 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:25:20,077 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:25:20,078 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:25:20,080 > request_curl_post_data: {"name": "4 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "4"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:25:20,104 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:25:20,106 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:25:20,107 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:25:20,107 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:25:20,122 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:25:20,122 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:25:20,123 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:25:20,123 > request_curl_post_data: {"name": "6 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "6"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:25:20,140 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:25:20,142 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:25:20,142 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:25:20,143 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:25:20,158 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:25:20,160 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:25:20,160 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:25:20,160 > request_curl_post_data: {"name": "7 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:d8", "cookie": "0", "active": "true", "in_port": "7"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:25:20,173 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:25:20,173 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:25:20,173 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:25:20,173 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:d8", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:25:20,189 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:25:20,189 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:25:20,190 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:25:20,192 > request_curl_post_data: {"name": "3 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:d8", "cookie": "0", "active": "true", "in_port": "3"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:25:20,212 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:25:20,212 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:25:20,212 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:25:20,213 > request_curl_post_data: {"name": "7 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "7"}
[INFO|OpenflowHandler.py:165] 2015-12-30 00:28:38,908 > get_switch_port
[INFO|OpenflowHandler.py:131] 2015-12-30 00:28:38,908 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:28:38,909 > request_curl_url: http://192.168.17.179:8080/wm/core/switch/all/port/json
[CRITICAL|OpenflowHandler.py:142] 2015-12-30 00:28:41,909 > couldn't connect to host
[INFO|OpenflowHandler.py:131] 2015-12-30 00:28:41,909 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:28:41,910 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[CRITICAL|OpenflowHandler.py:142] 2015-12-30 00:28:44,909 > couldn't connect to host
[INFO|OpenflowHandler.py:131] 2015-12-30 00:28:44,910 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:28:44,910 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[CRITICAL|OpenflowHandler.py:142] 2015-12-30 00:28:47,909 > couldn't connect to host
[INFO|OpenflowHandler.py:131] 2015-12-30 00:28:47,909 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:28:47,909 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[INFO|OpenflowHandler.py:131] 2015-12-30 00:28:52,547 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:28:52,549 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[CRITICAL|OpenflowHandler.py:142] 2015-12-30 00:28:53,909 > couldn't connect to host
[INFO|OpenflowHandler.py:131] 2015-12-30 00:28:53,909 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:28:53,909 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[CRITICAL|OpenflowHandler.py:142] 2015-12-30 00:28:56,909 > couldn't connect to host
[INFO|OpenflowHandler.py:131] 2015-12-30 00:28:56,909 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:28:56,909 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[CRITICAL|OpenflowHandler.py:142] 2015-12-30 00:28:59,909 > couldn't connect to host
[INFO|OpenflowHandler.py:131] 2015-12-30 00:29:42,615 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:29:42,616 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 00:29:42,623 > {
    "00:00:00:0c:29:7d:49:d8": [
        {
            "7 port drop rule": {
                "command": "ADD",
                "cookie": "45035997933552954",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "3 port drop rule": {
                "command": "ADD",
                "cookie": "45035997402522830",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "3"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:ec": [
        {
            "4 port drop rule": {
                "command": "ADD",
                "cookie": "45035999682764009",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "8 port drop rule": {
                "command": "ADD",
                "cookie": "45036000213794133",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [
        {
            "6 port drop rule": {
                "command": "ADD",
                "cookie": "45035999948279071",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "6"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "54 port drop rule": {
                "command": "ADD",
                "cookie": "45035999813688220",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "54"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "39 port drop rule": {
                "command": "ADD",
                "cookie": "45035998140888993",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "55 port drop rule": {
                "command": "ADD",
                "cookie": "45035997798962103",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "55"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "62 port drop rule": {
                "command": "ADD",
                "cookie": "45035999642724775",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "62"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "37 port drop rule": {
                "command": "ADD",
                "cookie": "45035997875373931",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "37"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "25 port drop rule": {
                "command": "ADD",
                "cookie": "45035997515307252",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "25"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "63 port drop rule": {
                "command": "ADD",
                "cookie": "45035997627998658",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "40 port drop rule": {
                "command": "ADD",
                "cookie": "45035999188106479",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "40"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "38 port drop rule": {
                "command": "ADD",
                "cookie": "45036000155615110",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "38"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "80 port drop rule": {
                "command": "ADD",
                "cookie": "45035999566312947",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "80"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "84 port drop rule": {
                "command": "ADD",
                "cookie": "45036000097343071",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "84"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "81 port drop rule": {
                "command": "ADD",
                "cookie": "45035997551586830",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "81"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "82 port drop rule": {
                "command": "ADD",
                "cookie": "45035999831828009",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "82"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "36 port drop rule": {
                "command": "ADD",
                "cookie": "45035999890100048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "61 port drop rule": {
                "command": "ADD",
                "cookie": "45035997362483596",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "61"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "60 port drop rule": {
                "command": "ADD",
                "cookie": "45035999377209713",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "64 port drop rule": {
                "command": "ADD",
                "cookie": "45035999908239837",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "64"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "56 port drop rule": {
                "command": "ADD",
                "cookie": "45036000079203282",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "56"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "57 port drop rule": {
                "command": "ADD",
                "cookie": "45035998064477165",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "57"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "83 port drop rule": {
                "command": "ADD",
                "cookie": "45035997817101892",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "83"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-30 00:29:42,626 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:29:42,626 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 00:29:42,638 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-30 00:29:42,638 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:29:42,639 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 00:29:42,644 > {
    "00:00:00:0c:29:7d:49:d8": [],
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|SFCManager.py:575] 2015-12-30 00:29:47,017 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 00:29:47,018 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 00:29:47,021 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 00:29:47,021 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 00:29:47,022 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 00:29:47,029 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:29:47,034 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-30 00:29:47,042 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-30 00:29:47,043 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-30 00:29:47,044 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 00:29:47,046 > load tenant entry (Endian)
[INFO|OpenflowHandler.py:131] 2015-12-30 00:29:49,368 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:29:49,369 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 00:29:49,385 > {
    "00:00:00:0c:29:7d:49:d8": [],
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-30 00:29:49,385 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:29:49,386 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 00:29:49,397 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-30 00:29:49,398 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:29:49,398 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 00:29:49,402 > {
    "00:00:00:0c:29:7d:49:d8": [],
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|SFCManager.py:575] 2015-12-30 00:29:51,387 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 00:29:51,388 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 00:29:51,393 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 00:29:51,394 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 00:29:51,394 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 00:29:51,397 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:29:51,402 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-30 00:29:51,408 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-30 00:29:51,409 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-30 00:29:51,410 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 00:29:51,413 > load tenant entry (Endian)
[INFO|OpenflowHandler.py:165] 2015-12-30 00:29:56,427 > get_switch_port
[INFO|OpenflowHandler.py:131] 2015-12-30 00:29:56,427 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:29:56,429 > request_curl_url: http://192.168.17.179:8080/wm/core/switch/all/port/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 00:29:57,444 > {
    "00:00:00:0c:29:7d:49:ec": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "205000000",
                "durationSec": "6263",
                "portNumber": "8",
                "receiveBytes": "2151072",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "43794",
                "transmitBytes": "608882",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "6606"
            },
            {
                "collisions": "0",
                "durationNsec": "174000000",
                "durationSec": "55623",
                "portNumber": "4",
                "receiveBytes": "1428950",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "13582",
                "transmitBytes": "141066567",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3317507"
            },
            {
                "collisions": "0",
                "durationNsec": "52000000",
                "durationSec": "70204",
                "portNumber": "local",
                "receiveBytes": "2948262",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "64131",
                "transmitBytes": "140164396",
                "transmitDropped": "1218",
                "transmitErrors": "0",
                "transmitPackets": "3296346"
            }
        ],
        "version": "OF_13"
    },
    "00:00:00:0c:29:7d:49:f6": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "430000000",
                "durationSec": "6262",
                "portNumber": "7",
                "receiveBytes": "2061719",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "41669",
                "transmitBytes": "51246",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "791"
            },
            {
                "collisions": "0",
                "durationNsec": "879000000",
                "durationSec": "70203",
                "portNumber": "local",
                "receiveBytes": "2495372",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58412",
                "transmitBytes": "132810403",
                "transmitDropped": "2728",
                "transmitErrors": "0",
                "transmitPackets": "3140265"
            },
            {
                "collisions": "0",
                "durationNsec": "883000000",
                "durationSec": "70203",
                "portNumber": "1",
                "receiveBytes": "662660",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "7212",
                "transmitBytes": "133701858",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3152252"
            }
        ],
        "version": "OF_13"
    },
    "00:00:4a:72:d4:24:ae:41": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "879000000",
                "durationSec": "6264",
                "portNumber": "6",
                "receiveBytes": "1968000",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "40153",
                "transmitBytes": "26639",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "434"
            },
            {
                "collisions": "0",
                "durationNsec": "883000000",
                "durationSec": "70203",
                "portNumber": "local",
                "receiveBytes": "2470500",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58145",
                "transmitBytes": "139604532",
                "transmitDropped": "84",
                "transmitErrors": "0",
                "transmitPackets": "3294930"
            }
        ],
        "version": "OF_13"
    },
    "00:00:ee:42:21:d6:e1:44": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "245000000",
                "durationSec": "61048",
                "portNumber": "56",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "143056266",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3377974"
            },
            {
                "collisions": "0",
                "durationNsec": "13000000",
                "durationSec": "70204",
                "portNumber": "local",
                "receiveBytes": "2442862",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57765",
                "transmitBytes": "144040534",
                "transmitDropped": "7551",
                "transmitErrors": "0",
                "transmitPackets": "3386708"
            },
            {
                "collisions": "0",
                "durationNsec": "47000000",
                "durationSec": "63592",
                "portNumber": "37",
                "receiveBytes": "2471697",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58044",
                "transmitBytes": "143400927",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3383955"
            },
            {
                "collisions": "0",
                "durationNsec": "110000000",
                "durationSec": "6264",
                "portNumber": "81",
                "receiveBytes": "0",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "0",
                "transmitBytes": "1994340",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "40533"
            },
            {
                "collisions": "0",
                "durationNsec": "18000000",
                "durationSec": "6265",
                "portNumber": "80",
                "receiveBytes": "26639",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "434",
                "transmitBytes": "1968000",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "40153"
            },
            {
                "collisions": "0",
                "durationNsec": "913000000",
                "durationSec": "63592",
                "portNumber": "36",
                "receiveBytes": "74516850",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "1758224",
                "transmitBytes": "75308163",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "1753850"
            },
            {
                "collisions": "0",
                "durationNsec": "971000000",
                "durationSec": "70203",
                "portNumber": "25",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "142928380",
                "transmitDropped": "29",
                "transmitErrors": "0",
                "transmitPackets": "3377100"
            },
            {
                "collisions": "0",
                "durationNsec": "804000000",
                "durationSec": "6261",
                "portNumber": "84",
                "receiveBytes": "150367",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "1408",
                "transmitBytes": "1847952",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "39218"
            },
            {
                "collisions": "0",
                "durationNsec": "553000000",
                "durationSec": "53867",
                "portNumber": "63",
                "receiveBytes": "2455554",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57911",
                "transmitBytes": "143682913",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3389244"
            },
            {
                "collisions": "0",
                "durationNsec": "821000000",
                "durationSec": "53868",
                "portNumber": "62",
                "receiveBytes": "2445045",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57783",
                "transmitBytes": "143303977",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3383167"
            },
            {
                "collisions": "0",
                "durationNsec": "112000000",
                "durationSec": "61035",
                "portNumber": "57",
                "receiveBytes": "7453",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "55",
                "transmitBytes": "143022874",
                "transmitDropped": "1",
                "transmitErrors": "0",
                "transmitPackets": "3379016"
            },
            {
                "collisions": "0",
                "durationNsec": "839000000",
                "durationSec": "61070",
                "portNumber": "54",
                "receiveBytes": "2013",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "17",
                "transmitBytes": "143364009",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3380274"
            },
            {
                "collisions": "0",
                "durationNsec": "124000000",
                "durationSec": "63591",
                "portNumber": "38",
                "receiveBytes": "2468718",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58013",
                "transmitBytes": "143337384",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3383369"
            },
            {
                "collisions": "0",
                "durationNsec": "567000000",
                "durationSec": "6262",
                "portNumber": "83",
                "receiveBytes": "51246",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "791",
                "transmitBytes": "2061719",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "41669"
            },
            {
                "collisions": "0",
                "durationNsec": "767000000",
                "durationSec": "61059",
                "portNumber": "55",
                "receiveBytes": "690",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "9",
                "transmitBytes": "142944128",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3377303"
            },
            {
                "collisions": "0",
                "durationNsec": "327000000",
                "durationSec": "6263",
                "portNumber": "82",
                "receiveBytes": "608882",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "6606",
                "transmitBytes": "2151072",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "43794"
            },
            {
                "collisions": "0",
                "durationNsec": "292000000",
                "durationSec": "63590",
                "portNumber": "39",
                "receiveBytes": "71857117",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "1707034",
                "transmitBytes": "101131475",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "2376109"
            },
            {
                "collisions": "0",
                "durationNsec": "954000000",
                "durationSec": "53865",
                "portNumber": "64",
                "receiveBytes": "2446759",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57801",
                "transmitBytes": "143520685",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3384733"
            },
            {
                "collisions": "0",
                "durationNsec": "49000000",
                "durationSec": "53870",
                "portNumber": "61",
                "receiveBytes": "2446274",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57798",
                "transmitBytes": "143307309",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3383204"
            },
            {
                "collisions": "0",
                "durationNsec": "436000000",
                "durationSec": "63589",
                "portNumber": "40",
                "receiveBytes": "2545426",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "59784",
                "transmitBytes": "143823726",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3386300"
            },
            {
                "collisions": "0",
                "durationNsec": "953000000",
                "durationSec": "53870",
                "portNumber": "60",
                "receiveBytes": "3118593",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "64443",
                "transmitBytes": "144273186",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3396296"
            }
        ],
        "version": "OF_13"
    }
}
[INFO|OpenflowHandler.py:131] 2015-12-30 00:29:57,450 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:29:57,450 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 00:29:57,457 > {
    "00:00:00:0c:29:7d:49:d8": [],
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-30 00:29:57,458 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:29:57,458 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 00:29:57,470 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-30 00:29:57,471 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:29:57,471 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 00:29:57,482 > {
    "00:00:00:0c:29:7d:49:d8": [],
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:29:57,482 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:29:57,483 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:29:57,484 > request_curl_post_data: {"name": "56 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "56"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:29:57,502 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:29:57,503 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:29:57,503 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:29:57,503 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:29:57,514 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:29:57,515 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:29:57,516 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:29:57,518 > request_curl_post_data: {"name": "37 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "37"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:29:57,546 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:29:57,546 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:29:57,547 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:29:57,547 > request_curl_post_data: {"name": "81 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "81"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:29:57,563 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:29:57,564 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:29:57,564 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:29:57,564 > request_curl_post_data: {"name": "80 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "80"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:29:57,572 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:29:57,573 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:29:57,573 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:29:57,573 > request_curl_post_data: {"name": "36 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "36"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:29:57,592 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:29:57,592 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:29:57,593 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:29:57,593 > request_curl_post_data: {"name": "25 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "25"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:29:57,601 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:29:57,602 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:29:57,602 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:29:57,603 > request_curl_post_data: {"name": "84 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "84"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:29:57,622 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:29:57,622 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:29:57,623 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:29:57,623 > request_curl_post_data: {"name": "63 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "63"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:29:57,630 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:29:57,631 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:29:57,631 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:29:57,632 > request_curl_post_data: {"name": "62 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "62"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:29:57,649 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:29:57,649 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:29:57,649 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:29:57,649 > request_curl_post_data: {"name": "57 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "57"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:29:57,658 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:29:57,659 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:29:57,659 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:29:57,659 > request_curl_post_data: {"name": "54 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "54"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:29:57,676 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:29:57,677 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:29:57,677 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:29:57,677 > request_curl_post_data: {"name": "38 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "38"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:29:57,685 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:29:57,686 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:29:57,686 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:29:57,687 > request_curl_post_data: {"name": "83 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "83"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:29:57,700 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:29:57,702 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:29:57,702 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:29:57,702 > request_curl_post_data: {"name": "55 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "55"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:29:57,711 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:29:57,712 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:29:57,712 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:29:57,712 > request_curl_post_data: {"name": "82 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "82"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:29:57,718 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:29:57,719 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:29:57,719 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:29:57,720 > request_curl_post_data: {"name": "39 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "39"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:29:57,735 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:29:57,735 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:29:57,736 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:29:57,736 > request_curl_post_data: {"name": "64 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "64"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:29:57,746 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:29:57,746 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:29:57,747 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:29:57,747 > request_curl_post_data: {"name": "61 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "61"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:29:57,758 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:29:57,758 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:29:57,759 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:29:57,760 > request_curl_post_data: {"name": "40 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "40"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:29:57,766 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:29:57,767 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:29:57,767 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:29:57,767 > request_curl_post_data: {"name": "60 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "60"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:29:57,775 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:29:57,776 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:29:57,776 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:29:57,777 > request_curl_post_data: {"name": "8 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "8"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:29:57,790 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:29:57,792 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:29:57,792 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:29:57,793 > request_curl_post_data: {"name": "4 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "4"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:29:57,798 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:29:57,798 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:29:57,798 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:29:57,798 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:29:57,805 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:29:57,805 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:29:57,806 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:29:57,806 > request_curl_post_data: {"name": "6 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "6"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:29:57,815 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:29:57,816 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:29:57,816 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:29:57,817 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:29:57,822 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:29:57,822 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:29:57,823 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:29:57,823 > request_curl_post_data: {"name": "7 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "7"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:29:57,829 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:29:57,830 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:29:57,830 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:29:57,830 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:29:57,835 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:29:57,836 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:29:57,836 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:29:57,836 > request_curl_post_data: {"name": "1 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "1"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:29:57,843 > {
    "status": "Entry pushed"
}
[INFO|SFCManager.py:575] 2015-12-30 00:30:01,435 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 00:30:01,436 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 00:30:01,438 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 00:30:01,439 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 00:30:01,439 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 00:30:01,441 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:30:01,444 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 00:30:01,454 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 7,
            "shortPortNumber": 7
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 83,
            "shortPortNumber": 83
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 39,
            "shortPortNumber": 39
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-30 00:30:01,454 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:30:01,455 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/36/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 00:30:01,463 > [
    {
        "port": {
            "length": 4,
            "portNumber": 36,
            "shortPortNumber": 36
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 82,
            "shortPortNumber": 82
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 8,
            "shortPortNumber": 8
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-30 00:30:01,466 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 00:30:01,469 > load tenant entry (Endian)
[INFO|OpenflowHandler.py:95] 2015-12-30 00:30:01,475 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:30:01,476 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:30:01,476 > request_curl_post_data: {"name": "Endian_default_0", "actions": "output=7", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 1}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:30:01,488 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:30:01,488 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:30:01,488 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:30:01,488 > request_curl_post_data: {"name": "Endian_default_0_reverse", "actions": "output=1", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 7}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:30:01,492 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:30:01,493 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:30:01,493 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:30:01,493 > request_curl_post_data: {"name": "Endian_default_1", "actions": "output=39", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 83}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:30:01,503 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:30:01,503 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:30:01,503 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:30:01,504 > request_curl_post_data: {"name": "Endian_default_1_reverse", "actions": "output=83", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 39}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:30:01,520 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:30:01,521 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:30:01,522 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:30:01,523 > request_curl_post_data: {"name": "Endian_default_2", "actions": "output=82", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 36}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:30:01,569 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:30:01,570 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:30:01,570 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:30:01,571 > request_curl_post_data: {"name": "Endian_default_2_reverse", "actions": "output=36", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 82}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:30:01,576 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:30:01,577 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:30:01,577 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:30:01,577 > request_curl_post_data: {"name": "Endian_default_3", "actions": "output=4", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 8}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:30:01,586 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 00:30:01,588 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 00:30:01,588 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 00:30:01,589 > request_curl_post_data: {"name": "Endian_default_3_reverse", "actions": "output=8", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 4}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 00:30:01,595 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-30 00:30:01,596 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:30:01,596 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 00:30:01,607 > {
    "00:00:00:0c:29:7d:49:d8": [],
    "00:00:00:0c:29:7d:49:ec": [
        {
            "Endian_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035999249648123",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "4 port drop rule": {
                "command": "ADD",
                "cookie": "45035999682764009",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "8 port drop rule": {
                "command": "ADD",
                "cookie": "45036000213794133",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_3": {
                "command": "ADD",
                "cookie": "45035997699443048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "1 port drop rule": {
                "command": "ADD",
                "cookie": "45035997137007768",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035999087137432",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "7 port drop rule": {
                "command": "ADD",
                "cookie": "45035997933552954",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_0": {
                "command": "ADD",
                "cookie": "45035997699443045",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "7"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [
        {
            "6 port drop rule": {
                "command": "ADD",
                "cookie": "45035999948279071",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "6"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "54 port drop rule": {
                "command": "ADD",
                "cookie": "45035999813688220",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "54"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "39 port drop rule": {
                "command": "ADD",
                "cookie": "45035998140888993",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "55 port drop rule": {
                "command": "ADD",
                "cookie": "45035997798962103",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "55"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "62 port drop rule": {
                "command": "ADD",
                "cookie": "45035999642724775",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "62"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_1": {
                "command": "ADD",
                "cookie": "45035997699443046",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "39"
                    }
                },
                "match": {
                    "in_port": "83"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035996332166362",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "36"
                    }
                },
                "match": {
                    "in_port": "82"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "25 port drop rule": {
                "command": "ADD",
                "cookie": "45035997515307252",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "25"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "37 port drop rule": {
                "command": "ADD",
                "cookie": "45035997875373931",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "37"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "63 port drop rule": {
                "command": "ADD",
                "cookie": "45035997627998658",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "40 port drop rule": {
                "command": "ADD",
                "cookie": "45035999188106479",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "40"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "38 port drop rule": {
                "command": "ADD",
                "cookie": "45036000155615110",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "38"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035997709651897",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "83"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "80 port drop rule": {
                "command": "ADD",
                "cookie": "45035999566312947",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "80"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "84 port drop rule": {
                "command": "ADD",
                "cookie": "45036000097343071",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "84"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "81 port drop rule": {
                "command": "ADD",
                "cookie": "45035997551586830",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "81"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "82 port drop rule": {
                "command": "ADD",
                "cookie": "45035999831828009",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "82"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "36 port drop rule": {
                "command": "ADD",
                "cookie": "45035999890100048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "61 port drop rule": {
                "command": "ADD",
                "cookie": "45035997362483596",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "61"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "60 port drop rule": {
                "command": "ADD",
                "cookie": "45035999377209713",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "64 port drop rule": {
                "command": "ADD",
                "cookie": "45035999908239837",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "64"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2": {
                "command": "ADD",
                "cookie": "45035997699443047",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "82"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "56 port drop rule": {
                "command": "ADD",
                "cookie": "45036000079203282",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "56"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "57 port drop rule": {
                "command": "ADD",
                "cookie": "45035998064477165",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "57"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "83 port drop rule": {
                "command": "ADD",
                "cookie": "45035997817101892",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "83"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-30 00:32:53,314 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:32:53,316 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 00:32:53,324 > {
    "00:00:00:0c:29:7d:49:d8": [],
    "00:00:00:0c:29:7d:49:ec": [
        {
            "Endian_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035999249648123",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "8"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "4 port drop rule": {
                "command": "ADD",
                "cookie": "45035999682764009",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "8 port drop rule": {
                "command": "ADD",
                "cookie": "45036000213794133",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_3": {
                "command": "ADD",
                "cookie": "45035997699443048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "8"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "1 port drop rule": {
                "command": "ADD",
                "cookie": "45035997137007768",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035999087137432",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "7 port drop rule": {
                "command": "ADD",
                "cookie": "45035997933552954",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_0": {
                "command": "ADD",
                "cookie": "45035997699443045",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "7"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [
        {
            "6 port drop rule": {
                "command": "ADD",
                "cookie": "45035999948279071",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "6"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "54 port drop rule": {
                "command": "ADD",
                "cookie": "45035999813688220",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "54"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "39 port drop rule": {
                "command": "ADD",
                "cookie": "45035998140888993",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "55 port drop rule": {
                "command": "ADD",
                "cookie": "45035997798962103",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "55"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "62 port drop rule": {
                "command": "ADD",
                "cookie": "45035999642724775",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "62"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_1": {
                "command": "ADD",
                "cookie": "45035997699443046",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "39"
                    }
                },
                "match": {
                    "in_port": "83"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035996332166362",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "36"
                    }
                },
                "match": {
                    "in_port": "82"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "25 port drop rule": {
                "command": "ADD",
                "cookie": "45035997515307252",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "25"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "37 port drop rule": {
                "command": "ADD",
                "cookie": "45035997875373931",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "37"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "63 port drop rule": {
                "command": "ADD",
                "cookie": "45035997627998658",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "40 port drop rule": {
                "command": "ADD",
                "cookie": "45035999188106479",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "40"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "38 port drop rule": {
                "command": "ADD",
                "cookie": "45036000155615110",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "38"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035997709651897",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "83"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "80 port drop rule": {
                "command": "ADD",
                "cookie": "45035999566312947",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "80"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "84 port drop rule": {
                "command": "ADD",
                "cookie": "45036000097343071",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "84"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "81 port drop rule": {
                "command": "ADD",
                "cookie": "45035997551586830",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "81"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "82 port drop rule": {
                "command": "ADD",
                "cookie": "45035999831828009",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "82"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "36 port drop rule": {
                "command": "ADD",
                "cookie": "45035999890100048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "61 port drop rule": {
                "command": "ADD",
                "cookie": "45035997362483596",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "61"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "60 port drop rule": {
                "command": "ADD",
                "cookie": "45035999377209713",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "64 port drop rule": {
                "command": "ADD",
                "cookie": "45035999908239837",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "64"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2": {
                "command": "ADD",
                "cookie": "45035997699443047",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "82"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "56 port drop rule": {
                "command": "ADD",
                "cookie": "45036000079203282",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "56"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "57 port drop rule": {
                "command": "ADD",
                "cookie": "45035998064477165",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "57"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "83 port drop rule": {
                "command": "ADD",
                "cookie": "45035997817101892",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "83"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-30 00:32:53,329 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:32:53,331 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 00:32:53,341 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-30 00:32:53,341 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 00:32:53,343 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 00:32:53,347 > {
    "00:00:00:0c:29:7d:49:d8": [],
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:165] 2015-12-30 01:05:53,326 > get_switch_port
[INFO|OpenflowHandler.py:131] 2015-12-30 01:05:53,327 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:05:53,328 > request_curl_url: http://192.168.17.179:8080/wm/core/switch/all/port/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:05:54,524 > {
    "00:00:00:0c:29:7d:49:ec": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "115000000",
                "durationSec": "57780",
                "portNumber": "4",
                "receiveBytes": "2457798",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "28072",
                "transmitBytes": "143201535",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3343234"
            },
            {
                "collisions": "0",
                "durationNsec": "993000000",
                "durationSec": "72360",
                "portNumber": "local",
                "receiveBytes": "2969825",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "64373",
                "transmitBytes": "142099438",
                "transmitDropped": "1218",
                "transmitErrors": "0",
                "transmitPackets": "3317482"
            },
            {
                "collisions": "0",
                "durationNsec": "411000000",
                "durationSec": "900",
                "portNumber": "12",
                "receiveBytes": "2230710",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "27712",
                "transmitBytes": "783771",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "11898"
            }
        ],
        "version": "OF_13"
    },
    "00:00:00:0c:29:7d:49:f6": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "691000000",
                "durationSec": "899",
                "portNumber": "11",
                "receiveBytes": "2033798",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "23209",
                "transmitBytes": "3137",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "60"
            },
            {
                "collisions": "0",
                "durationNsec": "816000000",
                "durationSec": "72360",
                "portNumber": "local",
                "receiveBytes": "2499332",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58485",
                "transmitBytes": "134847112",
                "transmitDropped": "2728",
                "transmitErrors": "0",
                "transmitPackets": "3163995"
            },
            {
                "collisions": "0",
                "durationNsec": "820000000",
                "durationSec": "72360",
                "portNumber": "1",
                "receiveBytes": "664660",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "7239",
                "transmitBytes": "135743291",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3176065"
            }
        ],
        "version": "OF_13"
    },
    "00:00:4a:72:d4:24:ae:41": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "845000000",
                "durationSec": "901",
                "portNumber": "10",
                "receiveBytes": "2035647",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "23251",
                "transmitBytes": "244",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "4"
            },
            {
                "collisions": "0",
                "durationNsec": "819000000",
                "durationSec": "72360",
                "portNumber": "local",
                "receiveBytes": "2470736",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58148",
                "transmitBytes": "141632795",
                "transmitDropped": "84",
                "transmitErrors": "0",
                "transmitPackets": "3318517"
            }
        ],
        "version": "OF_13"
    },
    "00:00:ee:42:21:d6:e1:44": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "101000000",
                "durationSec": "899",
                "portNumber": "104",
                "receiveBytes": "90889",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "467",
                "transmitBytes": "1984142",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "22918"
            },
            {
                "collisions": "0",
                "durationNsec": "258000000",
                "durationSec": "901",
                "portNumber": "101",
                "receiveBytes": "0",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "0",
                "transmitBytes": "2035695",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "23252"
            },
            {
                "collisions": "0",
                "durationNsec": "181000000",
                "durationSec": "63205",
                "portNumber": "56",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "145093158",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3401705"
            },
            {
                "collisions": "0",
                "durationNsec": "949000000",
                "durationSec": "72360",
                "portNumber": "local",
                "receiveBytes": "2443011",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57767",
                "transmitBytes": "146167166",
                "transmitDropped": "7551",
                "transmitErrors": "0",
                "transmitPackets": "3411296"
            },
            {
                "collisions": "0",
                "durationNsec": "983000000",
                "durationSec": "65748",
                "portNumber": "37",
                "receiveBytes": "2471911",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58046",
                "transmitBytes": "145432762",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3407592"
            },
            {
                "collisions": "0",
                "durationNsec": "973000000",
                "durationSec": "901",
                "portNumber": "100",
                "receiveBytes": "244",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "4",
                "transmitBytes": "2035647",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "23251"
            },
            {
                "collisions": "0",
                "durationNsec": "849000000",
                "durationSec": "65749",
                "portNumber": "36",
                "receiveBytes": "75736048",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "1773539",
                "transmitBytes": "77327126",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "1780020"
            },
            {
                "collisions": "0",
                "durationNsec": "907000000",
                "durationSec": "72360",
                "portNumber": "25",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "144957167",
                "transmitDropped": "29",
                "transmitErrors": "0",
                "transmitPackets": "3400691"
            },
            {
                "collisions": "0",
                "durationNsec": "810000000",
                "durationSec": "899",
                "portNumber": "103",
                "receiveBytes": "3137",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "60",
                "transmitBytes": "2033798",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "23209"
            },
            {
                "collisions": "0",
                "durationNsec": "489000000",
                "durationSec": "56024",
                "portNumber": "63",
                "receiveBytes": "2456174",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57920",
                "transmitBytes": "145722294",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3413013"
            },
            {
                "collisions": "0",
                "durationNsec": "757000000",
                "durationSec": "56025",
                "portNumber": "62",
                "receiveBytes": "2445259",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57785",
                "transmitBytes": "145334997",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3406793"
            },
            {
                "collisions": "0",
                "durationNsec": "48000000",
                "durationSec": "63192",
                "portNumber": "57",
                "receiveBytes": "7453",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "55",
                "transmitBytes": "145061938",
                "transmitDropped": "1",
                "transmitErrors": "0",
                "transmitPackets": "3402768"
            },
            {
                "collisions": "0",
                "durationNsec": "775000000",
                "durationSec": "63227",
                "portNumber": "54",
                "receiveBytes": "2013",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "17",
                "transmitBytes": "145468414",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3404519"
            },
            {
                "collisions": "0",
                "durationNsec": "60000000",
                "durationSec": "65748",
                "portNumber": "38",
                "receiveBytes": "2468932",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58015",
                "transmitBytes": "145368404",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3406995"
            },
            {
                "collisions": "0",
                "durationNsec": "703000000",
                "durationSec": "63216",
                "portNumber": "55",
                "receiveBytes": "690",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "9",
                "transmitBytes": "144973730",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3400905"
            },
            {
                "collisions": "0",
                "durationNsec": "228000000",
                "durationSec": "65747",
                "portNumber": "39",
                "receiveBytes": "72922572",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "1720727",
                "transmitBytes": "102211510",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "2388673"
            },
            {
                "collisions": "0",
                "durationNsec": "889000000",
                "durationSec": "56022",
                "portNumber": "64",
                "receiveBytes": "2447141",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57807",
                "transmitBytes": "145666581",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3409143"
            },
            {
                "collisions": "0",
                "durationNsec": "984000000",
                "durationSec": "56026",
                "portNumber": "61",
                "receiveBytes": "2446488",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57800",
                "transmitBytes": "145339144",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3406841"
            },
            {
                "collisions": "0",
                "durationNsec": "519000000",
                "durationSec": "900",
                "portNumber": "102",
                "receiveBytes": "783771",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "11898",
                "transmitBytes": "2229450",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "27698"
            },
            {
                "collisions": "0",
                "durationNsec": "371000000",
                "durationSec": "65746",
                "portNumber": "40",
                "receiveBytes": "2555384",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "60018",
                "transmitBytes": "145920872",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3410354"
            },
            {
                "collisions": "0",
                "durationNsec": "888000000",
                "durationSec": "56027",
                "portNumber": "60",
                "receiveBytes": "3119213",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "64452",
                "transmitBytes": "146314739",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3420086"
            }
        ],
        "version": "OF_13"
    }
}
[INFO|OpenflowHandler.py:131] 2015-12-30 01:05:54,527 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:05:54,527 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:05:54,597 > {}
[INFO|OpenflowHandler.py:131] 2015-12-30 01:05:54,597 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:05:54,597 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:05:54,674 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-30 01:05:54,675 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:05:54,675 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:05:54,702 > {}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:05:54,702 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:05:54,702 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:05:54,702 > request_curl_post_data: {"name": "104 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "104"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:05:54,774 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:05:54,775 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:05:54,775 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:05:54,776 > request_curl_post_data: {"name": "101 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "101"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:05:54,827 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:05:54,827 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:05:54,828 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:05:54,828 > request_curl_post_data: {"name": "56 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "56"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:05:54,847 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:05:54,847 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:05:54,847 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:05:54,848 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:05:54,860 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:05:54,861 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:05:54,861 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:05:54,862 > request_curl_post_data: {"name": "37 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "37"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:05:54,874 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:05:54,875 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:05:54,875 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:05:54,875 > request_curl_post_data: {"name": "100 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "100"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:05:54,887 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:05:54,887 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:05:54,887 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:05:54,887 > request_curl_post_data: {"name": "36 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "36"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:05:54,914 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:05:54,915 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:05:54,916 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:05:54,916 > request_curl_post_data: {"name": "25 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "25"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:05:54,945 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:05:54,946 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:05:54,946 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:05:54,946 > request_curl_post_data: {"name": "103 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "103"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:05:54,986 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:05:54,987 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:05:54,987 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:05:54,987 > request_curl_post_data: {"name": "63 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "63"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:05:55,032 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:05:55,033 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:05:55,034 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:05:55,035 > request_curl_post_data: {"name": "62 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "62"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:05:55,050 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:05:55,050 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:05:55,051 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:05:55,051 > request_curl_post_data: {"name": "57 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "57"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:05:55,056 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:05:55,056 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:05:55,057 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:05:55,057 > request_curl_post_data: {"name": "54 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "54"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:05:55,065 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:05:55,066 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:05:55,066 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:05:55,066 > request_curl_post_data: {"name": "38 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "38"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:05:55,073 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:05:55,073 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:05:55,073 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:05:55,073 > request_curl_post_data: {"name": "55 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "55"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:05:55,090 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:05:55,091 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:05:55,091 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:05:55,092 > request_curl_post_data: {"name": "39 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "39"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:05:55,149 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:05:55,150 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:05:55,150 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:05:55,150 > request_curl_post_data: {"name": "64 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "64"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:05:55,159 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:05:55,159 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:05:55,159 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:05:55,159 > request_curl_post_data: {"name": "61 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "61"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:05:55,170 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:05:55,171 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:05:55,171 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:05:55,172 > request_curl_post_data: {"name": "102 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "102"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:05:55,186 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:05:55,187 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:05:55,187 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:05:55,187 > request_curl_post_data: {"name": "40 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "40"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:05:55,213 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:05:55,214 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:05:55,214 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:05:55,214 > request_curl_post_data: {"name": "60 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "60"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:05:55,222 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:05:55,223 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:05:55,223 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:05:55,223 > request_curl_post_data: {"name": "4 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "4"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:05:55,233 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:05:55,233 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:05:55,233 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:05:55,233 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:05:55,267 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:05:55,268 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:05:55,268 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:05:55,268 > request_curl_post_data: {"name": "12 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "12"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:05:55,277 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:05:55,278 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:05:55,279 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:05:55,284 > request_curl_post_data: {"name": "10 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "10"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:05:55,309 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:05:55,310 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:05:55,310 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:05:55,311 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:05:55,353 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:05:55,353 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:05:55,354 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:05:55,354 > request_curl_post_data: {"name": "11 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "11"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:05:55,370 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:05:55,370 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:05:55,371 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:05:55,371 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:05:55,388 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:05:55,388 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:05:55,388 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:05:55,388 > request_curl_post_data: {"name": "1 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "1"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:05:55,393 > {
    "status": "Entry pushed"
}
[INFO|SFCManager.py:575] 2015-12-30 01:06:13,297 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 01:06:13,297 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 01:06:13,299 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 01:06:13,300 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 01:06:13,300 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 01:06:13,302 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:06:13,304 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:06:13,316 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 11,
            "shortPortNumber": 11
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 103,
            "shortPortNumber": 103
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 39,
            "shortPortNumber": 39
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-30 01:06:13,317 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:06:13,317 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/36/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:06:13,324 > [
    {
        "port": {
            "length": 4,
            "portNumber": 36,
            "shortPortNumber": 36
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 102,
            "shortPortNumber": 102
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 12,
            "shortPortNumber": 12
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-30 01:06:13,334 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 01:06:13,338 > load tenant entry (Endian)
[INFO|OpenflowHandler.py:95] 2015-12-30 01:06:13,346 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:06:13,347 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:06:13,347 > request_curl_post_data: {"name": "Endian_default_0", "actions": "output=11", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 1}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:06:13,355 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:06:13,356 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:06:13,356 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:06:13,356 > request_curl_post_data: {"name": "Endian_default_0_reverse", "actions": "output=1", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 11}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:06:13,365 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:06:13,365 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:06:13,366 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:06:13,366 > request_curl_post_data: {"name": "Endian_default_1", "actions": "output=39", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 103}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:06:13,373 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:06:13,377 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:06:13,379 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:06:13,379 > request_curl_post_data: {"name": "Endian_default_1_reverse", "actions": "output=103", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 39}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:06:13,387 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:06:13,388 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:06:13,389 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:06:13,389 > request_curl_post_data: {"name": "Endian_default_2", "actions": "output=102", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 36}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:06:13,398 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:06:13,399 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:06:13,399 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:06:13,399 > request_curl_post_data: {"name": "Endian_default_2_reverse", "actions": "output=36", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 102}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:06:13,413 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:06:13,415 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:06:13,415 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:06:13,416 > request_curl_post_data: {"name": "Endian_default_3", "actions": "output=4", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 12}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:06:13,432 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:06:13,432 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:06:13,433 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:06:13,433 > request_curl_post_data: {"name": "Endian_default_3_reverse", "actions": "output=12", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 4}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:06:13,438 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-30 01:06:13,441 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:06:13,441 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:06:13,485 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "12 port drop rule": {
                "command": "ADD",
                "cookie": "45035999169966690",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "12"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035999249648123",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "12"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "4 port drop rule": {
                "command": "ADD",
                "cookie": "45035999682764009",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_3": {
                "command": "ADD",
                "cookie": "45035997699443048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "12"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "1 port drop rule": {
                "command": "ADD",
                "cookie": "45035997137007768",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035999087137432",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "11"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_0": {
                "command": "ADD",
                "cookie": "45035997699443045",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "11"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "11 port drop rule": {
                "command": "ADD",
                "cookie": "45035996889725511",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "11"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [
        {
            "10 port drop rule": {
                "command": "ADD",
                "cookie": "45035998904451628",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "10"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "54 port drop rule": {
                "command": "ADD",
                "cookie": "45035999813688220",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "54"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "101 port drop rule": {
                "command": "ADD",
                "cookie": "45036000453192515",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "101"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "39 port drop rule": {
                "command": "ADD",
                "cookie": "45035998140888993",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "55 port drop rule": {
                "command": "ADD",
                "cookie": "45035997798962103",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "55"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "104 port drop rule": {
                "command": "ADD",
                "cookie": "45035998703981460",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "104"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "62 port drop rule": {
                "command": "ADD",
                "cookie": "45035999642724775",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "62"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_1": {
                "command": "ADD",
                "cookie": "45035997699443046",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "39"
                    }
                },
                "match": {
                    "in_port": "103"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035996332166362",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "36"
                    }
                },
                "match": {
                    "in_port": "102"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "37 port drop rule": {
                "command": "ADD",
                "cookie": "45035997875373931",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "37"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "25 port drop rule": {
                "command": "ADD",
                "cookie": "45035997515307252",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "25"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "63 port drop rule": {
                "command": "ADD",
                "cookie": "45035997627998658",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "40 port drop rule": {
                "command": "ADD",
                "cookie": "45035999188106479",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "40"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "38 port drop rule": {
                "command": "ADD",
                "cookie": "45036000155615110",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "38"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "103 port drop rule": {
                "command": "ADD",
                "cookie": "45035996423740281",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "103"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035997709651897",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "103"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "102 port drop rule": {
                "command": "ADD",
                "cookie": "45035998438466398",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "102"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "36 port drop rule": {
                "command": "ADD",
                "cookie": "45035999890100048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "61 port drop rule": {
                "command": "ADD",
                "cookie": "45035997362483596",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "61"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "60 port drop rule": {
                "command": "ADD",
                "cookie": "45035999377209713",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "64 port drop rule": {
                "command": "ADD",
                "cookie": "45035999908239837",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "64"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2": {
                "command": "ADD",
                "cookie": "45035997699443047",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "102"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "56 port drop rule": {
                "command": "ADD",
                "cookie": "45036000079203282",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "56"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "57 port drop rule": {
                "command": "ADD",
                "cookie": "45035998064477165",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "57"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "100 port drop rule": {
                "command": "ADD",
                "cookie": "45035998172951336",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "100"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-30 01:10:08,760 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:10:08,762 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:10:08,771 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "12 port drop rule": {
                "command": "ADD",
                "cookie": "45035999169966690",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "12"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035999249648123",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "12"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "4 port drop rule": {
                "command": "ADD",
                "cookie": "45035999682764009",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_3": {
                "command": "ADD",
                "cookie": "45035997699443048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "12"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "1 port drop rule": {
                "command": "ADD",
                "cookie": "45035997137007768",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035999087137432",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "11"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_0": {
                "command": "ADD",
                "cookie": "45035997699443045",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "11"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "11 port drop rule": {
                "command": "ADD",
                "cookie": "45035996889725511",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "11"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [
        {
            "10 port drop rule": {
                "command": "ADD",
                "cookie": "45035998904451628",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "10"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "54 port drop rule": {
                "command": "ADD",
                "cookie": "45035999813688220",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "54"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "101 port drop rule": {
                "command": "ADD",
                "cookie": "45036000453192515",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "101"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "39 port drop rule": {
                "command": "ADD",
                "cookie": "45035998140888993",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "55 port drop rule": {
                "command": "ADD",
                "cookie": "45035997798962103",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "55"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "104 port drop rule": {
                "command": "ADD",
                "cookie": "45035998703981460",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "104"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "62 port drop rule": {
                "command": "ADD",
                "cookie": "45035999642724775",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "62"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_1": {
                "command": "ADD",
                "cookie": "45035997699443046",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "39"
                    }
                },
                "match": {
                    "in_port": "103"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035996332166362",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "36"
                    }
                },
                "match": {
                    "in_port": "102"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "37 port drop rule": {
                "command": "ADD",
                "cookie": "45035997875373931",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "37"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "25 port drop rule": {
                "command": "ADD",
                "cookie": "45035997515307252",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "25"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "63 port drop rule": {
                "command": "ADD",
                "cookie": "45035997627998658",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "63"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "40 port drop rule": {
                "command": "ADD",
                "cookie": "45035999188106479",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "40"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "38 port drop rule": {
                "command": "ADD",
                "cookie": "45036000155615110",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "38"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "103 port drop rule": {
                "command": "ADD",
                "cookie": "45035996423740281",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "103"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035997709651897",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "103"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "102 port drop rule": {
                "command": "ADD",
                "cookie": "45035998438466398",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "102"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "36 port drop rule": {
                "command": "ADD",
                "cookie": "45035999890100048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "61 port drop rule": {
                "command": "ADD",
                "cookie": "45035997362483596",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "61"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "60 port drop rule": {
                "command": "ADD",
                "cookie": "45035999377209713",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "60"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "64 port drop rule": {
                "command": "ADD",
                "cookie": "45035999908239837",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "64"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2": {
                "command": "ADD",
                "cookie": "45035997699443047",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "102"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "56 port drop rule": {
                "command": "ADD",
                "cookie": "45036000079203282",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "56"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "57 port drop rule": {
                "command": "ADD",
                "cookie": "45035998064477165",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "57"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        },
        {
            "100 port drop rule": {
                "command": "ADD",
                "cookie": "45035998172951336",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "none": "drop"
                    }
                },
                "match": {
                    "in_port": "100"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "1",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-30 01:10:08,777 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:10:08,777 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:10:08,807 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-30 01:10:08,807 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:10:08,808 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:10:08,814 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|SFCManager.py:575] 2015-12-30 01:10:11,062 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 01:10:11,063 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 01:10:11,064 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 01:10:11,065 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 01:10:11,065 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 01:10:11,067 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:10:11,069 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-30 01:10:11,076 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-30 01:10:11,077 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-30 01:10:11,078 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 01:10:11,079 > load tenant entry (Endian)
[INFO|SFCManager.py:575] 2015-12-30 01:10:12,498 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 01:10:12,499 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 01:10:12,500 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 01:10:12,501 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 01:10:12,501 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 01:10:12,503 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:10:12,506 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-30 01:10:12,512 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-30 01:10:12,513 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-30 01:10:12,514 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 01:10:12,515 > load tenant entry (Endian)
[INFO|SFCManager.py:575] 2015-12-30 01:10:13,644 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 01:10:13,645 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 01:10:13,647 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 01:10:13,647 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 01:10:13,647 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 01:10:13,649 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:10:13,651 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-30 01:10:13,659 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-30 01:10:13,659 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-30 01:10:13,660 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 01:10:13,662 > load tenant entry (Endian)
[INFO|OpenflowHandler.py:131] 2015-12-30 01:10:15,992 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:10:15,993 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:10:15,997 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-30 01:10:15,998 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:10:15,998 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:10:16,003 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-30 01:10:16,003 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:10:16,003 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:10:16,011 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|SFCManager.py:575] 2015-12-30 01:10:17,482 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 01:10:17,483 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 01:10:17,484 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 01:10:17,485 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 01:10:17,485 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 01:10:17,487 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:10:17,488 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-30 01:10:17,494 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-30 01:10:17,496 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-30 01:10:17,497 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 01:10:17,498 > load tenant entry (Endian)
[INFO|SFCManager.py:575] 2015-12-30 01:10:19,442 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 01:10:19,443 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 01:10:19,444 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 01:10:19,445 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 01:10:19,445 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 01:10:19,447 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:10:19,449 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-30 01:10:19,456 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-30 01:10:19,457 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-30 01:10:19,458 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 01:10:19,460 > load tenant entry (Endian)
[INFO|OpenflowHandler.py:131] 2015-12-30 01:10:21,471 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:10:21,473 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:10:21,476 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-30 01:10:21,477 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:10:21,477 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:10:21,480 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-30 01:10:21,480 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:10:21,480 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:10:21,484 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|SFCManager.py:575] 2015-12-30 01:10:23,032 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 01:10:23,033 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 01:10:23,034 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 01:10:23,035 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 01:10:23,035 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 01:10:23,037 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:10:23,039 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:10:23,047 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 11,
            "shortPortNumber": 11
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 103,
            "shortPortNumber": 103
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 39,
            "shortPortNumber": 39
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-30 01:10:23,047 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:10:23,047 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/36/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:10:23,053 > [
    {
        "port": {
            "length": 4,
            "portNumber": 36,
            "shortPortNumber": 36
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 102,
            "shortPortNumber": 102
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 12,
            "shortPortNumber": 12
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-30 01:10:23,056 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 01:10:23,058 > load tenant entry (Endian)
[INFO|OpenflowHandler.py:95] 2015-12-30 01:10:23,064 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:10:23,065 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:10:23,065 > request_curl_post_data: {"name": "Endian_default_0", "actions": "output=11", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 1}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:10:23,072 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:10:23,072 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:10:23,073 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:10:23,073 > request_curl_post_data: {"name": "Endian_default_0_reverse", "actions": "output=1", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 11}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:10:23,078 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:10:23,079 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:10:23,079 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:10:23,079 > request_curl_post_data: {"name": "Endian_default_1", "actions": "output=39", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 103}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:10:23,084 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:10:23,085 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:10:23,086 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:10:23,087 > request_curl_post_data: {"name": "Endian_default_1_reverse", "actions": "output=103", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 39}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:10:23,093 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:10:23,094 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:10:23,094 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:10:23,094 > request_curl_post_data: {"name": "Endian_default_2", "actions": "output=102", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 36}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:10:23,105 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:10:23,105 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:10:23,106 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:10:23,106 > request_curl_post_data: {"name": "Endian_default_2_reverse", "actions": "output=36", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 102}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:10:23,110 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:10:23,110 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:10:23,111 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:10:23,111 > request_curl_post_data: {"name": "Endian_default_3", "actions": "output=4", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 12}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:10:23,118 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:10:23,118 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:10:23,118 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:10:23,119 > request_curl_post_data: {"name": "Endian_default_3_reverse", "actions": "output=12", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 4}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:10:23,127 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-30 01:10:23,128 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:10:23,128 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:10:23,137 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "Endian_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035999249648123",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "12"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_3": {
                "command": "ADD",
                "cookie": "45035997699443048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "12"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "Endian_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035999087137432",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "11"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_0": {
                "command": "ADD",
                "cookie": "45035997699443045",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "11"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "Endian_default_1": {
                "command": "ADD",
                "cookie": "45035997699443046",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "39"
                    }
                },
                "match": {
                    "in_port": "103"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035996332166362",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "36"
                    }
                },
                "match": {
                    "in_port": "102"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035997709651897",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "103"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2": {
                "command": "ADD",
                "cookie": "45035997699443047",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "102"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|SFCManager.py:575] 2015-12-30 01:10:53,859 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 01:10:53,860 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 01:10:53,862 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 01:10:53,862 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 01:10:53,863 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 01:10:53,865 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:10:53,866 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:10:53,876 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 11,
            "shortPortNumber": 11
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 103,
            "shortPortNumber": 103
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 39,
            "shortPortNumber": 39
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-30 01:10:53,877 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:10:53,877 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/36/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:10:53,883 > [
    {
        "port": {
            "length": 4,
            "portNumber": 36,
            "shortPortNumber": 36
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 102,
            "shortPortNumber": 102
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 12,
            "shortPortNumber": 12
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-30 01:10:53,888 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 01:10:53,892 > load tenant entry (Endian)
[INFO|OpenflowHandler.py:95] 2015-12-30 01:10:53,900 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:10:53,900 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:10:53,900 > request_curl_post_data: {"name": "Endian_default_0", "actions": "output=11", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 1}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:10:53,910 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:10:53,910 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:10:53,911 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:10:53,911 > request_curl_post_data: {"name": "Endian_default_0_reverse", "actions": "output=1", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 11}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:10:53,916 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:10:53,916 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:10:53,916 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:10:53,916 > request_curl_post_data: {"name": "Endian_default_1", "actions": "output=39", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 103}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:10:53,925 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:10:53,925 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:10:53,925 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:10:53,926 > request_curl_post_data: {"name": "Endian_default_1_reverse", "actions": "output=103", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 39}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:10:53,934 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:10:53,935 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:10:53,937 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:10:53,938 > request_curl_post_data: {"name": "Endian_default_2", "actions": "output=102", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 36}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:10:53,943 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:10:53,944 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:10:53,944 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:10:53,944 > request_curl_post_data: {"name": "Endian_default_2_reverse", "actions": "output=36", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 102}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:10:53,956 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:10:53,956 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:10:53,957 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:10:53,957 > request_curl_post_data: {"name": "Endian_default_3", "actions": "output=4", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 12}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:10:53,969 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:10:53,970 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:10:53,971 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:10:53,971 > request_curl_post_data: {"name": "Endian_default_3_reverse", "actions": "output=12", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 4}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:10:53,978 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-30 01:10:53,978 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:10:53,978 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:10:53,985 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "Endian_default_3_reverse": {
                "command": "MODIFY",
                "cookie": "45035999249648123",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "12"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_3": {
                "command": "MODIFY",
                "cookie": "45035997699443048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "12"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "Endian_default_0_reverse": {
                "command": "MODIFY",
                "cookie": "45035999087137432",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "11"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_0": {
                "command": "MODIFY",
                "cookie": "45035997699443045",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "11"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "Endian_default_1": {
                "command": "MODIFY",
                "cookie": "45035997699443046",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "39"
                    }
                },
                "match": {
                    "in_port": "103"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2_reverse": {
                "command": "MODIFY",
                "cookie": "45035996332166362",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "36"
                    }
                },
                "match": {
                    "in_port": "102"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_1_reverse": {
                "command": "MODIFY",
                "cookie": "45035997709651897",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "103"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2": {
                "command": "MODIFY",
                "cookie": "45035997699443047",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "102"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-30 01:11:01,528 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:11:01,530 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:11:01,534 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "Endian_default_3_reverse": {
                "command": "MODIFY",
                "cookie": "45035999249648123",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "12"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_3": {
                "command": "MODIFY",
                "cookie": "45035997699443048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "12"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "Endian_default_0_reverse": {
                "command": "MODIFY",
                "cookie": "45035999087137432",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "11"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_0": {
                "command": "MODIFY",
                "cookie": "45035997699443045",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "11"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "Endian_default_1": {
                "command": "MODIFY",
                "cookie": "45035997699443046",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "39"
                    }
                },
                "match": {
                    "in_port": "103"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2_reverse": {
                "command": "MODIFY",
                "cookie": "45035996332166362",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "36"
                    }
                },
                "match": {
                    "in_port": "102"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_1_reverse": {
                "command": "MODIFY",
                "cookie": "45035997709651897",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "103"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2": {
                "command": "MODIFY",
                "cookie": "45035997699443047",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "102"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-30 01:11:01,536 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:11:01,536 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:11:01,540 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-30 01:11:01,540 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:11:01,541 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:11:01,548 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|SFCManager.py:575] 2015-12-30 01:11:03,570 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 01:11:03,571 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 01:11:03,572 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 01:11:03,573 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 01:11:03,573 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 01:11:03,575 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:11:03,576 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-30 01:11:03,585 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-30 01:11:03,585 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-30 01:11:03,586 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 01:11:03,587 > load tenant entry (Endian)
[INFO|OpenflowHandler.py:131] 2015-12-30 01:11:05,871 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:11:05,872 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:11:05,876 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-30 01:11:05,877 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:11:05,877 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:11:05,881 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-30 01:11:05,881 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:11:05,882 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:11:05,888 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|SFCManager.py:575] 2015-12-30 01:11:07,187 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 01:11:07,188 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 01:11:07,190 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 01:11:07,190 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 01:11:07,190 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 01:11:07,192 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:11:07,194 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:11:07,204 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 11,
            "shortPortNumber": 11
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 103,
            "shortPortNumber": 103
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 39,
            "shortPortNumber": 39
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-30 01:11:07,204 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:11:07,204 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/36/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:11:07,210 > [
    {
        "port": {
            "length": 4,
            "portNumber": 36,
            "shortPortNumber": 36
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 102,
            "shortPortNumber": 102
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 12,
            "shortPortNumber": 12
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-30 01:11:07,215 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 01:11:07,217 > load tenant entry (Endian)
[INFO|OpenflowHandler.py:95] 2015-12-30 01:11:07,222 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:11:07,222 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:11:07,223 > request_curl_post_data: {"name": "Endian_default_0", "actions": "output=11", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 1}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:11:07,239 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:11:07,239 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:11:07,239 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:11:07,240 > request_curl_post_data: {"name": "Endian_default_0_reverse", "actions": "output=1", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 11}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:11:07,245 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:11:07,246 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:11:07,246 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:11:07,246 > request_curl_post_data: {"name": "Endian_default_1", "actions": "output=39", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 103}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:11:07,255 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:11:07,256 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:11:07,256 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:11:07,256 > request_curl_post_data: {"name": "Endian_default_1_reverse", "actions": "output=103", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 39}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:11:07,273 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:11:07,273 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:11:07,274 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:11:07,274 > request_curl_post_data: {"name": "Endian_default_2", "actions": "output=102", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 36}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:11:07,282 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:11:07,283 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:11:07,283 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:11:07,284 > request_curl_post_data: {"name": "Endian_default_2_reverse", "actions": "output=36", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 102}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:11:07,293 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:11:07,293 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:11:07,293 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:11:07,294 > request_curl_post_data: {"name": "Endian_default_3", "actions": "output=4", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 12}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:11:07,303 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:11:07,304 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:11:07,305 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:11:07,305 > request_curl_post_data: {"name": "Endian_default_3_reverse", "actions": "output=12", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 4}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:11:07,315 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-30 01:11:07,316 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:11:07,316 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:11:07,334 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "Endian_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035999249648123",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "12"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_3": {
                "command": "ADD",
                "cookie": "45035997699443048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "12"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "Endian_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035999087137432",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "11"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_0": {
                "command": "ADD",
                "cookie": "45035997699443045",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "11"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "Endian_default_1": {
                "command": "ADD",
                "cookie": "45035997699443046",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "39"
                    }
                },
                "match": {
                    "in_port": "103"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035996332166362",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "36"
                    }
                },
                "match": {
                    "in_port": "102"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035997709651897",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "103"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2": {
                "command": "ADD",
                "cookie": "45035997699443047",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "102"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-30 01:11:17,856 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:11:17,858 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:11:17,862 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "Endian_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035999249648123",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "12"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_3": {
                "command": "ADD",
                "cookie": "45035997699443048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "12"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "Endian_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035999087137432",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "11"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_0": {
                "command": "ADD",
                "cookie": "45035997699443045",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "11"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "Endian_default_1": {
                "command": "ADD",
                "cookie": "45035997699443046",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "39"
                    }
                },
                "match": {
                    "in_port": "103"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035996332166362",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "36"
                    }
                },
                "match": {
                    "in_port": "102"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035997709651897",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "103"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2": {
                "command": "ADD",
                "cookie": "45035997699443047",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "102"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-30 01:11:17,864 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:11:17,864 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:11:17,870 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-30 01:11:17,871 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:11:17,871 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:11:17,876 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:165] 2015-12-30 01:13:49,658 > get_switch_port
[INFO|OpenflowHandler.py:131] 2015-12-30 01:13:49,659 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:13:49,660 > request_curl_url: http://192.168.17.179:8080/wm/core/switch/all/port/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:13:50,691 > {
    "00:00:00:0c:29:7d:49:ec": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "330000000",
                "durationSec": "58256",
                "portNumber": "4",
                "receiveBytes": "2572464",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "29605",
                "transmitBytes": "151964013",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3398778"
            },
            {
                "collisions": "0",
                "durationNsec": "208000000",
                "durationSec": "72837",
                "portNumber": "local",
                "receiveBytes": "2970735",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "64384",
                "transmitBytes": "150833246",
                "transmitDropped": "1218",
                "transmitErrors": "0",
                "transmitPackets": "3372420"
            },
            {
                "collisions": "0",
                "durationNsec": "626000000",
                "durationSec": "1376",
                "portNumber": "12",
                "receiveBytes": "10989742",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "83220",
                "transmitBytes": "912105",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "13650"
            }
        ],
        "version": "OF_13"
    },
    "00:00:00:0c:29:7d:49:f6": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "907000000",
                "durationSec": "1375",
                "portNumber": "11",
                "receiveBytes": "10771733",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "78216",
                "transmitBytes": "11004",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "218"
            },
            {
                "collisions": "0",
                "durationNsec": "32000000",
                "durationSec": "72837",
                "portNumber": "local",
                "receiveBytes": "2503700",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58589",
                "transmitBytes": "143579160",
                "transmitDropped": "2728",
                "transmitErrors": "0",
                "transmitPackets": "3218915"
            },
            {
                "collisions": "0",
                "durationNsec": "36000000",
                "durationSec": "72837",
                "portNumber": "1",
                "receiveBytes": "664938",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "7243",
                "transmitBytes": "144488617",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3231221"
            }
        ],
        "version": "OF_13"
    },
    "00:00:4a:72:d4:24:ae:41": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "68000000",
                "durationSec": "1378",
                "portNumber": "10",
                "receiveBytes": "10771989",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "78227",
                "transmitBytes": "3392",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "54"
            },
            {
                "collisions": "0",
                "durationNsec": "42000000",
                "durationSec": "72837",
                "portNumber": "local",
                "receiveBytes": "2470820",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58150",
                "transmitBytes": "150366012",
                "transmitDropped": "84",
                "transmitErrors": "0",
                "transmitPackets": "3373444"
            }
        ],
        "version": "OF_13"
    },
    "00:00:ee:42:21:d6:e1:44": {
        "port": [
            {
                "collisions": "0",
                "durationNsec": "327000000",
                "durationSec": "1375",
                "portNumber": "104",
                "receiveBytes": "134401",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "701",
                "transmitBytes": "10682922",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "77719"
            },
            {
                "collisions": "0",
                "durationNsec": "484000000",
                "durationSec": "1377",
                "portNumber": "101",
                "receiveBytes": "0",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "0",
                "transmitBytes": "10772942",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "78241"
            },
            {
                "collisions": "0",
                "durationNsec": "407000000",
                "durationSec": "63681",
                "portNumber": "56",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "153826315",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3456631"
            },
            {
                "collisions": "0",
                "durationNsec": "175000000",
                "durationSec": "72837",
                "portNumber": "local",
                "receiveBytes": "2443095",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57769",
                "transmitBytes": "154900383",
                "transmitDropped": "7551",
                "transmitErrors": "0",
                "transmitPackets": "3466223"
            },
            {
                "collisions": "0",
                "durationNsec": "209000000",
                "durationSec": "66225",
                "portNumber": "37",
                "receiveBytes": "2471953",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58047",
                "transmitBytes": "154169949",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3462580"
            },
            {
                "collisions": "0",
                "durationNsec": "199000000",
                "durationSec": "1378",
                "portNumber": "100",
                "receiveBytes": "3392",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "54",
                "transmitBytes": "10771989",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "78227"
            },
            {
                "collisions": "0",
                "durationNsec": "75000000",
                "durationSec": "66226",
                "portNumber": "36",
                "receiveBytes": "80309773",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "1802602",
                "transmitBytes": "81625289",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "1807892"
            },
            {
                "collisions": "0",
                "durationNsec": "133000000",
                "durationSec": "72837",
                "portNumber": "25",
                "receiveBytes": "648",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "8",
                "transmitBytes": "153690324",
                "transmitDropped": "29",
                "transmitErrors": "0",
                "transmitPackets": "3455617"
            },
            {
                "collisions": "0",
                "durationNsec": "36000000",
                "durationSec": "1376",
                "portNumber": "103",
                "receiveBytes": "11004",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "218",
                "transmitBytes": "10772693",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "78222"
            },
            {
                "collisions": "0",
                "durationNsec": "715000000",
                "durationSec": "56500",
                "portNumber": "63",
                "receiveBytes": "2456216",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57921",
                "transmitBytes": "154459481",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3468001"
            },
            {
                "collisions": "0",
                "durationNsec": "982000000",
                "durationSec": "56501",
                "portNumber": "62",
                "receiveBytes": "2445301",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57786",
                "transmitBytes": "154072184",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3461781"
            },
            {
                "collisions": "0",
                "durationNsec": "273000000",
                "durationSec": "63668",
                "portNumber": "57",
                "receiveBytes": "7453",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "55",
                "transmitBytes": "153795095",
                "transmitDropped": "1",
                "transmitErrors": "0",
                "transmitPackets": "3457694"
            },
            {
                "collisions": "0",
                "durationNsec": "0",
                "durationSec": "63704",
                "portNumber": "54",
                "receiveBytes": "2013",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "17",
                "transmitBytes": "154201571",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3459445"
            },
            {
                "collisions": "0",
                "durationNsec": "286000000",
                "durationSec": "66224",
                "portNumber": "38",
                "receiveBytes": "2468974",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "58016",
                "transmitBytes": "154105591",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3461983"
            },
            {
                "collisions": "0",
                "durationNsec": "929000000",
                "durationSec": "63692",
                "portNumber": "55",
                "receiveBytes": "690",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "9",
                "transmitBytes": "153706887",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3455831"
            },
            {
                "collisions": "0",
                "durationNsec": "454000000",
                "durationSec": "66223",
                "portNumber": "39",
                "receiveBytes": "77070183",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "1746963",
                "transmitBytes": "106817465",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "2417760"
            },
            {
                "collisions": "0",
                "durationNsec": "115000000",
                "durationSec": "56499",
                "portNumber": "64",
                "receiveBytes": "2447183",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57808",
                "transmitBytes": "154403768",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3464131"
            },
            {
                "collisions": "0",
                "durationNsec": "210000000",
                "durationSec": "56503",
                "portNumber": "61",
                "receiveBytes": "2446530",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "57801",
                "transmitBytes": "154076331",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3461829"
            },
            {
                "collisions": "0",
                "durationNsec": "745000000",
                "durationSec": "1376",
                "portNumber": "102",
                "receiveBytes": "912105",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "13650",
                "transmitBytes": "10989742",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "83220"
            },
            {
                "collisions": "0",
                "durationNsec": "597000000",
                "durationSec": "66222",
                "portNumber": "40",
                "receiveBytes": "2555426",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "60019",
                "transmitBytes": "154658059",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3465342"
            },
            {
                "collisions": "0",
                "durationNsec": "114000000",
                "durationSec": "56504",
                "portNumber": "60",
                "receiveBytes": "3119255",
                "receiveCRCErrors": "0",
                "receiveDropped": "0",
                "receiveErrors": "0",
                "receiveFrameErrors": "0",
                "receiveOverrunErrors": "0",
                "receivePackets": "64453",
                "transmitBytes": "155051926",
                "transmitDropped": "0",
                "transmitErrors": "0",
                "transmitPackets": "3475074"
            }
        ],
        "version": "OF_13"
    }
}
[INFO|OpenflowHandler.py:131] 2015-12-30 01:13:50,694 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:13:50,695 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:13:50,698 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-30 01:13:50,698 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:13:50,699 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:13:50,703 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-30 01:13:50,703 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 01:13:50,703 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 01:13:50,707 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:4a:72:d4:24:ae:41": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:13:50,708 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:13:50,708 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:13:50,708 > request_curl_post_data: {"name": "104 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "104"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:13:50,716 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:13:50,717 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:13:50,717 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:13:50,717 > request_curl_post_data: {"name": "101 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "101"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:13:50,721 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:13:50,721 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:13:50,721 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:13:50,721 > request_curl_post_data: {"name": "56 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "56"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:13:50,737 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:13:50,737 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:13:50,738 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:13:50,738 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:13:50,750 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:13:50,750 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:13:50,750 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:13:50,751 > request_curl_post_data: {"name": "37 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "37"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:13:50,757 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:13:50,758 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:13:50,758 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:13:50,758 > request_curl_post_data: {"name": "100 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "100"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:13:50,763 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:13:50,764 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:13:50,764 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:13:50,764 > request_curl_post_data: {"name": "36 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "36"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:13:50,778 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:13:50,778 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:13:50,778 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:13:50,778 > request_curl_post_data: {"name": "25 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "25"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:13:50,783 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:13:50,784 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:13:50,784 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:13:50,784 > request_curl_post_data: {"name": "103 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "103"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:13:50,793 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:13:50,793 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:13:50,793 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:13:50,793 > request_curl_post_data: {"name": "63 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "63"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:13:50,797 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:13:50,798 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:13:50,798 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:13:50,798 > request_curl_post_data: {"name": "62 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "62"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:13:50,814 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:13:50,814 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:13:50,815 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:13:50,815 > request_curl_post_data: {"name": "57 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "57"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:13:50,835 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:13:50,835 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:13:50,836 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:13:50,837 > request_curl_post_data: {"name": "54 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "54"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:13:50,843 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:13:50,844 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:13:50,844 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:13:50,845 > request_curl_post_data: {"name": "38 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "38"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:13:50,849 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:13:50,850 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:13:50,850 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:13:50,850 > request_curl_post_data: {"name": "55 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "55"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:13:50,855 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:13:50,856 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:13:50,856 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:13:50,856 > request_curl_post_data: {"name": "39 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "39"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:13:50,875 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:13:50,876 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:13:50,876 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:13:50,876 > request_curl_post_data: {"name": "64 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "64"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:13:50,882 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:13:50,883 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:13:50,883 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:13:50,883 > request_curl_post_data: {"name": "61 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "61"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:13:50,888 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:13:50,888 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:13:50,888 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:13:50,888 > request_curl_post_data: {"name": "102 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "102"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:13:50,894 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:13:50,895 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:13:50,895 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:13:50,895 > request_curl_post_data: {"name": "40 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "40"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:13:50,902 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:13:50,902 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:13:50,902 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:13:50,902 > request_curl_post_data: {"name": "60 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": "60"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:13:50,906 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:13:50,906 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:13:50,906 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:13:50,906 > request_curl_post_data: {"name": "4 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "4"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:13:50,910 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:13:50,911 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:13:50,911 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:13:50,911 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:13:50,916 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:13:50,917 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:13:50,917 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:13:50,917 > request_curl_post_data: {"name": "12 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": "12"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:13:50,926 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:13:50,926 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:13:50,927 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:13:50,927 > request_curl_post_data: {"name": "10 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "10"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:13:50,935 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:13:50,935 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:13:50,936 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:13:50,936 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:4a:72:d4:24:ae:41", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:13:50,940 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:13:50,940 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:13:50,940 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:13:50,941 > request_curl_post_data: {"name": "11 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "11"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:13:50,945 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:13:50,945 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:13:50,945 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:13:50,946 > request_curl_post_data: {"name": "local port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "local"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:13:50,950 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 01:13:50,951 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 01:13:50,951 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 01:13:50,951 > request_curl_post_data: {"name": "1 port drop rule", "actions": "output=drop", "priority": "1", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": "1"}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 01:13:50,956 > {
    "status": "Entry pushed"
}
[INFO|SFCManager.py:575] 2015-12-30 16:35:20,478 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 16:35:20,479 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 16:35:20,481 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 16:35:20,482 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 16:35:20,482 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 16:35:20,484 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 16:35:20,486 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[CRITICAL|OpenflowHandler.py:142] 2015-12-30 16:35:20,488 > couldn't connect to host
[ERROR|SFCManager.py:653] 2015-12-30 16:35:20,488 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-30 16:35:20,491 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 16:35:20,492 > load tenant entry (Endian)
[INFO|SFCManager.py:575] 2015-12-30 16:48:02,676 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 16:48:02,677 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 16:48:02,678 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 16:48:02,678 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 16:48:02,679 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 16:48:02,681 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 16:48:02,682 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-30 16:49:13,633 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-30 16:49:13,633 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-30 16:49:13,635 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 16:49:13,638 > load tenant entry (Endian)
[INFO|SFCManager.py:575] 2015-12-30 16:49:18,933 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 16:49:18,934 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 16:49:18,935 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 16:49:18,935 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 16:49:18,936 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 16:49:18,938 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 16:49:18,940 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-30 16:49:19,027 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-30 16:49:19,028 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-30 16:49:19,029 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 16:49:19,031 > load tenant entry (Endian)
[INFO|SFCManager.py:575] 2015-12-30 16:49:20,643 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 16:49:20,644 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 16:49:20,646 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 16:49:20,646 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 16:49:20,647 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 16:49:20,649 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 16:49:20,650 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-30 16:49:21,533 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-30 16:49:21,534 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-30 16:49:21,535 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 16:49:21,537 > load tenant entry (Endian)
[INFO|SFCManager.py:575] 2015-12-30 16:49:23,228 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 16:49:23,229 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 16:49:23,230 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 16:49:23,231 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 16:49:23,231 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 16:49:23,233 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 16:49:23,235 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-30 16:49:23,675 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-30 16:49:23,675 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-30 16:49:23,676 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 16:49:23,678 > load tenant entry (Endian)
[INFO|OpenflowHandler.py:131] 2015-12-30 16:49:28,228 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 16:49:28,229 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 16:49:28,249 > {}
[INFO|OpenflowHandler.py:131] 2015-12-30 16:49:28,249 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 16:49:28,250 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 16:49:28,266 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-30 16:49:28,267 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 16:49:28,267 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 16:49:28,277 > {}
[INFO|SFCManager.py:575] 2015-12-30 16:49:31,033 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 16:49:31,034 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 16:49:31,035 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 16:49:31,036 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 16:49:31,036 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 16:49:31,038 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 16:49:31,039 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 16:49:31,079 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 78,
            "shortPortNumber": 78
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 39,
            "shortPortNumber": 39
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-30 16:49:31,080 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 16:49:31,080 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/36/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 16:49:31,101 > [
    {
        "port": {
            "length": 4,
            "portNumber": 36,
            "shortPortNumber": 36
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 77,
            "shortPortNumber": 77
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 7,
            "shortPortNumber": 7
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-30 16:49:31,104 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 16:49:31,105 > load tenant entry (Endian)
[INFO|SFCManager.py:575] 2015-12-30 16:50:03,980 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 16:50:03,981 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 16:50:03,982 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 16:50:03,983 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 16:50:03,983 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 16:50:03,985 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 16:50:03,988 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 16:50:03,997 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 78,
            "shortPortNumber": 78
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 39,
            "shortPortNumber": 39
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-30 16:50:03,998 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 16:50:03,998 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/36/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 16:50:04,012 > [
    {
        "port": {
            "length": 4,
            "portNumber": 36,
            "shortPortNumber": 36
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 77,
            "shortPortNumber": 77
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 7,
            "shortPortNumber": 7
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-30 16:50:04,015 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 16:50:04,016 > load tenant entry (Endian)
[INFO|OpenflowHandler.py:95] 2015-12-30 16:50:04,019 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 16:50:04,019 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 16:50:04,019 > request_curl_post_data: {"name": "Endian_default_0", "actions": "output=4", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 1}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 16:50:04,067 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 16:50:04,068 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 16:50:04,068 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 16:50:04,068 > request_curl_post_data: {"name": "Endian_default_0_reverse", "actions": "output=1", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 4}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 16:50:04,079 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 16:50:04,080 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 16:50:04,081 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 16:50:04,081 > request_curl_post_data: {"name": "Endian_default_1", "actions": "output=39", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 78}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 16:50:04,091 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 16:50:04,091 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 16:50:04,091 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 16:50:04,091 > request_curl_post_data: {"name": "Endian_default_1_reverse", "actions": "output=78", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 39}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 16:50:04,098 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 16:50:04,098 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 16:50:04,098 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 16:50:04,098 > request_curl_post_data: {"name": "Endian_default_2", "actions": "output=77", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 36}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 16:50:04,107 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 16:50:04,107 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 16:50:04,108 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 16:50:04,108 > request_curl_post_data: {"name": "Endian_default_2_reverse", "actions": "output=36", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 77}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 16:50:04,117 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 16:50:04,117 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 16:50:04,118 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 16:50:04,118 > request_curl_post_data: {"name": "Endian_default_3", "actions": "output=4", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 7}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 16:50:04,126 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 16:50:04,126 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 16:50:04,127 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 16:50:04,127 > request_curl_post_data: {"name": "Endian_default_3_reverse", "actions": "output=7", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 4}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 16:50:04,134 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-30 16:50:04,135 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 16:50:04,135 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 16:50:04,148 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "Endian_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035999249648123",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "7"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_3": {
                "command": "ADD",
                "cookie": "45035997699443048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "Endian_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035999087137432",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_0": {
                "command": "ADD",
                "cookie": "45035997699443045",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "Endian_default_1": {
                "command": "ADD",
                "cookie": "45035997699443046",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "39"
                    }
                },
                "match": {
                    "in_port": "78"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035996332166362",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "36"
                    }
                },
                "match": {
                    "in_port": "77"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2": {
                "command": "ADD",
                "cookie": "45035997699443047",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "77"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035997709651897",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "78"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|SFCManager.py:575] 2015-12-30 20:20:46,005 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 20:20:46,107 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 20:20:46,411 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 20:20:46,412 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 20:20:46,412 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 20:20:46,519 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:20:46,522 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-30 20:20:46,540 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-30 20:20:46,540 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-30 20:20:46,541 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 20:20:46,543 > load tenant entry (Endian)
[INFO|SFCManager.py:575] 2015-12-30 20:20:48,528 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 20:20:48,529 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 20:20:48,530 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 20:20:48,530 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 20:20:48,531 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 20:20:48,533 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:20:48,534 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-30 20:20:48,640 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-30 20:20:48,640 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-30 20:20:48,643 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 20:20:48,644 > load tenant entry (Endian)
[INFO|OpenflowHandler.py:131] 2015-12-30 20:20:59,036 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:20:59,071 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 20:20:59,093 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "Endian_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035999249648123",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "7"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_3": {
                "command": "ADD",
                "cookie": "45035997699443048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "Endian_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035999087137432",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_0": {
                "command": "ADD",
                "cookie": "45035997699443045",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "Endian_default_1": {
                "command": "ADD",
                "cookie": "45035997699443046",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "39"
                    }
                },
                "match": {
                    "in_port": "78"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035996332166362",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "36"
                    }
                },
                "match": {
                    "in_port": "77"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2": {
                "command": "ADD",
                "cookie": "45035997699443047",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "77"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035997709651897",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "78"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-30 20:20:59,096 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:20:59,096 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 20:20:59,123 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-30 20:20:59,125 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:20:59,125 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 20:20:59,133 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|SFCManager.py:575] 2015-12-30 20:21:01,202 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 20:21:01,206 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 20:21:01,207 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 20:21:01,208 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 20:21:01,209 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 20:21:01,211 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:21:01,216 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-30 20:21:01,225 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-30 20:21:01,226 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-30 20:21:01,227 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 20:21:01,228 > load tenant entry (Endian)
[INFO|SFCManager.py:575] 2015-12-30 20:21:02,790 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 20:21:02,791 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 20:21:02,792 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 20:21:02,793 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 20:21:02,793 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 20:21:02,795 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:21:02,858 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-30 20:21:02,903 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-30 20:21:02,904 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-30 20:21:02,911 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 20:21:02,916 > load tenant entry (Endian)
[INFO|OpenflowHandler.py:131] 2015-12-30 20:21:04,295 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:21:04,297 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 20:21:04,301 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-30 20:21:04,301 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:21:04,301 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 20:21:04,305 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-30 20:21:04,306 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:21:04,306 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 20:21:04,312 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|SFCManager.py:575] 2015-12-30 20:21:05,509 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 20:21:05,509 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 20:21:05,511 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 20:21:05,512 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 20:21:05,512 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 20:21:05,514 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:21:05,517 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 20:21:05,526 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 78,
            "shortPortNumber": 78
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 39,
            "shortPortNumber": 39
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-30 20:21:05,527 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:21:05,527 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/36/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 20:21:05,533 > [
    {
        "port": {
            "length": 4,
            "portNumber": 36,
            "shortPortNumber": 36
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 77,
            "shortPortNumber": 77
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 7,
            "shortPortNumber": 7
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-30 20:21:05,537 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 20:21:05,538 > load tenant entry (Endian)
[INFO|OpenflowHandler.py:95] 2015-12-30 20:21:05,548 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 20:21:05,548 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 20:21:05,549 > request_curl_post_data: {"name": "Endian_default_0", "actions": "output=4", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 1}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 20:21:05,566 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 20:21:05,566 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 20:21:05,567 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 20:21:05,568 > request_curl_post_data: {"name": "Endian_default_0_reverse", "actions": "output=1", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 4}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 20:21:05,577 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 20:21:05,577 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 20:21:05,577 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 20:21:05,577 > request_curl_post_data: {"name": "Endian_default_1", "actions": "output=39", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 78}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 20:21:05,585 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 20:21:05,585 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 20:21:05,586 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 20:21:05,586 > request_curl_post_data: {"name": "Endian_default_1_reverse", "actions": "output=78", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 39}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 20:21:05,595 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 20:21:05,596 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 20:21:05,596 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 20:21:05,596 > request_curl_post_data: {"name": "Endian_default_2", "actions": "output=77", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 36}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 20:21:05,602 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 20:21:05,602 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 20:21:05,602 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 20:21:05,603 > request_curl_post_data: {"name": "Endian_default_2_reverse", "actions": "output=36", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 77}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 20:21:05,614 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 20:21:05,614 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 20:21:05,614 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 20:21:05,614 > request_curl_post_data: {"name": "Endian_default_3", "actions": "output=4", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 7}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 20:21:05,623 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 20:21:05,624 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 20:21:05,624 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 20:21:05,624 > request_curl_post_data: {"name": "Endian_default_3_reverse", "actions": "output=7", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 4}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 20:21:05,634 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-30 20:21:05,634 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:21:05,635 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 20:21:05,645 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "Endian_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035999249648123",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "7"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_3": {
                "command": "ADD",
                "cookie": "45035997699443048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "Endian_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035999087137432",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_0": {
                "command": "ADD",
                "cookie": "45035997699443045",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "Endian_default_1": {
                "command": "ADD",
                "cookie": "45035997699443046",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "39"
                    }
                },
                "match": {
                    "in_port": "78"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035996332166362",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "36"
                    }
                },
                "match": {
                    "in_port": "77"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2": {
                "command": "ADD",
                "cookie": "45035997699443047",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "77"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035997709651897",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "78"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|SFCManager.py:575] 2015-12-30 20:22:18,169 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 20:22:18,169 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 20:22:18,171 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 20:22:18,171 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 20:22:18,172 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 20:22:18,174 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:22:18,175 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-30 20:22:18,182 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-30 20:22:18,182 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-30 20:22:18,183 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 20:22:18,184 > load tenant entry (Endian)
[INFO|SFCManager.py:575] 2015-12-30 20:22:19,527 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 20:22:19,528 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 20:22:19,529 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 20:22:19,530 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 20:22:19,530 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 20:22:19,532 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:22:19,533 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-30 20:22:19,542 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-30 20:22:19,542 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-30 20:22:19,543 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 20:22:19,545 > load tenant entry (Endian)
[INFO|SFCManager.py:575] 2015-12-30 20:22:20,838 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 20:22:20,839 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 20:22:20,840 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 20:22:20,841 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 20:22:20,841 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 20:22:20,843 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:22:20,845 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-30 20:22:20,853 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-30 20:22:20,853 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-30 20:22:20,855 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 20:22:20,856 > load tenant entry (Endian)
[INFO|SFCManager.py:575] 2015-12-30 20:22:30,431 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 20:22:30,432 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 20:22:30,433 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 20:22:30,434 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 20:22:30,434 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 20:22:30,436 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:22:30,438 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-30 20:22:30,443 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-30 20:22:30,444 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-30 20:22:30,448 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 20:22:30,449 > load tenant entry (Endian)
[INFO|OpenflowHandler.py:131] 2015-12-30 20:22:34,889 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:22:34,891 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 20:22:34,897 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "Endian_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035999249648123",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "7"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_3": {
                "command": "ADD",
                "cookie": "45035997699443048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "Endian_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035999087137432",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_0": {
                "command": "ADD",
                "cookie": "45035997699443045",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "Endian_default_1": {
                "command": "ADD",
                "cookie": "45035997699443046",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "39"
                    }
                },
                "match": {
                    "in_port": "78"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035996332166362",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "36"
                    }
                },
                "match": {
                    "in_port": "77"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2": {
                "command": "ADD",
                "cookie": "45035997699443047",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "77"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035997709651897",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "78"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-30 20:22:34,898 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:22:34,898 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 20:22:34,905 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-30 20:22:34,906 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:22:34,907 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 20:22:34,913 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|SFCManager.py:575] 2015-12-30 20:22:36,339 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 20:22:36,342 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 20:22:36,347 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 20:22:36,347 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 20:22:36,348 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 20:22:36,353 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:22:36,354 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-30 20:22:36,359 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-30 20:22:36,359 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-30 20:22:36,362 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 20:22:36,364 > load tenant entry (Endian)
[INFO|SFCManager.py:575] 2015-12-30 20:22:37,669 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 20:22:37,670 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 20:22:37,671 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 20:22:37,672 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 20:22:37,672 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 20:22:37,674 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:22:37,676 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-30 20:22:37,684 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-30 20:22:37,684 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-30 20:22:37,685 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 20:22:37,687 > load tenant entry (Endian)
[INFO|SFCManager.py:575] 2015-12-30 20:22:38,844 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 20:22:38,845 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 20:22:38,847 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 20:22:38,847 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 20:22:38,848 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 20:22:38,850 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:22:38,851 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-30 20:22:38,861 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-30 20:22:38,861 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-30 20:22:38,862 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 20:22:38,864 > load tenant entry (Endian)
[INFO|SFCManager.py:575] 2015-12-30 20:22:40,162 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 20:22:40,163 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 20:22:40,164 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 20:22:40,165 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 20:22:40,165 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 20:22:40,167 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:22:40,169 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-30 20:22:40,177 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-30 20:22:40,177 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-30 20:22:40,179 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 20:22:40,180 > load tenant entry (Endian)
[INFO|SFCManager.py:575] 2015-12-30 20:22:41,332 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 20:22:41,333 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 20:22:41,335 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 20:22:41,335 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 20:22:41,336 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 20:22:41,338 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:22:41,341 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-30 20:22:41,348 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-30 20:22:41,349 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-30 20:22:41,350 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 20:22:41,351 > load tenant entry (Endian)
[INFO|SFCManager.py:575] 2015-12-30 20:22:42,827 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 20:22:42,828 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 20:22:42,829 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 20:22:42,830 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 20:22:42,830 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 20:22:42,832 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:22:42,833 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-30 20:22:42,840 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-30 20:22:42,841 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-30 20:22:42,842 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 20:22:42,843 > load tenant entry (Endian)
[INFO|SFCManager.py:575] 2015-12-30 20:22:44,917 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 20:22:44,918 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 20:22:44,920 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 20:22:44,920 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 20:22:44,920 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 20:22:44,922 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:22:44,924 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-30 20:22:44,932 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-30 20:22:44,932 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-30 20:22:44,933 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 20:22:44,934 > load tenant entry (Endian)
[INFO|OpenflowHandler.py:131] 2015-12-30 20:22:46,746 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:22:46,748 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 20:22:46,751 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2015-12-30 20:22:46,751 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:22:46,752 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 20:22:46,755 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-30 20:22:46,755 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:22:46,755 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 20:22:46,759 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|SFCManager.py:575] 2015-12-30 20:22:48,321 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 20:22:48,322 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 20:22:48,324 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 20:22:48,325 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 20:22:48,325 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 20:22:48,327 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:22:48,329 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:156] 2015-12-30 20:22:48,336 > There is no route for request info
[ERROR|SFCManager.py:653] 2015-12-30 20:22:48,336 > there are no service_path_entry None
[DEBUG|SFCManager.py:693] 2015-12-30 20:22:48,337 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 20:22:48,339 > load tenant entry (Endian)
[INFO|SFCManager.py:575] 2015-12-30 20:22:49,667 > validate_NS
[DEBUG|SFCManager.py:581] 2015-12-30 20:22:49,668 > load ns entry (Endian)
[INFO|SFCManager.py:602] 2015-12-30 20:22:49,669 > A network scenario check is complete
[INFO|SFCManager.py:524] 2015-12-30 20:22:49,670 > ingress_endpoint loading is completed(br-server-ep)
[INFO|SFCManager.py:528] 2015-12-30 20:22:49,670 > egress_endpoint loading is completed(br-office-ep)
[INFO|OpenflowHandler.py:131] 2015-12-30 20:22:49,672 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:22:49,674 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:00:0c:29:7d:49:f6/1/00:00:ee:42:21:d6:e1:44/39/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 20:22:49,682 > [
    {
        "port": {
            "length": 4,
            "portNumber": 1,
            "shortPortNumber": 1
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:f6"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 78,
            "shortPortNumber": 78
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 39,
            "shortPortNumber": 39
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    }
]
[INFO|OpenflowHandler.py:131] 2015-12-30 20:22:49,683 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:22:49,683 > request_curl_url: http://192.168.17.179:8080/wm/topology/route/00:00:ee:42:21:d6:e1:44/36/00:00:00:0c:29:7d:49:ec/4/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 20:22:49,690 > [
    {
        "port": {
            "length": 4,
            "portNumber": 36,
            "shortPortNumber": 36
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 77,
            "shortPortNumber": 77
        },
        "switch": "00:00:ee:42:21:d6:e1:44"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 7,
            "shortPortNumber": 7
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    },
    {
        "port": {
            "length": 4,
            "portNumber": 4,
            "shortPortNumber": 4
        },
        "switch": "00:00:00:0c:29:7d:49:ec"
    }
]
[DEBUG|SFCManager.py:693] 2015-12-30 20:22:49,694 > load ns entry (Endian)
[DEBUG|SFCManager.py:701] 2015-12-30 20:22:49,695 > load tenant entry (Endian)
[INFO|OpenflowHandler.py:95] 2015-12-30 20:22:49,700 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 20:22:49,700 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 20:22:49,700 > request_curl_post_data: {"name": "Endian_default_0", "actions": "output=4", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 1}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 20:22:49,715 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 20:22:49,716 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 20:22:49,716 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 20:22:49,716 > request_curl_post_data: {"name": "Endian_default_0_reverse", "actions": "output=1", "priority": "100", "switch": "00:00:00:0c:29:7d:49:f6", "cookie": "0", "active": "true", "in_port": 4}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 20:22:49,724 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 20:22:49,725 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 20:22:49,725 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 20:22:49,725 > request_curl_post_data: {"name": "Endian_default_1", "actions": "output=39", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 78}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 20:22:49,737 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 20:22:49,737 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 20:22:49,738 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 20:22:49,738 > request_curl_post_data: {"name": "Endian_default_1_reverse", "actions": "output=78", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 39}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 20:22:49,745 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 20:22:49,746 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 20:22:49,746 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 20:22:49,746 > request_curl_post_data: {"name": "Endian_default_2", "actions": "output=77", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 36}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 20:22:49,755 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 20:22:49,755 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 20:22:49,755 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 20:22:49,756 > request_curl_post_data: {"name": "Endian_default_2_reverse", "actions": "output=36", "priority": "100", "switch": "00:00:ee:42:21:d6:e1:44", "cookie": "0", "active": "true", "in_port": 77}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 20:22:49,768 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 20:22:49,770 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 20:22:49,771 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 20:22:49,772 > request_curl_post_data: {"name": "Endian_default_3", "actions": "output=4", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 7}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 20:22:49,778 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:95] 2015-12-30 20:22:49,779 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:100] 2015-12-30 20:22:49,779 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/json
[DEBUG|OpenflowHandler.py:107] 2015-12-30 20:22:49,779 > request_curl_post_data: {"name": "Endian_default_3_reverse", "actions": "output=7", "priority": "100", "switch": "00:00:00:0c:29:7d:49:ec", "cookie": "0", "active": "true", "in_port": 4}
[DEBUG|OpenflowHandler.py:126] 2015-12-30 20:22:49,787 > {
    "status": "Entry pushed"
}
[INFO|OpenflowHandler.py:131] 2015-12-30 20:22:49,790 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:22:49,791 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 20:22:49,802 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "Endian_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035999249648123",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "7"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_3": {
                "command": "ADD",
                "cookie": "45035997699443048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "Endian_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035999087137432",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_0": {
                "command": "ADD",
                "cookie": "45035997699443045",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "Endian_default_1": {
                "command": "ADD",
                "cookie": "45035997699443046",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "39"
                    }
                },
                "match": {
                    "in_port": "78"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035996332166362",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "36"
                    }
                },
                "match": {
                    "in_port": "77"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2": {
                "command": "ADD",
                "cookie": "45035997699443047",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "77"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035997709651897",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "78"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-30 20:30:51,924 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:30:51,925 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 20:30:51,930 > {
    "00:00:00:0c:29:7d:49:ec": [
        {
            "Endian_default_3_reverse": {
                "command": "ADD",
                "cookie": "45035999249648123",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "7"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_3": {
                "command": "ADD",
                "cookie": "45035997699443048",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "7"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:00:0c:29:7d:49:f6": [
        {
            "Endian_default_0_reverse": {
                "command": "ADD",
                "cookie": "45035999087137432",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "1"
                    }
                },
                "match": {
                    "in_port": "4"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_0": {
                "command": "ADD",
                "cookie": "45035997699443045",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "4"
                    }
                },
                "match": {
                    "in_port": "1"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ],
    "00:00:ee:42:21:d6:e1:44": [
        {
            "Endian_default_1": {
                "command": "ADD",
                "cookie": "45035997699443046",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "39"
                    }
                },
                "match": {
                    "in_port": "78"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2_reverse": {
                "command": "ADD",
                "cookie": "45035996332166362",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "36"
                    }
                },
                "match": {
                    "in_port": "77"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_2": {
                "command": "ADD",
                "cookie": "45035997699443047",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "77"
                    }
                },
                "match": {
                    "in_port": "36"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        },
        {
            "Endian_default_1_reverse": {
                "command": "ADD",
                "cookie": "45035997709651897",
                "cookieMask": "0",
                "flags": "1",
                "hardTimeoutSec": "0",
                "idleTimeoutSec": "0",
                "instructions": {
                    "instruction_apply_actions": {
                        "output": "78"
                    }
                },
                "match": {
                    "in_port": "39"
                },
                "outGroup": "any",
                "outPort": "any",
                "priority": "100",
                "version": "OF_13"
            }
        }
    ]
}
[INFO|OpenflowHandler.py:131] 2015-12-30 20:30:51,932 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:30:51,932 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/clear/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 20:30:51,943 > {
    "status": "Deleted all flows."
}
[INFO|OpenflowHandler.py:131] 2015-12-30 20:30:51,943 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2015-12-30 20:30:51,943 > request_curl_url: http://192.168.17.179:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2015-12-30 20:30:51,947 > {
    "00:00:00:0c:29:7d:49:ec": [],
    "00:00:00:0c:29:7d:49:f6": [],
    "00:00:ee:42:21:d6:e1:44": []
}
[INFO|OpenflowHandler.py:131] 2016-01-13 02:39:41,797 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2016-01-13 02:39:41,800 > request_curl_url: http://127.0.0.1:8080/wm/staticflowpusher/list/all/json
[CRITICAL|OpenflowHandler.py:142] 2016-01-13 02:39:41,800 > couldn't connect to host
[INFO|OpenflowHandler.py:131] 2016-01-13 02:40:26,910 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2016-01-13 02:40:26,911 > request_curl_url: http://127.0.0.1:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2016-01-13 02:40:26,998 > {}
[INFO|OpenflowHandler.py:131] 2016-01-13 02:40:28,494 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2016-01-13 02:40:28,495 > request_curl_url: http://127.0.0.1:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2016-01-13 02:40:28,509 > {}
[INFO|OpenflowHandler.py:131] 2016-01-13 02:40:51,562 > by using pycurl, __get function returns the response of the requested url.
[DEBUG|OpenflowHandler.py:135] 2016-01-13 02:40:51,564 > request_curl_url: http://127.0.0.1:8080/wm/staticflowpusher/list/all/json
[DEBUG|OpenflowHandler.py:152] 2016-01-13 02:40:51,574 > {}
